---
description: 
globs: 
alwaysApply: false
---
# API Documentation Repository Structure Guide

## Overview
This repository uses a **dual-location pattern** for API documentation with role-based organization:

- **`reference/`** - Complete compiled OpenAPI specifications for each role
- **`src/`** - Modular source files that compile into reference files
- **Role-based structure** - Each user role (spender, admin, approver, etc.) has dedicated files

## Key Files and Structure

### Reference Files (Compiled Specifications)
- [reference/spender.yaml](mdc:reference/spender.yaml) - Complete spender API specification
- [reference/admin.yaml](mdc:reference/admin.yaml) - Complete admin API specification  
- [reference/approver.yaml](mdc:reference/approver.yaml) - Complete approver API specification
- [reference/common.yaml](mdc:reference/common.yaml) - APIs available to all roles

### Source Files (Modular Development)
- [src/spender/openapi.yaml](mdc:src/spender/openapi.yaml) - Spender role OpenAPI header with path references
- [src/spender/paths/](mdc:src/spender/paths) - Individual API endpoint definitions
- [src/components/schemas/](mdc:src/components/schemas) - Shared schema definitions
- [src/components/parameters/](mdc:src/components/parameters) - Reusable parameters

### Documentation Structure
- [toc.json](mdc:toc.json) - Table of contents defining documentation organization
- [docs/](mdc:docs) - Conceptual documentation and guides

## File Naming Conventions

### Path Files
- Use `@` separator: `spender@reports@submit.yaml`
- Maps to URL path: `/spender/reports/submit`
- Example: [src/spender/paths/spender@reports@submit.yaml](mdc:src/spender/paths/spender@reports@submit.yaml)

### Schema Files
- Descriptive names: `report.yaml`, `expense.yaml`, `user.yaml`
- Example: [src/components/schemas/report.yaml](mdc:src/components/schemas/report.yaml)

## CRITICAL REQUIREMENTS & COMMON MISTAKES TO AVOID

### ⚠️ **Read Specifications Carefully**
- **READ the source specification document CAREFULLY before implementing**
- Pay attention to HTTP method (GET vs POST)
- Check if request uses query parameters vs request body payload
- Verify the exact payload structure and field names
- Don't assume - always double-check the specification

### ⚠️ **Schema Organization Rules**
- **DO NOT create separate schema files for related schemas**
- Add new schemas to existing resource files (e.g., `advance_request.yaml`)
- Use pattern: `{resource}_{action}_in` and `{resource}_{action}_out`
- Keep related schemas together in the same file

### ⚠️ **Tag Consistency**  
- Use existing tag names from the codebase for APIs of the same resource
- Create new tags when adding new resources
- Check existing endpoints to see what tags are used
- Maintain consistency across all role-based files

### ⚠️ **Required Fields**
- Be careful with `required` fields in schemas
- Only mark fields as required if they are truly mandatory
- Review existing similar schemas for patterns

### ⚠️ **Path References**
- Use correct relative paths: `../../components/schemas/{file}.yaml#{schema_name}`
- Reference existing schema files, don't create unnecessary new ones
- Verify the schema reference path exists and is correct

### ⚠️ **Multi-Role Updates**
- When adding APIs for multiple roles, ensure consistency across all:
  - Same request/response structure
  - Same schema references  
  - Same tag names
  - Same operation naming patterns

## Adding a New API

When adding a new API specification, update **src folder**:

### Source Files (`src/`)
1. **Create path file**: Add in `src/{role}/paths/{role}@{resource}@{action}.yaml`
2. **Define schemas**: Add/update schemas in `src/components/schemas/`
3. **Reference path**: Add path reference in `src/{role}/openapi.yaml`

## Schema Organization

### Shared Components
- **Common fields**: [src/components/schemas/fields.yaml](mdc:src/components/schemas/fields.yaml)
- **Error responses**: [src/components/schemas/400.yaml](mdc:src/components/schemas/400.yaml), [src/components/schemas/401.yaml](mdc:src/components/schemas/401.yaml)
- **Resource schemas**: Separate files for each major resource type

### Cross-References
- Use relative paths: `../../components/schemas/report.yaml#/report_action_submit`
- Reference specific schema definitions using `#/schema_name`

## Role-Based Structure

Each role has consistent organization:
```
src/{role}/
├── openapi.yaml          # Role-specific OpenAPI header
└── paths/               # Individual API endpoints
    ├── {role}@resource.yaml
    ├── {role}@resource@action.yaml
    └── ...
```

## API Definition Pattern

### Example: Submit Report API

**Path File**: [src/spender/paths/spender@reports@submit.yaml](mdc:src/spender/paths/spender@reports@submit.yaml)
```yaml
post:
  operationId: reports_submit_post
  requestBody:
    schema:
      properties:
        data:
          $ref: '../../components/schemas/report.yaml#/report_action_submit'
```

**Schema Definition**: [src/components/schemas/report.yaml](mdc:src/components/schemas/report.yaml)
```yaml
report_action_submit:
  type: object
  required: [id]
  properties:
    id:
      type: string
      description: id of report, which needs to be submitted
```

## Best Practices

1. **Consistency**: Follow existing naming patterns and file organization
2. **Modularity**: Keep individual API definitions in separate files
3. **Reusability**: Use shared schemas and components when possible
4. **Documentation**: Include descriptions and examples in schemas
5. **Validation**: Ensure both source and reference files are updated when making changes
6. **Verification**: Double-check specification documents before implementing
7. **Schema Reuse**: Add to existing schema files rather than creating new ones

## Common Schema Patterns

- **Input schemas**: `{resource}_in`, `{resource}_{action}_in`
- **Output schemas**: `{resource}_out`, `{resource}_{action}_out`  
- **Action schemas**: `{resource}_action_{action}` (e.g., `report_action_submit`)
- **Embed schemas**: `{resource}_out_embed` for nested objects

## Checklist for New API Documentation

- [ ] Read specification document carefully (method, payload, response)
- [ ] Add schemas to existing resource file, not new file
- [ ] Create path files for all required roles
- [ ] Update all role-specific openapi.yaml files
- [ ] Use consistent tags across all roles
- [ ] Verify schema references are correct
openapi: 3.0.3
info:
  version: '1.0'
  title: Approver APIs
  description: Fyle Platform Approver APIs
  contact:
    name: Integrations
    email: support@fylehq.com
servers:
  - url: 'https://hulk.fyle.tech/platform/v1'
    description: Staging Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.fylehq.com/app/developers/#/oauth/authorize'
          tokenUrl: 'https://accounts.fylehq.com/oauth/token'
          scopes:
            '*': Grant all actions
  parameters:
    created_at:
      in: query
      name: created_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ  format along with operator in
        RHS dot pattern.<br> Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example:
          - 'gte.2020-06-01T00:00:00.000-08:00'
          - 'lt.2020-07-01T00:00:00.000-08:00'
    updated_at:
      in: query
      name: updated_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ  format along with operator in
        RHS dot pattern.<br> Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example:
          - 'gte.2020-06-01T00:00:00.000-08:00'
          - 'lt.2020-07-01T00:00:00.000-08:00'
    last_approved_at:
      in: query
      name: last_approved_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example: >-
          approved_at=gte.2020-06-01T00:00:00.000Z&approved_at=lt.2020-07-01T00:00:00.000Z
    last_reimbursed_at:
      in: query
      name: last_reimbursed_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example: >-
          reimbursed_at=gte.2020-06-01T00:00:00.000Z&reimbursed_at=lt.2020-07-01T00:00:00.000Z
    last_submitted_at:
      in: query
      name: last_submitted_at
      description: >
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ format along with operator in
        RHS dot pattern.<br>

        Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example:
          - 'gte.2020-06-01T00:00:00.000Z'
          - 'lt.2020-07-01T00:00:00.000Z'
    state:
      in: query
      name: state
      description: >
        Accepted states are DRAFT, COMPLETE, APPROVER_PENDING, APPROVED,
        PAYMENT_PENDING, PAYMENT_PROCESSING, PAID.<br>

        Supported operators are `eq`, `like`, `in`.<br>
      schema:
        type: string
        example: in.(COMPLETE)
    offset:
      in: query
      name: offset
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    limit:
      in: query
      name: limit
      description: >
        A limit on the number of objects to be returned. Allowed values are from
        1 to 200.
      schema:
        type: integer
        example: 20
        default: 50
        maximum: 200
  schemas:
    '400':
      type: object
      properties:
        message:
          type: string
          nullable: true
          description: |
            Message describing why the request is valid
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: >
            This error means that the input access token is either not issued by
            Fyle or has expired.

            You need to generate a new access token.
    count:
      type: integer
      description: |
        The total number of objects that can be requested.
      example: 10000
    offset:
      description: >
        offset is used to skip that many number of objects before counting. <br>

        For example, if there are 2000 objects, <br>

        The first request will have offset as 0 and limit as 1000 to return
        first 1000 objects. <br>

        The second request will have offset as 1000 and limit as 1000 to return
        next 1000 objects. <br>
      type: integer
      example: 10
    id_string:
      type: string
      maxLength: 15
      description: |
        This id provided by Fyle to identify an object.
      example: sdfd2391
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      readOnly: true
      example: orwruogwnngg
    created_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was created.
      example: '2020-06-01T13:14:54.804+00:00'
    updated_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was updated.
      example: '2020-06-11T13:14:55.201598+00:00'
    email:
      type: string
      maxLength: 127
      example: john.doe@example.com
      description: >
        An immutable field that represents the email address of the employee.

        Must be compliant with <a href='https://www.ietf.org/rfc/rfc822.txt'>RFC
        822.</a>
    user_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: >
            Represents the full name of the Employee. Must be at least 3
            characters.
          example: John Doe
    currency:
      type: string
      description: >
        The three-letter currency code following ISO standard <a
        href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
      example: USD
      pattern: '([A-Z]{3})'
    amount:
      type: number
      description: |
        amount of money
      example: 47.99
    report_approval_out_embed:
      type: object
      additionalProperties: false
      properties:
        approver_user_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        approver_user:
          $ref: '#/components/schemas/user_out_embed'
        state:
          type: string
          enum:
            - APPROVAL_PENDING
            - APPROVAL_DISABLED
            - APPROVAL_DONE
          description: |
            State of this report_approval
    report_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          $ref: '#/components/schemas/id_string'
        user:
          $ref: '#/components/schemas/user_out_embed'
        purpose:
          type: string
          description: purpose for creating the report
          example: Business trip to London
          nullable: true
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        tax:
          type: number
          description: |
            Tax value of the object.
          example: 18.23
          nullable: true
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
        num_expenses:
          type: integer
          description: |
            Number of expenses part of this report
          example: 3
        is_manually_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged manually
        is_policy_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged from a policy
        last_reimbursed_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was reimbursed.
          nullable: true
        last_approved_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was approved.
          nullable: true
        last_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was submitted.
          nullable: true
        claim_number:
          type: string
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        source:
          type: string
          description: |
            where was this report object created from
          nullable: true
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        approver_user_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
tags:
  - name: Reports
    description: |
      This API gives you access to your organisation's Expense Reports
paths:
  /approver/reports:
    get:
      tags:
        - Reports
      summary: List reports
      operationId: get-reports
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/last_approved_at'
        - $ref: '#/components/parameters/last_reimbursed_at'
        - $ref: '#/components/parameters/last_submitted_at'
        - $ref: '#/components/parameters/state'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - in: query
          name: order
          description: |
            use comma separated column names for sorting the results. <br>
            For sorting in descending order, use `updated_at.desc`.<br>
            Supported columns are `updated_at`, `id`.
          schema:
            type: string
            example: 'updated_at.desc,id'
        - in: query
          name: approvals
          description: >
            the approvals can be queried upon, for eg. to get reports which a
            certain approver still has to approve
          schema:
            type: string
            example:
              - 'cs.[{"approver_id":"oulkAsh23","state":"APPROVAL_PENDING"}]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                  - offset
                  - data
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_out'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  '/approver/reports/{report_id}/partially_approve':
    post:
      tags:
        - Reports
      summary: Approve reports
      description: Approve a report
      operationId: approve-reports
      parameters:
        - in: path
          name: report_id
          required: true
          description: |
            the id of report that is to be approved
          schema:
            type: string
            example: rpa21Adj2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'

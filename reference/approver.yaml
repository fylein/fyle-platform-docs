openapi: 3.0.3
info:
  version: '1.0'
  title: Approver APIs
  description: |
    These APIs are generally used by applications that want to enable approval of reports.
  contact:
    name: Platform Beta
    email: support@fylehq.com
servers:
  - url: https://us1.fylehq.com/platform/v1
    description: US Region Server
  - url: https://in1.fylehq.com/platform/v1
    description: India Region Server
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://app.fylehq.com/app/developers/#/oauth/authorize
          tokenUrl: https://accounts.fylehq.com/oauth/token
          scopes:
            '*': Grant all actions
  schemas:
    '400':
      type: object
      properties:
        message:
          type: string
          nullable: true
          description: |
            Message describing why the request is invalid
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: |
            This error means that the input access token is either not issued by Fyle or has expired.
            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: |
            This error means current user does not have enough permissions to perform this operation.
    '404':
      type: object
      properties:
        message:
          enum:
            - Resource not found
          type: string
          description: |
            This error means the requested resource was not found or the requester doesn't have sufficient access.
    count:
      type: integer
      description: |
        The total number of objects that can be requested.
      example: 10000
    offset:
      description: |
        offset is used to skip that many number of objects before counting. <br>
        For example, if there are 2000 objects, <br>
        The first request will have offset as 0 and limit as 200 to return first 200 objects. <br>
        The second request will have offset as 200 and limit as 200 to return next 200 objects. <br>
      type: integer
      example: 10
    id_string:
      type: string
      maxLength: 15
      description: |
        This id is provided by Fyle to identify an object.
      example: sdfd2391
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      readOnly: true
      example: orwruogwnngg
    created_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was created in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T13:14:54.804+00:00'
    updated_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was updated in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-11T13:14:55.201598+00:00'
    email:
      type: string
      maxLength: 127
      example: john.doe@example.com
      description: |
        An immutable field that represents the email address of the employee.
        Must be compliant with <a href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
    user_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: uswjwgnwwgo
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters.
          example: John Doe
    currency:
      type: string
      description: |
        The three-letter currency code following ISO standard <a href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
      example: USD
      pattern: ([A-Z]{3})
    amount:
      type: number
      description: |
        amount of money
      example: 47.99
    fk_string:
      type: string
      nullable: true
      maxLength: 15
      description: |
        This id is provided by Fyle to identify an object.
      example: sdfd2391
    report_approval_out_embed:
      type: object
      additionalProperties: false
      properties:
        approver_user_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        approver_user:
          $ref: '#/components/schemas/user_out_embed'
        state:
          type: string
          enum:
            - APPROVAL_PENDING
            - APPROVAL_DISABLED
            - APPROVAL_DONE
          description: |
            State of this report_approval
    employee_id:
      type: string
      maxLength: 255
      description: |
        This id provided by Fyle to uniquely identify an employee within an organization.
        This id is always prefixed with `ou`.
      example: outGt9ju6qP
    user_id:
      type: string
      description: |
        The unique id of an user to which the object is associated.
      readOnly: true
      example: uswjwgnwwgo
    department_id:
      type: string
      maxLength: 255
      nullable: true
      example: dept9in4oIHpdR
    code:
      type: string
      nullable: true
      maxLength: 255
      description: |
        This represents a code that is typically used for syncing with other systems.
      example: C1234
    name:
      type: string
      maxLength: 255
      description: |
        This represents the name of the resource. This should be unique in an organization
      example: foo123
    department_out_embed:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        code:
          $ref: '#/components/schemas/code'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales
        sub_department:
          type: string
          nullable: true
          example: Outbound Sales
        display_name:
          type: string
          example: Sales / Outbound Sales
          description: |
            This is a combination of name and sub_department separated by a / and spaces. In case if no sub_department is present it is same as name of the department.
    employee_out_embed_for_report:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        org_id:
          $ref: '#/components/schemas/org_id'
        department_id:
          nullable: true
          $ref: '#/components/schemas/department_id'
        department:
          nullable: true
          $ref: '#/components/schemas/department_out_embed'
        ach_account:
          additionalProperties: false
          type: object
          properties:
            added:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee has added ach account
            verified:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee's ach account is verified.
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
    report_out:
      type: object
      additionalProperties: false
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - user_id
        - user
        - purpose
        - currency
        - amount
        - tax
        - state
        - num_expenses
        - is_manually_flagged
        - is_policy_flagged
        - last_paid_at
        - last_approved_at
        - last_submitted_at
        - last_resubmitted_at
        - seq_num
        - source
        - approvals
        - employee
        - next_approver_user_ids
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          $ref: '#/components/schemas/id_string'
        user:
          $ref: '#/components/schemas/user_out_embed'
        purpose:
          type: string
          description: purpose for creating the report
          example: Business trip to London
          nullable: true
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        tax:
          type: number
          description: |
            Tax value of the object.
          example: 18.23
          nullable: true
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
        num_expenses:
          type: integer
          description: |
            Number of expenses part of this report
          example: 3
        is_verified:
          type: boolean
          nullable: true
          description: |
            Determines whether this report has been verified by a verifier
        settlement_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: set5nlgnwgwl
        is_physical_bill_submitted:
          type: boolean
          nullable: true
          description: |
            If physical has been collected for this report
        physical_bill_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when the physical bill for this report was submitted.
          nullable: true
        is_manually_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged manually
        is_policy_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged from a policy
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been exported to external accounting system or not.
        last_paid_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was reimbursed.
          nullable: true
        last_approved_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was approved.
          nullable: true
        last_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was submitted.
          nullable: true
        last_resubmitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was resubmitted.
          nullable: true
        seq_num:
          type: string
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        source:
          type: string
          description: |
            where was this report object created from
          nullable: true
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed_for_report'
        next_approver_user_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - us123heh98
        state_display_name:
          type: string
          example: Sent Back
          description: readable state name
        accounting_export_summary:
          type: object
          description: |
            Summary of accounting export for this report.
          properties:
            state:
              type: string
              enum:
                - COMPLETE
                - ERROR
                - IN_PROGRESS
                - SKIPPED
                - INITIATED
              example: COMPLETE
            skipped:
              type: number
              description: |
                Number of skipped expenses.
              example: 2
            failed:
              type: number
              description: |
                Number of failed expenses.
              example: 0
            complete:
              type: number
              description: |
                Number of complete expenses.
              example: 5
            in_progress:
              type: number
              description: |
                Number of in progress expenses.
              example: 0
            initiate:
              type: number
              description: |
                Number of initiated expenses.
              example: 0
            tpa_id:
              type: string
              nullable: false
              description: |
                Third party app id.
              example: tpa_1234567890
    approver_report_in:
      type: object
      additionalProperties: false
      required:
        - purpose
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        purpose:
          type: string
          description: |
            Indicates purpose of the reports. It can only be updated for an existing report when the report is in `APPROVER_PENDING` state.
          example: '#1: Jun 2020'
    report_action_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          type: string
          description: |
            id of report that is to be approved
          example: rpa21A2rdj2
    reason:
      type: string
      description: |
        Explanation to the action if provided by the user
      example: All bills are in order
    timestamptz_utc:
      type: string
      format: date-time
      nullable: true
      description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T13:14:54.804+00:00'
    foreign_currency:
      type: string
      nullable: true
      description: |
        The three-letter currency code following ISO standard <a href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
      example: GBP
    foreign_amount:
      type: number
      nullable: true
      description: |
        Amount value of the object, in original currency i.e the currency in which the object was initially created.
      example: 3768
    fk_integer:
      type: integer
      nullable: true
      description: |
        This id is provided by Fyle to identify an object.
      example: 1234
    id_integer:
      type: integer
      description: |
        This id is provided by Fyle to identify an object.
      example: 1234
    cost_center_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          $ref: '#/components/schemas/code'
    category_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        system_category:
          nullable: true
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          type: string
          nullable: true
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          example: Engine / Turbo charged
          description: |
            This is a combination of name and sub_category separated by a / and spaces. In case if no sub_category is present it is same as name of the category.
    project_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          nullable: true
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          example: Fast and Furious / Formula One
          description: |
            This is a combination of name and sub_project separated by a / and spaces.
            In case if no sub_project is present it is same as name of the project.
    account_out_embed:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: acwbl222wlg
        type:
          type: string
          enum:
            - PERSONAL_CASH_ACCOUNT
            - PERSONAL_CORPORATE_CREDIT_CARD_ACCOUNT
            - PERSONAL_ADVANCE_ACCOUNT
            - COMPANY_EXPENSE_ACCOUNT
            - COMPANY_CORPORATE_CREDIT_CARD_ACCOUNT
            - COMPANY_CATEGORY_ACCOUNT
          example: PERSONAL_CASH_ACCOUNT
    mileage_rate_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        vehicle_type:
          type: string
          example: Audi
        code:
          $ref: '#/components/schemas/code'
    per_diem_rate_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Florida Rate
        code:
          $ref: '#/components/schemas/code'
    location:
      type: object
      nullable: true
      properties:
        city:
          type: string
          nullable: true
          example: London
        state:
          type: string
          nullable: true
          example: London
        display_name:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
          example: United Kingdom
        formatted_address:
          type: string
          nullable: true
          example: 221 Baker St, Marylebone, London, United Kingdom
        latitude:
          type: number
          nullable: true
          example: 12.971599
        longitude:
          type: number
          nullable: true
          example: 77.594566
    custom_field:
      type: object
      description: |
        Custom field
      properties:
        name:
          type: string
          example: cf1
        value:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - v1
                - v2
    custom_fields:
      type: array
      description: |
        Custom fields
      items:
        $ref: '#/components/schemas/custom_field'
    flattened_custom_field:
      type: object
      description: |
        Custom fields in object format with keys as the name of the custom field and value as the value of the custom field. This is done to make it easier to query the custom fields.

        Example: `[{"name": "Custom Field 1", "value": "Value 1"}]` is flattened to `{"custom_field_1": "Value 1"}`

        NOTE: Key name is converted to snake case and spaces are replaced with underscores.
      nullable: false
      additionalProperties: true
      properties:
        cf1:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - string1
                - string2
      example:
        cf1: string1
        custom_field_2: Value 2
    null_field:
      type: string
      nullable: true
    report_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      required:
        - id
        - last_approved_at
        - last_submitted_at
        - seq_num
        - title
        - state
        - settlement_id
        - last_paid_at
        - reimbursement_id
        - reimbursement_seq_num
      properties:
        id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          example: rpvgnwlgw34
        last_approved_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was approved.
        last_submitted_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was submitted.
        seq_num:
          type: string
          nullable: true
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        title:
          type: string
          nullable: true
          description: purpose for creating the report
          example: Business trip to London
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
            - null
          nullable: true
        amount:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/amount'
          nullable: true
        settlement_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          maxLength: 255
          description: |
            An unique ID, generated by Fyle, for identifying the Settlement.
        last_paid_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was reimbursed.
        last_verified_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was verified.
        settlement_locked_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was locked for settlement.
        reimbursement_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          maxLength: 255
          description: |
            An unique ID, generated by Fyle, for identifying the Reimbursement.
          example: reimntGt9ju6qP
        reimbursement_seq_num:
          type: string
          nullable: true
          description: |
            A unique, organization wide identifier for a particular reimbursement.<br>
            This id is always prefixed with `P/`.
          example: P/2020/11/29
        approvals:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
    file_out_embed:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: figwiwpjww
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - INTEGRATION
            - RECEIPT
          description: |
            Indicates whether this file original size or encrypted or its thumbnail image.
          example: RECEIPT
        content_type:
          type: string
          example: application/pdf
    org_name:
      type: string
      maxLength: 255
      description: |
        This represents the name of the organization. This should be unique for all organizations
      example: foo123
    level_out_embed:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          nullable: true
          description: |
            Band in which this level belongs to, you can group multiple levels into a single band.
          example: Associate
      required:
        - id
        - name
        - band
    is_enabled:
      type: boolean
      description: |
        This indicates if the resource is enabled for use within the organisation.
      default: true
      example: true
    employee_out_embed_for_expense:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        department_id:
          nullable: true
          $ref: '#/components/schemas/department_id'
        department:
          nullable: true
          $ref: '#/components/schemas/department_out_embed'
        level:
          $ref: '#/components/schemas/level_out_embed'
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        flattened_custom_field:
          $ref: '#/components/schemas/flattened_custom_field'
        has_accepted_invite:
          type: boolean
          description: |
            This boolean field represents whether the employee has accepted the current org's invite by veryfying his/her email or not.
          default: true
          example: true
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
      description: |
        NOTE: The data of this field is not realtime. It will get updated later even if `matched_corporate_card_transaction_ids` is already up-to-date.
    card_number:
      type: string
      description: |
        Specifies the masked number of the card.
        Add only masked card-numbers, last four digits of the card.
      example: xxxx-4543
    bank_name:
      type: string
      description: |
        Specifies the name of bank who issued the card.
      example: Bank of America
    name_nullable:
      type: string
      maxLength: 255
      nullable: true
      description: |
        This represents the name of the resource. This should be unique in an organization
      example: foo123
    timestamptz_pst:
      type: string
      format: date-time
      nullable: true
      description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T01:18:19.292-08:00'
    spent_at:
      allOf:
        - $ref: '#/components/schemas/timestamptz_pst'
      description: |
        It signifies when this expense was made.
        This date cannot be in future.
        This field is not required for creating Per Diem Expenses
    merchant:
      type: string
      maxLength: 255
      nullable: true
      description: |
        String denoting the name of the vendor to which the expense was made.
      example: Uber
    matched_corporate_card_transaction_out_embed:
      type: object
      nullable: true
      required:
        - id
        - corporate_card_id
        - corporate_card_number
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card_number:
          $ref: '#/components/schemas/card_number'
        masked_corporate_card_number:
          $ref: '#/components/schemas/card_number'
        bank_name:
          nullable: true
          $ref: '#/components/schemas/bank_name'
        cardholder_name:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/name_nullable'
          description: |
            String denoting the card holder's name
          example: John Doe
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/spent_at'
          description: |
            Signifies spent date of a card transaction.
            This date cannot be in future.
        posted_at:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies post date of a card transaction.
            This date cannot be in future.
        status:
          type: string
          nullable: true
          enum:
            - PENDING
            - POSTED
            - null
          example: PENDING
          description: |
            Signifies status of a card transaction.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        foreign_currency:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/foreign_amount'
        merchant:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/merchant'
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        matched_by:
          type: string
          nullable: true
          description: |
            String denoting the email of the user who matched the card transaction to an expense.
          example: john.ooe@fyle.in
    missing_mandatory_fields:
      type: object
      nullable: false
      properties:
        expense_field_ids:
          type: array
          nullable: false
          items:
            type: integer
            nullable: true
            description: |
              This id provided by Fyle to identify an expense field.
            example: 123
          example:
            - 123
            - 12423
          description: |
            List of IDs of expense fields which are mandatory but are missing.
        amount:
          type: boolean
          nullable: false
          description: |
            This field shows whether the amount field is present in the expense or not
        currency:
          type: boolean
          nullable: false
          description: |
            This field shows whether the currency field is present in the expense or not
      description: |
        This object contains all the fields which are mandatory bu tare missing in the expense.
    activity_details:
      type: object
      nullable: true
      properties:
        unique_meetings:
          type: number
          nullable: false
          example: 21
        total_meetings:
          type: number
          nullable: false
          example: 70
    extracted_data:
      type: object
      nullable: true
      properties:
        amount:
          type: number
          nullable: true
          example: 21
        vendor_name:
          type: string
          nullable: true
          example: Uber
        currency:
          type: string
          nullable: true
          example: USD
        category:
          type: string
          nullable: true
          example: Taxi
        date:
          type: string
          nullable: true
          example: '2020-07-20'
    split_group_amount:
      type: number
      nullable: true
      description: |
        The amount of expense before splitting.
      example: 3768
    is_billable:
      type: boolean
      nullable: true
      example: true
      description: This field marks whether a given expense is billable or not.
    expense_rule_data_in:
      type: object
      nullable: true
      additionalProperties: false
      minProperties: 1
      properties:
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Amazon
        is_billable:
          $ref: '#/components/schemas/is_billable'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 49058
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 92895
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 1049
        custom_fields:
          type: array
          nullable: true
          description: |
            Custom fields
          items:
            $ref: '#/components/schemas/custom_field'
    tax_group:
      type: object
      nullable: true
      description: |
        Tax group details.
      properties:
        name:
          type: string
          nullable: true
          description: |
            Name of the tax group.
          example: GST
        percentage:
          type: number
          nullable: true
          description: |
            Tax percentage.
          example: 5
    policy_checks:
      type: object
      description: |
        Policy checks details
      properties:
        is_amount_limit_applied:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense amount is capped based on the policy calculation.
          example: true
        are_approvers_added:
          type: boolean
          description: |
            A true value here means, approvers are added to the expense based on the policy calculation.
          example: true
        is_flagged_ever:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense is flagged.
          example: true
        violations:
          type: array
          nullable: true
          description: |
            List of policy violations on this expense.
          items:
            type: object
            properties:
              policy_rule_description:
                type: string
                description: |
                  Description of the policy rule.
                example: Expense amount is greater than the policy limit
              policy_rule_id:
                allOf:
                  - $ref: '#/components/schemas/id_string'
                description: |
                  ID of the policy rule.
                example: tprCCiQiiuJZs
    expense_out:
      type: object
      additionalProperties: false
      required:
        - id
        - user_id
        - user
        - org_id
        - created_at
        - updated_at
        - spent_at
        - source
        - merchant
        - currency
        - amount
        - claim_amount
        - policy_amount
        - admin_amount
        - foreign_currency
        - foreign_amount
        - purpose
        - cost_center_id
        - cost_center
        - category_id
        - category
        - project_id
        - project
        - source_account_id
        - source_account
        - tax_amount
        - tax_group_id
        - is_billable
        - is_reimbursable
        - distance
        - distance_unit
        - mileage_calculated_distance
        - mileage_calculated_amount
        - mileage_rate_id
        - mileage_rate
        - mileage_is_round_trip
        - per_diem_rate_id
        - per_diem_rate
        - per_diem_num_days
        - started_at
        - ended_at
        - travel_classes
        - hotel_is_breakfast_provided
        - locations
        - custom_fields
        - code
        - state
        - state_display_name
        - seq_num
        - report_id
        - added_to_report_at
        - report
        - is_verified
        - last_verified_at
        - is_receipt_mandatory
        - is_exported
        - last_exported_at
        - file_ids
        - files
        - employee
        - is_corporate_card_transaction_auto_matched
        - matched_corporate_card_transaction_ids
        - matched_corporate_card_transactions
        - last_settled_at
        - missing_mandatory_fields
        - activity_details
        - creator_user_id
        - extracted_data
        - is_manually_flagged
        - is_policy_flagged
        - split_group_id
        - is_physical_bill_submitted
        - physical_bill_submitted_at
        - per_diem_num_days
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: txwownwrng
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was made.
            This date cannot be in future.
        source:
          type: string
          description: |
            The name of the client app which is creating the expense.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: SLACK_APP
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Uber
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          type: number
          nullable: true
          description: |
            The amount for which the expense was/will-be fyled.
            The amount will be in the currency that the organization's home currency.<br>

            Note that, this field is calculated from admin_amount, policy_amount, claim_amount.

            if admin_amount is present then this value will be same admin_amount.
            if policy_amount is present then this value will be same policy_amount.
            else this should be same as claim_amount.
          example: 1500
        claim_amount:
          type: number
          nullable: true
          description: |
            The expense amount as claimed by user.
          example: 1984.18
        policy_amount:
          type: number
          nullable: true
          description: |
            The expense amount set by policy.
          example: 1500
        admin_amount:
          type: number
          nullable: true
          description: |
            The expense amount which is modified by admin or approver.
            This could be null if admin or approver has not edited your expense.
          example: null
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        cost_center:
          $ref: '#/components/schemas/cost_center_out_embed'
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        category:
          $ref: '#/components/schemas/category_out_embed'
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        project:
          $ref: '#/components/schemas/project_out_embed'
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        source_account:
          $ref: '#/components/schemas/account_out_embed'
        tax_amount:
          type: number
          nullable: true
          description: Tax amount as setup by your organisation.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        is_billable:
          type: boolean
          nullable: true
          example: true
          description: This fields marks whether a given expense is billable a not.
        is_reimbursable:
          type: boolean
          description: This fields marks whether a given expense is reimbursable a not.
          example: true
        distance:
          type: number
          nullable: true
          description: Actual distance travelled by employee in travel related expenses.
        distance_unit:
          type: string
          nullable: true
          description: Unit of distance travelled.
          enum:
            - KM
            - MILES
            - null
          example: MILES
        mileage_calculated_distance:
          type: number
          nullable: true
          description: Distance computed by Fyle in mileage expenses.
        mileage_calculated_amount:
          type: number
          nullable: true
          description: Amount computed by Fyle in mileage expenses.
        mileage_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 9080
        mileage_rate:
          $ref: '#/components/schemas/mileage_rate_out_embed'
        mileage_is_round_trip:
          type: boolean
          nullable: true
          description: Flag stating whether this was a round trip or not.
        per_diem_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 583
        per_diem_rate:
          $ref: '#/components/schemas/per_diem_rate_out_embed'
        per_diem_num_days:
          type: integer
          nullable: true
          description: |
            Specific to per diem related expenses, number of days for which per diem claim is made.
          example: 2
        started_at:
          $ref: '#/components/schemas/timestamptz_utc'
        ended_at:
          $ref: '#/components/schemas/timestamptz_utc'
        travel_classes:
          description: |
            This field is applicable only for `Flight`, `Train`, `Bus`, `Taxi` category.
            index 0 holds onward journey class, index 1 holds return journey travel class.
          type: array
          minItems: 0
          maxItems: 2
          items:
            type: string
          example:
            - ECONOMY
            - BUSINESS
        hotel_is_breakfast_provided:
          type: boolean
          nullable: true
          description: |
            This field is applicable for only `Hotel` category.
        locations:
          description: |
            This field will be present for travel related categories.
            For travel between Place A to Place B, this array will contain two items, From location at array index 0 and To location at array index 1.
            For travel between Place A to Place c and stopping at Place B, this
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: '#/components/schemas/location'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        custom_fields_flattened:
          $ref: '#/components/schemas/flattened_custom_field'
        code:
          type: string
          nullable: true
          description: |
            Id given by external systems like Gmail. To identify whether that entity
            has been already added to Fyle or not.
          example: wgjwgo3ihwljnlsww
        state:
          type: string
          enum:
            - COMPLETE
            - DRAFT
            - PAID
            - PAYMENT_PROCESSING
            - APPROVER_PENDING
            - PAYMENT_PENDING
            - APPROVED
          description: The state of the Expense.
        state_display_name:
          type: string
          example: Sent Back
          description: readable state name
        seq_num:
          type: string
          readOnly: true
          description: |
            This is user visible identifier for an expense.
            This field can be used as reference in UI.
          example: E/2020/10/T/95
        report_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          description: |
            Unique id given by Fyle to identify an Expense Report.
          example: rpvgnwlgw34
        added_to_report_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was added to a report.
            If this expense is not added to a report, then this could be null.
        report:
          $ref: '#/components/schemas/report_out_embed'
        is_verified:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been verified by a verifier.
        last_verified_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was verified.
        is_receipt_mandatory:
          type: boolean
          nullable: true
          description: |
            Determines whether a receipt is missing for this expense when it is required.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been exported to external accounting system or not.
        last_exported_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: signifies when this expense was exported to an external accounting system.
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - figwiwpjww
        files:
          type: array
          items:
            $ref: '#/components/schemas/file_out_embed'
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          nullable: true
          $ref: '#/components/schemas/employee_out_embed_for_expense'
        is_corporate_card_transaction_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this corporate card transaction is auto_matched.
        matched_corporate_card_transaction_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the corporate card transaction ids which are matched to this expense
          example:
            - btxnwownwrng
        matched_corporate_card_transactions:
          type: array
          items:
            $ref: '#/components/schemas/matched_corporate_card_transaction_out_embed'
          description: |
            Holds the corporate card transactions which are matched to this expense.
            NOTE: The data of this field is not realtime. It will get updated later even if `matched_corporate_card_transaction_ids` is already up-to-date.
        last_settled_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last settled.
        missing_mandatory_fields:
          $ref: '#/components/schemas/missing_mandatory_fields'
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        activity_details:
          $ref: '#/components/schemas/activity_details'
        extracted_data:
          $ref: '#/components/schemas/extracted_data'
        is_manually_flagged:
          type: boolean
          nullable: true
          description: This fields marks whether a given expense is manually flagged or not.
          example: true
        is_policy_flagged:
          type: boolean
          nullable: true
          description: This fields marks whether a given expense is flagged by policy or not.
          example: true
        split_group_id:
          type: string
          nullable: true
          maxLength: 15
          description: |
            This id provided by Fyle to identify an object.
          example: txwownwrngx
        split_group_amount:
          $ref: '#/components/schemas/split_group_amount'
        is_physical_bill_submitted:
          type: boolean
          nullable: true
          description: |
            This fields marks if physical has been collected for the given expense.
          example: true
        physical_bill_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when the physical bill for this report was submitted.
          nullable: true
        expense_rule_id:
          type: string
          nullable: true
          maxLength: 15
          description: |
            This id is provided by Fyle to identify an Expense Rule.
          example: ervgnwlgw34
        expense_rule_data:
          $ref: '#/components/schemas/expense_rule_data_in'
        is_weekend_spend:
          type: boolean
          nullable: true
          description: |
            Whether the expense was spent on a weekend.
          example: true
        is_split:
          type: boolean
          nullable: true
          description: |
            Whether the expense is split.
          example: true
        tax_group:
          $ref: '#/components/schemas/tax_group'
        approver_comments:
          type: array
          description: |
            Comments added by approvers.
          items:
            type: string
          example:
            - This is a comment by approver
        verifier_comments:
          type: array
          description: |
            Comments added by verifiers.
          items:
            type: string
          example:
            - This is a comment by verifier
        policy_checks:
          $ref: '#/components/schemas/policy_checks'
        accounting_export_summary:
          type: object
          description: |
            Summary of accounting export for this expense.
          properties:
            state:
              type: string
              enum:
                - COMPLETE
                - ERROR
                - IN_PROGRESS
                - SKIPPED
                - INITIATED
              example: COMPLETE
            error_type:
              type: string
              nullable: true
              enum:
                - ACCOUNTING_INTEGRATION_ERROR
                - MAPPING
                - null
              example: ACCOUNTING_INTEGRATION_ERROR
            url:
              type: string
              description: URL Endpoint for exported / failed expense
              example: https://app.example.com/expense/txwownwrng
            tpa_id:
              type: string
              nullable: false
              description: |
                Third party app id.
              example: tpa_1234567890
        report_settlement_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          maxLength: 255
          description: |
            An unique ID, generated by Fyle, for identifying the Settlement.
    report_action_with_expenses_ids_to_eject:
      type: object
      additionalProperties: false
      required:
        - id
        - expense_ids
      properties:
        id:
          type: string
          description: |
            id of report, from which the expenses are to be ejected
          example: rpa21A2rdj2
        expense_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - txelntgwgwll
    webhook_url:
      type: string
      description: |
        URL Endpoint for webhook
      example: https://api.custom.com/webhook1
    approver_subscriptions_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        webhook_url:
          $ref: '#/components/schemas/webhook_url'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        created_at:
          $ref: '#/components/schemas/created_at'
        approver_user_id:
          $ref: '#/components/schemas/fk_string'
    subscriptions_in:
      type: object
      additionalProperties: false
      required:
        - is_enabled
        - webhook_url
      properties:
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        webhook_url:
          $ref: '#/components/schemas/webhook_url'
    report_out_subscriptions:
      type: object
      additionalProperties: false
      required:
        - resource
        - action
        - data
        - reason
      properties:
        resource:
          type: string
          example: REPORT
        action:
          type: string
          enum:
            - PARTIALLY_APPROVED
            - SUBMITTED
            - APPROVER_ADDED
            - APPROVER_SENDBACK
            - APPROVED
            - APPROVER_REMOVED
            - PAYMENT_PENDING
            - PAYMENT_PROCESSING
            - PAID
            - COMMENTED
            - EXPENSES_ADDED
          example: APPROVED
        data:
          allOf:
            - $ref: '#/components/schemas/report_out'
            - type: object
              additionalProperties: false
              properties:
                updated_by_user:
                  $ref: '#/components/schemas/user_out_embed'
        reason:
          type: string
          example: comment given by Approver while approving the report.
    description:
      type: string
      nullable: true
      maxLength: 255
      description: |
        This represents the description of the resource.
      example: Win the trophy
    restricted_spender_user_ids:
      type: array
      nullable: true
      items:
        type: string
        nullable: true
        maxLength: 15
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
        - uswlgwkgw42
      description: |
        List of IDs of users who can access this object.
    approver_user_ids:
      type: array
      nullable: false
      maxItems: 2
      items:
        type: string
        nullable: true
        maxLength: 15
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
        - uswlgwkgw42
      description: |
        List of IDs of users who are approvers of the project.
    admin_approver_project_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          nullable: true
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          maxLength: 513
          description: |
            This is a combination of name and sub_project separated by a / and spaces.
            In case if no sub_project is present it is same as name of the project.
          example: Fast and Furious / Formula One
        description:
          $ref: '#/components/schemas/description'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        restricted_spender_user_ids:
          $ref: '#/components/schemas/restricted_spender_user_ids'
        approver_user_ids:
          $ref: '#/components/schemas/approver_user_ids'
        approver_users:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/user_out_embed'
          description: |
            List of users who are approvers for this project.
        category_ids:
          type: array
          nullable: true
          items:
            type: integer
            example: 16570
          description: List of categories that are applicable for the project.
    admin_approver_category_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          nullable: true
          type: string
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        display_name:
          type: string
          maxLength: 255
          example: Engine / Turbo charged
          description: |
            This is a combination of name and sub_category separated by a / and spaces. In case if no sub_category is present it is same as name of the category.
        system_category:
          nullable: true
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
        code:
          $ref: '#/components/schemas/code'
        restricted_project_ids:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids for which this category can be used. If project_ids is null, then this category can be used for any project.
        restricted_spender_user_ids:
          $ref: '#/components/schemas/restricted_spender_user_ids'
    expense_policy_rule_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: tpr1234abcd
          description: This represents the id of the expense policy rule that is violated for this expense.
        description:
          anyOf:
            - $ref: '#/components/schemas/description'
          description: |
            This represents the description of the expense policy rule that is violated for this expense.
          example: Receipt is mandatory for expense above $50
        action_show_warning:
          type: boolean
          description: |
            A true value here means that policy calculation suggests showing a warning when the user attempts to create an expense that violates this expense policy rule.
          example: true
    expense_policy_expenses_query_object_params:
      type: object
      properties:
        category_id:
          type: string
          description: |
            Category ids query param to find the list of expenses.
          example: in.(60506)
        project_id:
          type: string
          description: |
            Project ids query param to find the list of expenses.
          example: in.(261155)
        cost_center_id:
          type: string
          description: |
            Cost center ids query param to find the list of expenses.
          example: in.(7475)
        currency:
          type: string
          description: |
            Currency query param to find the list of expenses.
          example: eq.USD
        mileage_rate_id:
          type: string
          description: |
            Mileage rate query param to find the list of expenses.
          example: eq.2
        employee_id:
          type: string
          description: |
            Employee id query param to find the list of expenses.
          example: eq.ouNSnadfaLA
    expense_policy_expenses_query_object:
      type: object
      description: |
        An expense may be violating an expense policy rule due to a group of other expenses.
        These query params can be used to fetch those expenses because of which this expense is causing a violation. <br>
        Below params should be ANDed to get the correct list of violating expenses.
      properties:
        limit_start_date:
          type: string
          description: |
            Spend start date query param to find the list of violating expenses.
          example: '2021-12-01'
        limit_end_date:
          type: string
          description: |
            Spend end date query param to find the list of violating expenses.
          example: '2022-03-31'
        params:
          $ref: '#/components/schemas/expense_policy_expenses_query_object_params'
    expense_policy_individual_desired_states:
      type: object
      properties:
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        run_status:
          nullable: false
          type: string
          enum:
            - VIOLATED_ACTION_SUCCESS
            - VIOLATED_ACTION_FAILURE
            - UNVIOLATED
          description: |
            This represent the status of policy computation for an expense against the policy. If the state is
            `UNVIOLATED`, it means that the expense is not violating the policy. If the state is `VIOLATION_ACTION_SUCCESS`,
            it means that expense is violating the policy and action stated in the object will be applied to
            expense. However, if the state is `VIOLATION_ACTION_FAILURE`, it means that the policy is violated for the
            expense but since some approver was missing or not setup properly, it will fail to take action
            on the expense
          example: SUCCESS
        run_result:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense. Note that, in
            case some approver was not setup properly for the given violation, this array will contain description of
            missing approvers. For example, Department head, Project head, etc.
          example:
            - flag the expense
            - cap the amount
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        expense_policy_rule_id:
          type: string
          description: |
            This represents the id of the expense policy rule.
          example: tprabsdfSYqd
        rule:
          $ref: '#/components/schemas/expense_policy_rule_embed'
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        expenses_query_object_params:
          nullable: true
          $ref: '#/components/schemas/expense_policy_expenses_query_object'
    expense_policy_final_desired_state:
      type: object
      properties:
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        flag:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense should be flagged.
          example: true
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        is_receipt_mandatory:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense requires receipt.
          example: true
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        remove_employee_approver1:
          type: boolean
          description: |
            A true value here means, that as per policy calculation, the employee's first approver should be removed from the report that contains this expense.
          example: true
        run_status:
          nullable: false
          type: string
          enum:
            - SUCCESS
            - FAILURE
          description: |
            This represent the run status of the policy.
          example: SUCCESS
        run_summary:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense.
          example:
            - flag the expense
            - cap the amount
    expense_policy_states_out:
      type: object
      additionalProperties: false
      properties:
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        individual_desired_states:
          type: array
          items:
            $ref: '#/components/schemas/expense_policy_individual_desired_states'
        final_desired_state:
          $ref: '#/components/schemas/expense_policy_final_desired_state'
    source:
      type: string
      enum:
        - WEBAPP
        - SLACK
        - TPA
        - CORPORATE_CARD
      description: |
        Enum value signifying the client from which this expense was created
      example: SLACK
    claim_amount:
      type: number
      description: |
        The expense amount as claimed by user.
      example: 1984.18
    is_reimbursable:
      type: boolean
      nullable: true
      description: This field marks whether a given expense is reimbursable or not.
      example: true
    distance:
      type: number
      nullable: true
      description: Actual distance travelled by employee in travel related expenses.
    distance_unit:
      type: string
      nullable: true
      description: Unit of distance travelled.
      enum:
        - KM
        - MILES
      example: MILES
    travel_classes:
      description: |
        This field is applicable only for `Flight`, `Train`, `Bus` category.
        Index 0 holds onward journey travel class, index 1 holds return journey travel class.
      type: array
      minItems: 0
      maxItems: 2
      nullable: true
      items:
        type: string
      example:
        - ECONOMY
        - BUSINESS
    locations:
      description: |
        This field will be present for travel related categories.
        For travel between Place A to Place B, this array will contain two items. From location at array index i and To location at array index i+1.
      type: array
      nullable: true
      minItems: 0
      maxItems: 10
      items:
        $ref: '#/components/schemas/location'
    spender_expense_check_mandatory_fields_in:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This represents the id of the expense.<br><br>
            _Note: This field is required when you are updating an already created expense and want to check it again for missing mandatory fields._
          example: tx0agOdICdbV
        spent_at:
          allOf:
            - $ref: '#/components/schemas/spent_at'
          description: |
            It signifies when this expense was made. This date cannot be in future.<br><br>
            _Note: This field is mandatory when you are creating an expense and want to check it again for missing mandatory fields._
        source:
          $ref: '#/components/schemas/source'
        merchant:
          $ref: '#/components/schemas/merchant'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        claim_amount:
          allOf:
            - $ref: '#/components/schemas/claim_amount'
          description: |
            The expense amount as claimed by user.<br><br>
            _Note: This field is mandatory when you are creating an expense and want to check it again for missing mandatory fields._
          example: 1984.18
        purpose:
          type: string
          example: Team lunch
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        tax_amount:
          type: number
          nullable: true
          description: Tax amount as setup by your organization.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        is_billable:
          $ref: '#/components/schemas/is_billable'
        is_reimbursable:
          $ref: '#/components/schemas/is_reimbursable'
        distance:
          $ref: '#/components/schemas/distance'
        distance_unit:
          $ref: '#/components/schemas/distance_unit'
        started_at:
          $ref: '#/components/schemas/timestamptz_pst'
        ended_at:
          $ref: '#/components/schemas/timestamptz_pst'
        travel_classes:
          $ref: '#/components/schemas/travel_classes'
        locations:
          $ref: '#/components/schemas/locations'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        num_files:
          type: integer
          description: |
            Number of files/reciepts attached to expense
          example: 4
    expense_check_mandatory_fields_in:
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        spent_at:
          $ref: '#/components/schemas/spent_at'
        claim_amount:
          $ref: '#/components/schemas/claim_amount'
      allOf:
        - $ref: '#/components/schemas/spender_expense_check_mandatory_fields_in'
    expense_check_mandatory_fields_out:
      type: object
      additionalProperties: false
      required:
        - missing_amount
        - missing_currency
        - missing_receipt
        - missing_expense_field_ids
      properties:
        missing_amount:
          type: boolean
          description: |
            If this is set to true, then you need to send currency field with expense object.
          example: false
        missing_currency:
          type: boolean
          description: |
            If this is set to true, then you need to send currency field with expense object.
          example: false
        missing_receipt:
          type: boolean
          description: |
            If this is set to true, then you need to attach receipt to the expense.
          example: false
        missing_expense_field_ids:
          type: array
          nullable: false
          items:
            type: integer
            nullable: true
            description: |
              This id provided by Fyle to identify an expense field.
            example: 123
          example:
            - 123
            - 12423
          description: |
            List of IDs of expense fields which are mandatory but are missing.
  parameters:
    limit:
      in: query
      name: limit
      description: |
        A limit on the number of objects to be returned. Allowed values are from 1 to 200.
      schema:
        type: integer
        example: 20
        default: 50
        maximum: 200
    offset:
      in: query
      name: offset
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
tags:
  - name: Categories
    description: |
      These APIs gives you access to manage your organisation's Categories
  - name: Projects
    description: |
      These APIs gives you access to manage your organisation's Projects
  - name: Reports
    description: |
      This API gives you access to your organisation's Expense Reports
  - name: Subscriptions
    description: |
      This API allows you to subscribe to different events.
paths:
  /approver/reports:
    get:
      tags:
        - Reports
      summary: List reports
      operationId: reports_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Reports
      summary: Update Purpose
      operationId: update_purpose
      description: |
        This API is used to update the the purpose of an report by Approver. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/approver_report_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /approver/reports/partially_approve:
    post:
      tags:
        - Reports
      summary: Approve reports
      description: Approve a report
      operationId: reports_approve_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_action_in'
                reason:
                  $ref: '#/components/schemas/reason'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /approver/expenses:
    get:
      tags:
        - Expenses
      summary: List expenses
      description: |
        This API gets expenses assigned to you to approve.

        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: expenses_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /approver/reports/eject_expenses:
    post:
      tags:
        - Reports
      summary: Eject expenses from a report
      description: Eject expenses from a report
      operationId: report_eject_expenses_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_action_with_expenses_ids_to_eject'
                reason:
                  $ref: '#/components/schemas/reason'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /approver/subscriptions:
    post:
      tags:
        - Subscriptions
      summary: Create a subscription
      description: subscribe to different events using this API
      operationId: subscriptions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/subscriptions_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/approver_subscriptions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
      callbacks:
        REPORT.*:
          '{$request.body#/data/webhook_url}':
            post:
              operationId: report_subscriptions_callback
              summary: Object that will be sent to the callback url
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/report_out_subscriptions'
              responses:
                '200':
                  description: OK
    get:
      tags:
        - Subscriptions
      summary: List Approver Subscriptions
      operationId: subscriptions_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/approver_subscriptions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /approver/projects:
    get:
      tags:
        - Projects
      summary: List projects
      operationId: projects_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_approver_project_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /approver/categories:
    get:
      tags:
        - Categories
      summary: List categories
      operationId: categories_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_approver_category_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /approver/expense_policy_states:
    get:
      tags:
        - Expense Policies
      summary: Get policy states of Expenses
      description: |
        Get policy states of Expenses
      operationId: expense_policy_states_get
      parameters:
        - in: query
          name: expense_id
          description: |
            The id of the expense for which you are querying the policy states.<br>
            Supported operators are `eq`, `in`, `neq`, `not_in`.<br>
            expense_id=eq."id" <br>
            expense_id=in.("id1","id2","id3") <br>
            expense_id=neq."id" <br>
            expense_id=not_in.("id1","id2","id3")
          schema:
            type: string
            example: eq."txSdfsytrqw"
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_policy_states_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Object Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /approver/expenses/check_mandatory_fields:
    post:
      tags:
        - Expenses
      summary: Check expense for missing mandatory fields
      description: |
        Before updating employee's expense object
        into Fyle, based on the business requirements, you might want to check if you have added all the mandatory fields set up by your organization.
        You can easily do that by passing the same expense object with some extra optional fields documented below.
      operationId: check_mandatory_fields_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_check_mandatory_fields_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/expense_check_mandatory_fields_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'

openapi: 3.0.3
info:
  version: '1.0'
  title: Admin APIs
  description: |
    These APIs are generally used to integrate Fyle with accounting or HRMS systems. 
  contact:
    name: Platform Beta
    email: support@fylehq.com
servers:
  - url: https://us1.fylehq.com/platform/v1
    description: US Region Server
  - url: https://in1.fylehq.com/platform/v1
    description: India Region Server
tags:
  - name: Accounting Exports
    description: |
      This API allows you to record export of Fyle resources to an external accounting exports
  - name: Accounts
    description: |
      This APIs gives access to your Employees's accounts data.
  - name: Advances
    description: |
      This API gives you access to manage your organisation's Advances data.
  - name: Automations
    description: |
      This API gives you access to automate your organisation's manual work.
  - name: Budgets
    description: |
      This API gives you access to Budgets.
  - name: Categories
    description: |
      These APIs gives you access to manage your organisation's Categories
  - name: Corporate Cards
    description: |
      This API gives you access to manage your organisation's Corporate Cards data.
  - name: Corporate Card Transactions
    description: |
      This API gives you access to manage your organisation's Corporate Card Transaction data.
  - name: Cost Centers
    description: |
      These APIs gives you access to manage your organisation's Cost Centers data.
  - name: Departments
    description: |
      These APIs gives you access to manage your organisation's Departments
  - name: Employees
    description: |
      These APIs gives you access to manage your organisation's Employees
  - name: Expenses
    description: |
      This API gives you access to your organisation's Expenses
  - name: Expense Policies
    description: |
      This API gives you access to your organisation's Expense Policies
  - name: Expense Rules
    description: |
      This API gives you access to your organisation's Expense Rules
  - name: Files
    description: |
      This API gives you access to creates a file in Fyle
  - name: Levels
    description: |
      These APIs gives you access to manage your organisation's Employee levels.
  - name: Mileage Rates
    description: |
      These APIs gives you access to manage your organisation's Mileage Rates
  - name: Per Diem Rates
    description: |
      These APIs gives you access to manage your organisation's Per Diem Rates
  - name: Projects
    description: |
      These APIs gives you access to manage your organisation's Projects
  - name: Reimbursements
    description: |
      These APIs gives you access to manage your organisation's Reimbursements
      data
  - name: Reminders
    description: |
      These APIs gives you access to manage your organisation's Reminders data
  - name: Reports
    description: |
      These APIs gives you access to manage your organisation's Reports data
  - name: Schedules
    description: |
      This API gives you access to manage Scheduled jobs.
  - name: Settlements
    description: |
      This API gives you access to manage your organisation's Settlements data.
  - name: Tax Groups
    description: |
      These APIs gives you access to manage your organisation's Tax Groups data.
  - name: Organisations
    description: |
      These APIs gives you access to manage organisations.
  - name: Statements
    description: |
      These APIs gives you access to add / view a bank statement for reconciliation.
  - name: Statement mappings
    description: |
      These APIs gives you access to manage statement mappings which is used for statement uploads.
  - name: Feature Configs
    description: |
      These APIs gives you access to manage feature configs.
  - name: Merchants
    description: |
      This API gives you access to merchants, primarily to help with autocomplete.
  - name: Expense Policy Comments
    description: |
      This API gives you access to manage expense policy comments.
paths:
  /admin/projects:
    get:
      tags:
        - Projects
      summary: List projects
      operationId: projects_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_approver_project_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: projects_post
      tags:
        - Projects
      summary: Create or update a project
      description: |
        Create or update a project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/project_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_approver_project_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/projects/bulk:
    post:
      operationId: projects_bulk_post
      tags:
        - Projects
      summary: Create or update projects in bulk
      description: |
        Create or update projects in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/project_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/projects/delete/bulk:
    post:
      tags:
        - Projects
      summary: Deletes projects
      description: |
        Deletes unused projects. If any of the project in input is used in other resources then validation error is raised.
      operationId: projects_delete_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/project_in_only_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: |
                      Can not delete project(s) used in other resources like expense, expense policy, expense rules, budgets, dependent fields.
                  data:
                    type: object
                    example: null
                  error:
                    type: string
                    example: InvalidUsage
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/projects/delete_summary/bulk:
    post:
      tags:
        - Projects
      summary: Create delete summary for projects
      description: |
        Delete summary tells that how many projects could be deleted from given projects, it also
        returns projects that could be deleted.
      operationId: projects_delete_summary_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/project_in_only_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project_delete_summary_out'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/cost_centers:
    get:
      operationId: cost_centers_list
      tags:
        - Cost Centers
      summary: List cost centers
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_cost_center_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    post:
      operationId: cost_centers_post
      tags:
        - Cost Centers
      summary: Create or update a cost center
      description: |
        Create or update a cost center.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/cost_center_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_cost_center_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/cost_centers/bulk:
    post:
      operationId: cost_centers_bulk_post
      tags:
        - Cost Centers
      summary: Create or update cost centers in bulk
      description: |
        Create or update cost centers in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/cost_center_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/categories:
    get:
      tags:
        - Categories
      summary: List categories
      operationId: categories_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_approver_category_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Categories
      summary: Create or update a category
      description: |
        Create or update a category.
      operationId: categories_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/category_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_approver_category_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/categories/bulk:
    post:
      tags:
        - Categories
      summary: Create or update categories in bulk
      description: |
        Create or update categories in bulk.
      operationId: categories_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/category_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: string
                        nullable: true
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/categories/delete/bulk:
    post:
      tags:
        - Categories
      summary: Deletes categories
      description: |
        Deletes unused categories. If any of the category in input is used in other resources or it is a mileage/per diem 
        category then validation error is raised.
      operationId: categories_delete_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/category_in_only_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                    example: |
                      Can not delete per diem and mileage categorie(s) or categorie(s) used in other resources like expense, expense policy, expense rules, budgets.
                  data:
                    type: object
                    example: null
                  error:
                    type: string
                    example: InvalidUsage
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/categories/delete_summary/bulk:
    post:
      tags:
        - Categories
      summary: Create delete summary for categories
      description: |
        Delete summary tells that how many categories could be deleted from given categories, it also
        returns categories that could be deleted.
      operationId: categories_delete_summary_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/category_in_only_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/category_delete_summary_out'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/categories/system_categories:
    get:
      tags:
        - Categories
      summary: List system categories
      operationId: system_categories_list
      description: |
        This APIs gives you the list of system categories. Note that this API does not support any query params like order, limit, offset or name.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/system_category_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expense_fields:
    get:
      tags:
        - Expenses
      summary: List expense fields
      operationId: expense_fields_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_field_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Expenses
      summary: Create or update an expense fields
      operationId: expense_fields_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expense_field_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  data:
                    $ref: '#/components/schemas/expense_field_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/dependent_expense_field_values:
    get:
      tags:
        - Expenses
      summary: List dependent expense field values
      operationId: dependent_expense_field_values_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - in: query
          name: limit
          description: |
            A limit on the number of objects to be returned. Allowed values are from 1 to 200.
          schema:
            type: integer
            example: 10
            default: 100
            maximum: 200
        - in: query
          name: is_enabled
          schema:
            type: string
            default: eq.true
        - in: query
          name: parent_expense_field_id
          required: true
          schema:
            type: string
            example: eq.123
        - in: query
          name: expense_field_id
          required: true
          schema:
            type: string
            example: eq.123
        - in: query
          name: parent_expense_field_value
          required: true
          schema:
            type: string
            example: ilike.abc%
        - in: query
          name: expense_field_value
          schema:
            type: string
            example: ilike.abc%
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/dependent_expense_field_values_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/dependent_expense_field_values/bulk:
    post:
      tags:
        - Expenses
      summary: Create or update dependent expense field values
      operationId: dependent_expense_field_values_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/dependent_expense_field_values_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/dependent_expense_field_values/preview:
    get:
      tags:
        - Expenses
      summary: List dependent expense field values preview
      operationId: dependent_expense_field_values_preview_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - in: query
          name: limit
          description: |
            A limit on the number of objects to be returned. Allowed values are from 1 to 10.
          schema:
            type: integer
            example: 10
            default: 10
            maximum: 10
        - in: query
          name: parent_expense_field_id
          required: true
          schema:
            type: string
            example: eq.123
        - in: query
          name: expense_field_id
          required: true
          schema:
            type: string
            example: eq.123
        - in: query
          name: parent_expense_field_value
          required: true
          schema:
            type: string
            example: ilike.abc%
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/dependent_expense_field_values_preview_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/dependent_expense_field_values/uploads:
    get:
      tags:
        - Expenses
      summary: List dependent expense field values upload requests
      operationId: dependent_expense_field_values_uploads_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/dependent_expense_field_values_upload_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Expenses
      summary: Create an upload excel file request for dependent expense field values
      description: |
        Create a request to upload excel file containing dependent expense field values mappings
      operationId: dependent_expense_field_values_uploads_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/dependent_expense_field_values_upload_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/dependent_expense_field_values_upload_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/dependent_expense_field_values/downloads:
    get:
      tags:
        - Expenses
      summary: List dependent expense field values download requests
      operationId: dependent_expense_field_values_downloads_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/dependent_expense_field_values_download_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Expenses
      summary: Create a request to download an excel file for dependent expense field values
      description: |
        Create a request to download an excel file containing dependent expense field values mappings
      operationId: dependent_expense_field_values_downloads_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/dependent_expense_field_values_download_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/dependent_expense_field_values_download_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employee_fields:
    get:
      tags:
        - Employees
      summary: List employee fields
      operationId: employee_fields_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_field_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Employees
      summary: Create or update an employee fields
      operationId: employee_fields_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/employee_field_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  data:
                    $ref: '#/components/schemas/employee_field_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/per_diem_rates:
    get:
      tags:
        - Per Diem Rates
      summary: List per diem rates
      operationId: per_diem_rates_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/per_diem_rate_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: per_diem_rates_post
      tags:
        - Per Diem Rates
      summary: Create or update a per_diem_rate
      description: |
        Create or update a per_diem_rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/per_diem_rate_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/per_diem_rate_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/per_diem_rates/bulk:
    post:
      operationId: per_diem_rates_bulk_post
      tags:
        - Per Diem Rates
      summary: Create or update a per_diem_rates in bulk.
      description: |
        Create or update a per_diem_rates in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/per_diem_rate_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/departments:
    get:
      tags:
        - Departments
      summary: List departments
      operationId: departments_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/department_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: departments_post
      tags:
        - Departments
      summary: Create or update a department
      description: |
        Create or update a department.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/department_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/department_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/mileage_rates:
    get:
      tags:
        - Mileage Rates
      summary: List mileage rates
      operationId: mileage_rates_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/mileage_rate_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Mileage Rates
      summary: Create or update a mileage rate
      description: |
        Create or update a mileage rate.
      operationId: mileage_rates_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/mileage_rate_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/mileage_rate_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/levels:
    get:
      tags:
        - Levels
      summary: List Levels
      operationId: levels_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/level_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: levels_post
      tags:
        - Levels
      summary: Create or update a level
      description: |
        Create or update a level.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/level_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/level_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employees:
    get:
      tags:
        - Employees
      summary: List employees
      operationId: employees_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/potential_duplicate_expenses:
    get:
      tags:
        - Employees
      summary: List employees and potential duplicate expenses
      operationId: employees_and_potential_duplicate_expenses_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_out_potential_duplicate_expenses'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/business_units:
    get:
      tags:
        - Employees
      summary: List employees business units
      operationId: employees_business_units_list
      description: |
        This API returns the list of business units of employees based on the query parameters.
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      business_units:
                        type: array
                        items:
                          type: string
                        example:
                          - Marketing
                          - Management
                        description: |
                          List of business units of the employees based on the query parameters.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/exports:
    post:
      tags:
        - Employees
      summary: |
        Export employees data in the specified format with customizable columns and notification options
      description: |
        Create Employees Export Request.
      operationId: employees_exports_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/employees_exports_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/employees_exports_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/employees/titles:
    get:
      tags:
        - Employees
      summary: List employees titles
      operationId: employees_titles_list
      description: |
        This API returns the list of titles of employees based on the query parameters.
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      titles:
                        type: array
                        items:
                          type: string
                        example:
                          - Branch Manager
                          - Branch Head
                        description: |
                          List of titles of the employees based on the query parameters.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/locations:
    get:
      tags:
        - Employees
      summary: List employees locations
      operationId: employees_locations_list
      description: |
        This API returns the list of locations of employees based on the query parameters.
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      locations:
                        type: array
                        items:
                          type: string
                        example:
                          - India
                          - Indonesia
                        description: |
                          List of locations of the employees based on the query parameters.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/invite/bulk:
    post:
      tags:
        - Employees
      summary: Create or update employees
      description: |
        Create or update employees
      operationId: invitations_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/invitation_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/employees/reinvite/bulk:
    post:
      tags:
        - Employees
      summary: Reinvite employees
      description: |
        Reinvite employees
      operationId: reinvitations_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/reinvitation_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/employees/filters:
    post:
      tags:
        - Employees
      summary: Create Employees saved filters
      description: |
        Save employees filters for personal use or share with other admins.
      operationId: employees_filters_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/employee_filters_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/employee_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Employees
      summary: List Employees saved filters
      operationId: employees_filters_get
      description: |
        List filters saved by the admin or shared with the admin.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/employees/filters/delete:
    post:
      tags:
        - Employees
      summary: Delete Employees saved filter
      description: |
        Delete Employees saved filter having the provided id.
      operationId: employees_filters_post_action_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/employee_filters_delete_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/employee_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employees/uploads:
    get:
      tags:
        - Employees
      summary: List Employees upload requests
      operationId: employees_upload_list
      description: |
        You can check the status of the Employees upload requests. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employees_upload_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Employees
      summary: Upload Employees data via excel file.
      description: |
        Upload Employees data via excel file to Fyle system.
      operationId: employees_upload_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/employees_upload_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/employees_upload_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employees/downloads:
    get:
      tags:
        - Employees
      summary: List Employees download requests
      operationId: employees_download_list
      description: |
        Check the status of the Employees download requests.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employees_download_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Employees
      summary: Create a request to download an excel file for employees
      description: |
        Create a request to download an excel file containing employees columns.
      operationId: employees_download_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/employees_download_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employees/summaries:
    get:
      tags:
        - Employees
      summary: List employee summaries
      operationId: employee_summaries_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_summary_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/files:
    post:
      operationId: files_post
      tags:
        - Files
      summary: Create a file
      description: |
        Create a file.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/admin_file_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/file_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/files/bulk:
    post:
      operationId: files_post_bulk
      tags:
        - Files
      summary: Bulk create files
      description: |
        Create files in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/admin_file_in'
              additionalProperties: false
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/file_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/files/generate_urls/bulk:
    post:
      operationId: files_generate_urls_bulk_post
      tags:
        - Files
      summary: Bulk generate download and upload URLs
      description: |
        Once a file is created, its contents may need to be uploaded (or downloaded). To upload (or download) contents, you'll
        need to generate a temporary signed URL. This API accomplishes that. The signed URL is valid for 5 mins.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/file_generate_urls_action_in'
                  example:
                    - id: fi123819sa
                    - id: fi876833tu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/file_generate_urls_action_out'
                    example:
                      - id: sdfd2391
                        name: uber_expenses_vmrpw.pdf
                        content_type: application/pdf
                        download_url: https://aaa.bbb.cc/x232sds
                        upload_url: https://aaa.bbb.cc/x232sds
                      - id: sdfd2392
                        name: lyft_expenses_vmrpw.pdf
                        content_type: application/pdf
                        download_url: https://aaa.bbb.cc/x22ddsds
                        upload_url: https://aaa.bbb.cc/x2sdssds
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/files/delete/bulk:
    post:
      operationId: files_delete
      tags:
        - Files
      summary: Delete files bulk
      description: |
        Delete files bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/file_delete_action_in'
                  example:
                    - id: fi123819sa
                    - id: fi876833tu
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/files/download:
    get:
      operationId: files_download_get
      tags:
        - Files
      summary: Download a file
      description: |
        Generates a download URL for a file and redirects client to that URL.
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
            example: fiNhunGsCQJb
      responses:
        '302':
          description: Redirect to file download URL
          headers:
            Location:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/automations/report_submissions:
    post:
      tags:
        - Automations
      summary: Create or update Report Submission Automations
      description: |
        Create or update Report Submission Automations
      operationId: report_submission_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/automate_report_submission_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/automate_report_submission_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    get:
      tags:
        - Automations
      summary: List Report Submission Automations
      operationId: report_submission_get
      description: |
        List Report Submission Automations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/automate_report_submission_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/automations/report_submissions/delete:
    post:
      tags:
        - Automations
      summary: Delete Report Submission Automation
      description: |
        Delete Report Submission Automation
      operationId: report_submission_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/delete_automate_report_submission_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/automate_report_submission_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/accounting_exports:
    get:
      tags:
        - Accounting Exports
      summary: List accounting exports
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: accounting_exports_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/accounting_export_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Accounting Exports
      summary: Create or update an accounting export
      operationId: accounting_export_post
      description: |
        Create or update an accounting export.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/accounting_export_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/accounting_export_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/accounting_export_lineitems:
    get:
      tags:
        - Accounting Exports
      summary: List accounting exports lineitems
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: accounting_export_lineitems_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/accounting_export_lineitem_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: accounting_export_lineitems_post
      tags:
        - Accounting Exports
      summary: Create or update an accounting export lineitem
      description: |
        Create or update an accounting export lineitem.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/accounting_export_lineitem_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/accounting_export_lineitem_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/accounting_export_lineitems/bulk:
    post:
      operationId: accounting_export_lineitems_bulk_post
      tags:
        - Accounting Exports
      summary: Create or update accounting export lineitems in bulk
      description: |
        Create or update accounting export lineitems in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/accounting_export_lineitem_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expenses:
    get:
      tags:
        - Expenses
      summary: List expenses
      description: |
        This API gets you expenses submitted by any employee in the current organization.

        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: expenses_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Expenses
      summary: Create or update an expense
      description: |
        Create or update an expense.
      operationId: expenses_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/admin_expense_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/expense_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/attach_files/bulk:
    post:
      tags:
        - Expenses
      summary: Attach files to an expense in bulk
      description: |
        This API attaches files to an expense in bulk
      operationId: attach_files_to_expense_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/attach_files_to_expense_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/accounting_export_summary/bulk:
    post:
      operationId: expenses_accounting_export_summary_bulk_post
      tags:
        - Expenses
      summary: Create or update accounting export summary in bulk
      description: |
        Create or update accounting export summary in bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/accounting_export_summary_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expenses/filters:
    post:
      tags:
        - Expenses
      summary: Create Expenses saved filters
      description: |
        Save expenses filters for personal use or share with other admins.
      operationId: expenses_filters_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expense_filters_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/expense_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Expenses
      summary: List Expenses saved filters
      operationId: expenses_filters_get
      description: |
        List filters saved by the admin or shared with the admin.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expenses/filters/delete:
    post:
      tags:
        - Expenses
      summary: Delete Expenses saved filter
      description: |
        Delete Expenses saved filter having the provided id.
      operationId: expenses_filters_post_action_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expense_filters_delete_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/expense_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/verify/bulk:
    post:
      tags:
        - Expenses
        - Verify
        - Verify expenses
        - Bulk
      summary: Verify expenses in bulk
      description: |
        Verify expenses in bulk.
      operationId: expenses_verify_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/expenses_verify_bulk_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
                  - $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/stats:
    post:
      tags:
        - Expenses
      summary: Expenses Stats
      description: |
        Expenses Stats
      operationId: expenses_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expenses_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expenses_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/exports:
    post:
      tags:
        - Expenses
      summary: Create Expenses Export
      description: |
        Create Expenses Export Request.
      operationId: expenses_exports_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expenses_exports_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/expenses_exports_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expenses/permissions:
    post:
      tags:
        - Expenses
        - Expense permissions
        - Permissions
      summary: Expense Permissions
      description: |
        Expense Permissions for the user
      operationId: expense_permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_permissions_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expense_permissions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/merge:
    post:
      tags:
        - Expenses
      summary: Merge expenses
      description: |
        Merge expenses.
      operationId: merge_expenses_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expenses_merge_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/expense_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests:
    get:
      tags:
        - Advances
      summary: List advance requests
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: advance_requests_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    post:
      tags:
        - Advances
      summary: Update an advance request
      description: |
        Update an advance requests.
      operationId: advance_requests_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/stats:
    post:
      tags:
        - Advances
      summary: Advances Requests Stats
      description: |
        Advances Requests Stats
      operationId: advance_requests_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_requests_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_requests_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/permissions:
    post:
      tags:
        - Advances
      summary: Advance Request Permissions
      description: |
        Returns a list of all possible actions that can be performed on an advance request by the current user.
      operationId: advance_requests_permissions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_permissions_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_permissions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/comments:
    post:
      summary: Add comment to advance request
      operationId: advance_requests_comments_post
      description: |
        This API allows admins to add comments to an advance request.
      tags:
        - Advances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_comments_in'
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_comments_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/remove_approver:
    post:
      summary: Remove approver from advance request
      operationId: advance_requests_remove_approver_post
      description: |
        This API allows admins to disable/remove an approver from an advance request.
      tags:
        - Advances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_remove_approver_in'
            example:
              data:
                id: areq5F9xIaMURI
                approver_email: approver@example.com
      responses:
        '200':
          description: Approver removed successfully and returns the updated advance request
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access.
  /admin/advances:
    get:
      tags:
        - Advances
      summary: List advances
      operationId: advances_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/advance_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    post:
      tags:
        - Advances
      summary: Create advances
      description: |
        Create advances.
      operationId: advances_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advances/bulk:
    post:
      tags:
        - Advances
      summary: Create advances in bulk
      description: |
        Create advances in bulk.
      operationId: advances_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/advance_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/advances/stats:
    post:
      tags:
        - Advances
      summary: Advances Stats
      description: |
        Advances Stats
      operationId: advances_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advances_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advances_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_wallets:
    get:
      tags:
        - Advances
      summary: List advance wallets
      operationId: advance_wallets_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/advance_wallet_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    post:
      tags:
        - Advance wallets
      summary: Create advance wallets
      description: |
        Create advance wallets.
      operationId: advance_wallets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_wallet_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_wallet_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_refunds:
    get:
      tags:
        - Advances
      summary: List advance refunds
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: advance_refunds_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/advance_refund_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    post:
      tags:
        - Advances
      summary: Create an advance refund
      description: |
        Create an advance refund.
      operationId: advance_refunds_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_refund_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_refund_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_refunds/bulk:
    post:
      tags:
        - Advances
      summary: Create advance refund in bulk
      description: |
        Create advance refund in bulk.
      operationId: advance_refunds_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/advance_refund_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/advance_refunds/stats:
    post:
      tags:
        - Advances
      summary: Advances Refunds Stats
      description: |
        Advances Refunds Stats
      operationId: advance_refunds_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_refunds_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_refunds_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reminders:
    get:
      tags:
        - Reminders
      summary: List Reminders
      operationId: reminders_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/reminder_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: reminders_post
      tags:
        - Reminders
      summary: Create or update a reminder
      description: |
        Create or update a reminder.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/reminder_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/reminder_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reminders/delete:
    post:
      tags:
        - Reminders
      summary: Delete a reminder
      description: |
        Delete a reminder.
      operationId: reminders_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/reminder_delete_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/reminder_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports:
    get:
      tags:
        - Reports
      summary: List reports
      operationId: reports_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Reports
      summary: Update Purpose
      operationId: update_purpose
      description: |
        This API is used to update the the purpose of an report by Admin. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/admin_report_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/reports/eject_expenses:
    post:
      tags:
        - Reports
      summary: Eject expenses from a report
      description: Eject expenses from a report
      operationId: report_eject_expenses_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_action_with_expenses_ids_to_eject'
                reason:
                  type: string
                  description: |
                    Reason for ejecting the expense \
                    Note: When ejecting own expense, reason is not required. However, if another spender's expense are ejected reason is mandatory.
                  example: All bills are in order
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/filters:
    post:
      tags:
        - Reports
      summary: Create Report saved filters
      description: |
        Save report filters for personal use or share them among other admins.
      operationId: report_filters_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/report_filters_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/report_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Reports
      summary: List Report saved filters
      operationId: report_filters_get
      description: |
        List filters saved by the admin or share them among other admins.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_filters_out'
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/reports/filters/delete:
    post:
      tags:
        - Reports
      summary: Delete Report saved filter
      description: |
        Delete Report saved filter having the provided id.
      operationId: report_filters_post_action_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/report_filters_delete_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/report_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/comments:
    post:
      tags:
        - Reports
      summary: Comments on a report
      description: Comments on a report
      operationId: report_comments_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_comments_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/report_comments_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/add_approver:
    post:
      tags:
        - Reports
      summary: Add Approver
      description: |
        Add Approver to the report 
      operationId: report_add_approver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/add_approver_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/remove_approver:
    post:
      tags:
        - Reports
      summary: Remove an approver from a report
      description: |
        Remove an approver from a report using their email.
      operationId: report_approvers_remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/report_action_remove_approver_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/reports/approve/bulk:
    post:
      tags:
        - Reports
      summary: Admin approve reports in bulk
      description: |
        Admin approve reports in bulk
      operationId: report_admin_approve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/report_action_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/send_back:
    post:
      tags:
        - Reports
      summary: Send back report
      description: |
        Send back report to the employee 
      operationId: report_send_back
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/send_back_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/process_ach/bulk:
    post:
      tags:
        - Reports
      summary: Process ACH
      description: |
        Process ACH
      operationId: reports_process_ach
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/process_ach_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/mark_paid/bulk:
    post:
      tags:
        - Reports
      summary: Mark reports as Paid
      description: |
        Mark reports as Paid.
      operationId: reports_mark_paid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/mark_paid_bulk_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/process_manual/bulk:
    post:
      tags:
        - Reports
      summary: Process Manual
      description: |
        Process reports manually
      operationId: reports_process_manual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/process_manual_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/process_summary/bulk:
    post:
      tags:
        - Reports
      summary: Reimbursable amount summary
      description: |
        Reimbursable amount summary
      operationId: reports_process_summary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/process_summary_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/process_summary_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/accounting_export_summary/bulk:
    post:
      tags:
        - Reports
      summary: Update accounting export summary and initiate export
      description: |
        Update accounting export summary and initiate export
      operationId: reports_accounting_export_summary_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/report_accounting_export_summary_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/stats:
    post:
      tags:
        - Reports
      summary: Reports Stats
      description: |
        Reports Stats
      operationId: reports_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/reports_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/reports_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/create_and_submit:
    post:
      tags:
        - Reports
      summary: Create and submit reports for employees
      description: Create and submit reports for employees
      operationId: report_create_and_submit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_create_and_submit_expenses'
      responses:
        '200':
          description: OK
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/permissions:
    post:
      tags:
        - Reports
      summary: Reports Permissions
      description: |
        Reports Permissions for a user
      operationId: reports_permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/report_permissions_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/report_permissions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/apply_advance_wallets:
    post:
      tags:
        - Reports
      summary: Settle report with advance wallets
      description: Settle report with advance wallets
      operationId: report_apply_advance_wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/apply_advance_wallets_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/remove_advance_wallets:
    post:
      tags:
        - Reports
      summary: Undo settling of report with advance wallets
      description: |
        This will undo the settling of the report with advance wallets
      operationId: report_remove_advance_wallets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/remove_advance_wallets_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/reports/round_off_amount:
    post:
      tags:
        - Reports
      summary: Round off report amount
      description: |
        Round off report amount. This API first rounds of expenses and then rounds off the total amount of the report.
      operationId: report_round_off_amount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/round_off_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/admin_report_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/reports/exports:
    get:
      tags:
        - Reports
      summary: Get Reports Export
      description: |
        Get reports export request details. This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: reports_exports_get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/reports_exports_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Reports
      summary: Create Reports Export
      description: |
        Create Reports Export Request.
      operationId: reports_exports_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/reports_exports_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/reports_exports_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_cards:
    get:
      tags:
        - Corporate Cards
      summary: List corporate cards
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: corporate_cards_list
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/corporate_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Corporate Cards
      summary: Create or update an corporate card
      description: |
        Create or update an corporate card.
      operationId: corporate_cards_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_cards/bulk:
    post:
      tags:
        - Corporate Cards
      summary: Create or update corporate cards in bulk
      description: |
        Create or update corporate cards in bulk
      operationId: corporate_cards_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_cards/bank_names:
    get:
      tags:
        - Corporate Cards
      summary: List corporate card bank names
      description: |
        This API just returns all the bank names associated with the corporate cards in the org
      operationId: corporate_cards_bank_names_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      bank_names:
                        type: array
                        items:
                          type: string
                        example:
                          - Amex
                          - Bank of America
                        description: |
                          Holds the bank names of all the corporate cards present in the org
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/corporate_cards/masked_card_numbers:
    get:
      tags:
        - Corporate Cards
      summary: List corporate card masked card numbers
      description: |
        This API just returns all the masked card numbers (last 4 digits) associated with the corporate cards in the org, based on the query parameters.
      operationId: corporate_cards_masked_card_numbers_list
      parameters:
        - $ref: '#/components/parameters/q_integer'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      masked_card_numbers:
                        type: array
                        items:
                          type: string
                        example:
                          - 1234
                          - 5678
                        description: |
                          Holds the masked card numbers (last 4 digits) of all the corporate cards present in the org.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/corporate_cards/stats:
    post:
      tags:
        - Corporate Cards
      summary: Corporate Cards Stats
      description: |
        Stats for Corporate Cards
      operationId: corporate_cards_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_cards/assign:
    post:
      tags:
        - Corporate Cards
      summary: Assign corporate card to user
      description: |
        Assign a corporate card to a user
      operationId: corporate_cards_assign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_assign_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_cards/unassign:
    post:
      tags:
        - Corporate Cards
      summary: Unassign corporate card from user
      description: |
        Unassign a corporate card from a user
      operationId: corporate_cards_unassign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_id_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_unassign_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_cards/reassign:
    post:
      tags:
        - Corporate Cards
      summary: Reassign corporate card to another user
      description: |
        Reassign a corporate card to another user
      operationId: corporate_cards_reassign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_reassign_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_cards/delete:
    post:
      tags:
        - Corporate Cards
      summary: Delete corporate card
      description: |
        Delete a corporate card and all its associated transactions
      operationId: corporate_cards_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_id_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions:
    get:
      tags:
        - Corporate Card Transactions
      summary: List corporate card transactions
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: corporate_card_transactions_list
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/corporate_card_transaction_list_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      tags:
        - Corporate Card Transactions
      summary: Create or update corporate card transaction
      description: |
        Create or update an corporate card transactions.
      operationId: corporate_card_transactions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_post_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Bulk create or update corporate card transactions
      description: |
        Create or update corporate card transactions in bulk.
      operationId: corporate_card_transactions_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transaction_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_card_transactions/stats:
    post:
      tags:
        - Corporate Card Transactions
      summary: Corporate Card Transaction Stats
      description: |
        Corporate Card Transaction Stats
      operationId: corporate_card_transactions_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transactions_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transactions_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/delete_summary/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Corporate Card Transaction Delete Summary
      description: |
        Corporate Card Transaction Delete Summary
      operationId: corporate_card_transactions_delete_summary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transactions_delete_summary_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transactions_delete_summary_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/delete:
    post:
      tags:
        - Corporate Card Transactions
      summary: Corporate Card Transaction Delete
      description: |
        Corporate Card Transaction Delete
      operationId: corporate_card_transactions_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transactions_delete_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/corporate_card_transaction_list_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/filters:
    post:
      tags:
        - Corporate Card Transactions
      summary: Corporate card transactions saved filters
      description: |
        Save Corporate Card Transaction filters for personal use or share with other admins.
      operationId: corporate_card_transaction_filters_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_filters_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Corporate Card Transactions
      summary: List Corporate Card Transactions saved filters
      operationId: corporate_card_transaction_filters_get
      description: |
        List filters saved by the admin or shared with the admin.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/corporate_card_transaction_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/corporate_card_transactions/filters/delete:
    post:
      tags:
        - Corporate Card Transactions
      summary: Delete Corporate Card Transactions saved filter
      description: |
        Delete Corporate Card Transactions saved filter having the provided id.
      operationId: corporate_card_transaction_filters_post_action_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_filters_delete_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_filters_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/assign:
    post:
      tags:
        - Corporate Card Transactions
      summary: Assign a corporate card transaction
      description: |
        Assign corporate card transaction to a user.
      operationId: corporate_card_transactions_assign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_assign_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_assign_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/assign/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Bulk assign corporate card transactions
      description: |
        Assign corporate card transactions to users in bulk.
      operationId: corporate_card_transactions_assign_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transaction_assign_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_card_transactions/reassign/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Bulk reassign corporate card transactions
      description: |
        Reassign corporate card transactions to users in bulk.
      operationId: corporate_card_transactions_reassign_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transaction_reassign_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_card_transactions/unassign:
    post:
      tags:
        - Corporate Card Transactions
      summary: Unassign corporate card transaction
      description: |
        Unassign a corporate card transaction from a user.
      operationId: corporate_card_transactions_unassign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_unassign_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/mark_personal:
    post:
      tags:
        - Corporate Card Transactions
      summary: Mark a corporate card transaction as personal
      description: |
        Mark a corporate card transaction as personal
      operationId: corporate_card_transactions_mark_personal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_mark_personal_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/mark_personal/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Bulk mark personal corporate card transactions
      description: |
        Mark corporate card transactions as personal in bulk.
      operationId: corporate_card_transactions_mark_personal_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_card_transactions/unmark_personal:
    post:
      tags:
        - Corporate Card Transactions
      summary: Unmark a corporate card transaction which is marked as personal
      description: |
        Unmark a corporate card transaction which is marked as personal
      operationId: corporate_card_transactions_unmark_personal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_unmark_personal_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/ignore:
    post:
      tags:
        - Corporate Card Transactions
      summary: Ignore a corporate card transaction
      description: |
        Ignore a corporate card transaction
      operationId: corporate_card_transactions_ignore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_ignore_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/ignore/bulk:
    post:
      tags:
        - Corporate Card Transactions
      summary: Bulk ignore corporate card transactions
      description: |
        Ignore corporate card transactions in bulk.
      operationId: corporate_card_transactions_ignore_bulk
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/corporate_card_transactions/undo_ignore:
    post:
      tags:
        - Corporate Card Transactions
      summary: Undo an ignored corporate card transaction
      description: |
        Undo an ignored corporate card transaction
      operationId: corporate_card_transactions_undo_ignore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_id_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_undo_ignore_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/match:
    post:
      tags:
        - Corporate Card Transactions
      summary: Match corporate card transaction
      description: |
        Match corporate card transaction to expenses
      operationId: corporate_card_transactions_match
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_match_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_match_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/unmatch:
    post:
      tags:
        - Corporate Card Transactions
      summary: Unmatch corporate card transaction
      description: |
        Unmatch a matched corporate card transaction
      operationId: corporate_card_transactions_unmatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transaction_unmatch_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transaction_unmatch_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/corporate_card_transactions/exports:
    post:
      tags:
        - Corporate Card Transactions
      summary: Create Corproate Card Transactions Export
      description: |
        Create Corporate Card Transactions Export Request.
      operationId: corporate_card_transactions_exports_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/corporate_card_transactions_exports_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/corporate_card_transactions_exports_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/virtual_cards:
    get:
      tags:
        - Virtual Cards
      summary: List virtual cards
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: virtual_cards_list
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/virtual_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/virtual_cards/get_current_amount:
    post:
      tags:
        - Virtual Cards
      summary: Get current balance amount of the virtual card
      description: |
        To get the current balance amount of the virtual card
      operationId: virtual_cards_get_current_balance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/virtual_cards_id_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/virtual_cards_get_current_balance_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/virtual_cards/show_card_details:
    post:
      tags:
        - Virtual Cards
      summary: Show full card details
      description: |
        To get the card details of the virtual card
      operationId: virtual_cards_show_card_details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/virtual_cards_id_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/virtual_cards_show_card_details_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/virtual_cards/delete:
    post:
      tags:
        - Virtual Cards
      summary: Delete a virtual card
      description: |
        To delete a virtual card
      operationId: virtual_cards_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/virtual_cards_id_in'
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/virtual_card_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/subscriptions:
    post:
      tags:
        - Subscriptions
      summary: Create a subscription
      description: subscribe to different events using this API
      operationId: admin_subscriptions_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                data:
                  $ref: '#/components/schemas/subscriptions_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/admin_subscriptions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
      callbacks:
        REPORT.*:
          '{$request.body#/data/webhook_url}':
            post:
              operationId: report_subscriptions_callback
              summary: Object that will be sent to the callback url
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/report_out_subscriptions_admin'
              responses:
                '200':
                  description: OK
    get:
      tags:
        - Subscriptions
      summary: List Admin Subscriptions
      operationId: subscriptions_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/admin_subscriptions_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/reimbursements:
    get:
      tags:
        - Reimbursements
      summary: List reimbursements
      operationId: reimbursements_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/reimbursement_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/reimbursements/mark_paid/bulk:
    post:
      tags:
        - Reimbursements
      summary: Bulk mark paid reimbursements
      operationId: mark_paid_reimbursements_bulk
      description: |
        Marks reimbursement as paid and move reports to paid state.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/reimbursement_in_minimal'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/employee_account_summaries:
    get:
      tags:
        - Settlements
      summary: List employee accounts summaries
      operationId: employee_account_summaries_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/employee_account_summary_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/schedules:
    post:
      tags:
        - Schedules
      summary: Create or update a Schedule
      description: |
        Create or update a Schedule.
      operationId: schedules_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/schedule_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/schedule_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    get:
      tags:
        - Schedules
      summary: List Schedule
      operationId: schedules_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/schedule_out'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/scheduled_callbacks:
    post:
      tags:
        - Scheduled Callbacks
      summary: Create or update a Scheduled Callback
      description: |
        Create or update a Scheduled Callback.
      operationId: scheduled_callbacks_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/scheduled_callback_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/scheduled_callback_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    get:
      tags:
        - Scheduled Callbacks
      summary: List Scheduled Callback
      operationId: scheduled_callbacks_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/scheduled_callback_out'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/spend_overview/summary:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview Summary
      operationId: spend_overview_summary
      description: |
        API to return spend overview summary data. Data returned by this API can be used to plot a time series graph depicting amount of spend over a period of time. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_granularity'
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/is_card_spend'
        - $ref: '#/components/parameters/is_reimbursable'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  time_interval_granularity:
                    $ref: '#/components/schemas/time_interval_granularity'
                  total_amount:
                    $ref: '#/components/schemas/total_amount'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_summary_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_merchant:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By Merchant
      operationId: spend_overview_by_merchant
      description: |
        API to return spend overview data grouped by merchant. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_merchant_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_project:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By Project
      operationId: spend_overview_by_project
      description: |
        API to return spend overview data grouped by project. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_project_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_category:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By Category
      operationId: spend_overview_by_category
      description: |
        API to return spend overview data grouped by category. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_category_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_department:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By Department
      operationId: spend_overview_by_department
      description: |
        API to return spend overview data grouped by department. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_department_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_user:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By User
      operationId: spend_overview_by_user
      description: |
        API to return spend overview data grouped by user of an org. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/corporate_card_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_user_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/spend_overview/by_corporate_card:
    get:
      tags:
        - Spend Overview
      summary: Spend Overview By Corporate Card
      operationId: spend_overview_by_corporate_card
      description: |
        API to return spend overview data grouped by corporate cards being used in an org. <br>
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      parameters:
        - $ref: '#/components/parameters/time_interval_preset'
        - $ref: '#/components/parameters/time_interval_start'
        - $ref: '#/components/parameters/time_interval_end'
        - $ref: '#/components/parameters/merchant'
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/category_id'
        - $ref: '#/components/parameters/department_id'
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spend_overview_by_corporate_card_data_out'
        '202':
          description: Request Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/202'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '500':
          description: API Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/accounts:
    get:
      tags:
        - Accounts
      summary: List accounts
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: accounts_list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/account_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: accounts_post
      tags:
        - Accounts
      summary: Create an account
      description: |
        Create an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/account_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/account_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/tax_groups:
    get:
      tags:
        - Tax Groups
      summary: List tax groups
      operationId: tax_groups_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/tax_group_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      operationId: tax_groups_post
      tags:
        - Tax Groups
      summary: Create or update a tax group
      description: |
        Create or update a tax group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/tax_group_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/tax_group_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/tax_groups/bulk:
    post:
      operationId: tax_groups_bulk_post
      tags:
        - Tax Groups
      summary: Create or update tax groups in bulk
      description: |
        Create or update tax groups in bulk.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              additionalProperties: false
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/tax_group_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/budgets:
    post:
      tags:
        - Budgets
      summary: Create or update a Budget
      description: |
        Create or update a Budget
      operationId: budgets_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/budget_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/budget_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    get:
      tags:
        - Budgets
      summary: List Budgets
      operationId: budgets_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/budget_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/budget_usages:
    get:
      tags:
        - Budgets
      summary: List Budget Usages
      operationId: budget_usages_list
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/budget_usage_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/orgs:
    get:
      tags:
        - Organisations
      summary: List Organisations
      operationId: orgs_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/org_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expense_policy_rules:
    post:
      tags:
        - Expense Policies
      summary: Create or Update Expense Policy Rules
      description: |
        Create or Update Expense Policy Rules<br>
        **Apart from the required fields mentioned below, the request body should contain the following:**
        - You should choose at least one condition from **expense_*** or **employee_***.
        - You should choose at least one action from **action_***. <br><br>
        _When multiple conditions are provided, then there will AND operation in between them and the policy rule 
        will only be applicable on expenses if all of the conditions match. <br> 
        Similarly, for actions, if multiple actions are provided then all of the actions will be applied when conditions satisfy._
      operationId: expense_policy_rules_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_policy_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expense_policy_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Expense Policies
      summary: Get Expense Policy Rules
      operationId: expense_policy_rules_get
      parameters:
        - in: query
          name: id
          description: |
            The id of the expense policy rule.<br>
            Supported operators are `eq`, `in`, `neq`, `not_in`.<br>
            id=eq."id" <br>
            id=in.("id1","id2","id3") <br>
            id=neq."id" <br>
            id=not_in.("id1","id2","id3")
            > If no id is passed then all the expense policy rules of the org will be returned.
          schema:
            type: string
            example: eq."tprmdNPsd"
        - in: query
          name: is_enabled
          description: |
            Whether to fetch only active expense policy rule.<br>
            Supported operators are `eq`.<br>
            is_enabled=eq.true <br>
            is_enabled=eq.false
          schema:
            type: string
            example: eq.true
        - in: query
          name: is_retired
          description: |
            Whether to fetch retired expense policy rule.<br>
            Supported operators are `eq`.<br>
            is_retired=eq.true <br>
            is_retired=eq.false
          schema:
            type: string
            example: eq.true
        - in: query
          name: is_approver_policy
          description: |
            Whether to fetch expense policy rules that add an approver to an expense on violation.<br>
            Supported operators are `eq`.<br>
            is_approver_policy=eq.true <br>
            is_approver_policy=eq.false
          schema:
            type: string
            example: eq.true
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_policy_out'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expense_policy_rules/enable:
    post:
      tags:
        - Expense Policies
      summary: Enable an Expense Policy Rule
      description: |
        Enable an Expense Policy Rule
      operationId: expense_policy_rules_enable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_policy_state_change_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expense_policy_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Object Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expense_policy_rules/disable:
    post:
      tags:
        - Expense Policies
      summary: Disable an Expense Policy Rule
      description: |
        Disable an Expense Policy Rule
      operationId: expense_policy_rules_disable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_policy_state_change_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expense_policy_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Object Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expense_policy_rules/reorder:
    post:
      tags:
        - Expense Policies
      summary: Reorder approver policies
      description: |
        Reorder the enabled approver policies of an org.
        - An **approver policy** is a policy that adds an approver to an expense on violation.
        - All **enabled** approver policy IDs must be provided in the request body.
      operationId: expense_policy_rules_reorder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/expense_policy_state_change_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expense_policy_states:
    get:
      tags:
        - Expense Policies
      summary: Get policy states of Expenses
      description: |
        Get policy states of Expenses
      operationId: expense_policy_states_get
      parameters:
        - in: query
          name: expense_id
          description: |
            The id of the expense for which you are querying the policy states.<br>
            Supported operators are `eq`, `in`, `neq`, `not_in`.<br>
            expense_id=eq."id" <br>
            expense_id=in.("id1","id2","id3") <br>
            expense_id=neq."id" <br>
            expense_id=not_in.("id1","id2","id3")
          schema:
            type: string
            example: eq."txSdfsytrqw"
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_policy_states_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Object Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statements:
    get:
      tags:
        - Statements
      summary: List Statements
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: statements_list
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/statements_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/statements/upload:
    post:
      tags:
        - Statements
      summary: Upload a statement
      description: |
        Upload a corporate card statement(csv or excel) to Fyle for reconciliation.
      operationId: statements_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/statements_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/statements_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statement_mappings:
    get:
      tags:
        - Statement mappings
      summary: List of statement mappings
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: statement_mappings_list
      parameters:
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/statement_mappings_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/statements/suggest_mappings:
    post:
      tags:
        - Statements
      summary: Statement mapping suggestion
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      operationId: statement_mappings_suggest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    statement_id:
                      type: string
                      description: |
                        The id of the uploaded statement.
                  required:
                    - id
              required:
                - data
              additionalProperties: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/statement_mappings_suggest_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/statements/preview:
    post:
      tags:
        - Statements
      summary: Preview of the uploaded statement
      description: |
        This API helps in converting the statement with the mapping chosed and helps the user to preview it, this doesn't save the statement
      operationId: statements_preview
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/preview_from_statement_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/preview_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statements/card_stats:
    post:
      tags:
        - Statements
      summary: RTF Card Stats of a Statement
      description: |
        This API helps in getting all the card stats of a statement during RTF missing transactions upload. Stats include information such as if Card exists in Fyle, RTF enrollment of card etc.
      operationId: card_stats
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/card_transaction_from_statement_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/card_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statements/matching_cards:
    post:
      tags:
        - Statements
      summary: Matching cards present in Fyle
      description: |
        Returns matching cards present in Fyle for cards in Statement
      operationId: matching_cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/card_transaction_from_statement_in'
              required:
                - data
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/matching_cards_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statements/missing_transactions:
    post:
      tags:
        - Statements
      summary: Process RTF Missing Transactions Reconciliation
      description: |
        This API is used to start processing RTF missing transactions reconciliation of a statement.
      operationId: post_missing_transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/rtf_missing_transaction_from_statement_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
    get:
      tags:
        - Statements
      summary: Get RTF Missing Transactions Reconciliation Data
      description: |
        This API is used to get the data for RTF missing transactions reconciliation of a statement.
      operationId: get_missing_transactions
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/rtf_missing_transaction_from_statement_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/statements/create_card_transactions:
    post:
      tags:
        - Statements
      summary: Create corporate card transactions out of the uploaded statement
      description: |
        This API helps in converting the statement with the mapping chosed and create card transactions out of the statement.
      operationId: statements_create_card_transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/card_transaction_from_statement_in'
              required:
                - data
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/statements/rtf_stats:
    get:
      tags:
        - Statements
      summary: Get RTF Stats of the last uploaded statement
      description: |
        This API is used to get the RTF stats of the last uploaded statement for an organization.
      operationId: get_rtf_stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/rtf_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expense_rules:
    post:
      tags:
        - Expense Rules
      summary: Create or Update expense rules
      description: |
        Create or Update expense rules
      operationId: expense_rules_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_rule_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/expense_rule_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
    get:
      tags:
        - Expense Rules
      summary: List expense rules
      operationId: expense_rules_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_rule_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expense_rules/delete:
    post:
      tags:
        - Expense Rules
      summary: Delete an expense rule
      description: |
        Delete an expense rule.
      operationId: expense_rules_delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_rule_delete_in'
      responses:
        '200':
          description: The expense was deleted successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/expense_rule_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/check_mandatory_fields:
    post:
      tags:
        - Expenses
      summary: Check expense for missing mandatory fields
      description: |
        Before updating employee's expense object
        into Fyle, based on the business requirements, you might want to check if you have added all the mandatory fields set up by your organization.
        You can easily do that by passing the same expense object with some extra optional fields documented below.
      operationId: check_mandatory_fields_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expense_check_mandatory_fields_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/expense_check_mandatory_fields_out'
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/comments:
    get:
      tags:
        - Expenses
      summary: List expense comments
      description: List all the comments of an expense
      operationId: expense_comments_get
      parameters:
        - $ref: '#/components/parameters/expense_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_comments_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/comments/bulk:
    post:
      tags:
        - Expenses
        - Expense comments
        - Comments
      summary: Bulk comment on expenses
      description: |
        Bulk comment on expenses as an admin. The API allows you to add comments to multiple expenses at once.
      operationId: expense_comments_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/expense_comments_bulk_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_comments_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/dismiss_duplicates/bulk:
    post:
      tags:
        - Expenses
      summary: Dismiss Duplicate expenses
      description: |
        This API helps dismissing similar expenses as a duplicates.
      operationId: dismiss_duplicates_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/expense_dismiss_duplicates_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: string
                        nullable: true
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expenses/duplicate_sets:
    get:
      tags:
        - Expenses
      summary: List expense duplicate sets
      operationId: expense_duplicate_sets
      description: |
        This API provides the sets of the duplicate expenses for a particular employee.
      parameters:
        - in: query
          name: expense_id
          description: An expense_id for what we need to fetch the duplicate expenses.
          schema:
            type: string
            example: txdsjkF453kh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_duplicate_sets_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expenses/duplicate_sets/stats:
    get:
      tags:
        - Expenses
      summary: Expense duplicate sets stats
      operationId: expense_duplicate_sets_stats
      description: |
        This API returns count of expenses duplicate set present in org across all employees.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/expenses_duplicate_sets_stats_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/expenses_duplicate_sets_stats_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/feature_configs:
    get:
      tags:
        - Feature Configs
      summary: List feature configs.
      operationId: feature_configs_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/feature_config_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/feature_configs/bulk:
    post:
      tags:
        - Feature Configs
      summary: Create or update feature configs.
      description: |
        This API allows you to create or update feature configs.
      operationId: feature_configs_bulk_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/feature_config_in'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bulk_error'
                  - type: object
                    properties:
                      error:
                        type: string
                        nullable: true
                      message:
                        type: string
                        nullable: true
                      data:
                        type: object
                        nullable: true
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/expenses/split:
    post:
      tags:
        - Expenses
      summary: Split an expense
      description: |
        Admin can split an expense created by spender which is not yet paid out.
      operationId: expenses_split_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/admin_split_expense_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/split/check_mandatory_fields:
    post:
      tags:
        - Expenses
      summary: Check mandatory fields before splitting an expense
      description: |
        Before splitting an employee's expense object
        into Fyle, based on the business requirements, you might want to check if you have added all the mandatory fields set up by your organization.
        You can easily do that by passing the same expense split object documented below.
      operationId: expenses_split_check_mandatory_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/admin_split_expense_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_check_mandatory_fields_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expenses/split/check_policies:
    post:
      tags:
        - Expenses
      summary: Check for policy violations before splitting an expense
      description: |
        Before splitting an [expense object](https://docs.fylehq.com/docs/fyle-platform-docs/7a3407a5ef184-split-an-expense)
        into Fyle, based on the business requirements, you might want to check the resulting 
        expenses against the policy rules set up by your organization. You can easily do that by passing the same split expense object 
        to this API.
      operationId: expenses_split_check_policies_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/admin_split_expense_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/expense_check_policies_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/orgs/bank_details:
    get:
      tags:
        - Organisations
      summary: List Bank Account Details of Organisations
      operationId: orgs_bank_details_list
      description: |
        This API supports very rich filtering on all response fields and pagination via query parameters. To understand how to use these parameters, please see the [Guide to Data APIs](https://docs.fylehq.com/docs/fyle-platform-docs/ZG9jOjI3Mzk2NTM3-guide-to-data-ap-is#filtering)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/org_bank_details_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/merchants:
    get:
      tags:
        - Merchants
      summary: List merchants
      operationId: merchants_list
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/created_at'
        - $ref: '#/components/parameters/updated_at'
        - $ref: '#/components/parameters/display_name'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/merchant_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
  /admin/expenses/delete/bulk:
    post:
      summary: Bulk delete expenses
      description: Deletes multiple expenses based on the provided list of IDs, with access limited to the user's own expenses.
      tags:
        - Expenses
      security:
        - oauth2:
            - '*'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExpenseActionDeleteId'
      responses:
        '200':
          description: Expenses successfully processed for deletion.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500'
  /admin/employee_settings:
    get:
      tags:
        - Employee Settings
      summary: Get Employee Settings
      operationId: admin_employee_settings_get
      description: |
        Get employee settings for a given employee.
      parameters:
        - in: query
          name: employee_id
          schema:
            type: string
          required: true
          description: The employee ID for user whom we need to fetch settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                  - count
                  - offset
                properties:
                  count:
                    $ref: '#/components/schemas/count'
                  offset:
                    $ref: '#/components/schemas/offset'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/spender_employee_settings_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
  /admin/advance_requests/attach_files/bulk:
    post:
      tags:
        - Advances
      summary: Bulk attach files to advance requests
      description: |
        Bulk attach files to advance requests
      operationId: advance_requests_bulk_attach_files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/attach_files_to_advance_request_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/approve/bulk:
    post:
      tags:
        - Advances
      summary: Bulk approve advance requests
      description: |
        This API allows admins to approve multiple advance requests in a single operation.
      operationId: advance_requests_bulk_approve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/advance_request_bulk_approve_in'
      responses:
        '200':
          description: OK - All advance requests have been processed successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/expense_policy_comments:
    post:
      tags:
        - Expense Policy Comments
      summary: Add expense policy comment
      description: |
        This API adds or updates expense policy comments. 

        **Note:** 
        - If the specified `comment_type` already exists for the expense, the API will update the existing comment's `comment_text` with the new value provided, rather than creating a new comment entry.
        - If the `comment_type` is specified and the `comment_text` is null or an empty string, the comment will be deleted for that expense.
      operationId: add_expense_policy_comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    expense_id:
                      type: string
                      description: The expense ID
                    expense_policy_comments:
                      type: array
                      items:
                        type: object
                        properties:
                          comment_type:
                            type: string
                            description: The comment type
                          comment_text:
                            type: string
                            description: The comment text
                            nullable: true
                  required:
                    - expense_id
                    - expense_policy_comments
                  additionalProperties: false
              required:
                - data
              additionalProperties: false
            example:
              data:
                expense_id: txGCcvnhUbrP
                expense_policy_comments:
                  - comment_type: MISSING_FIELDS
                    comment_text: Reason for missing fields
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    type: object
                    properties:
                      expense_id:
                        type: string
                        description: The expense ID
                      expense_policy_comments:
                        type: array
                        items:
                          type: object
                          properties:
                            comment_type:
                              type: string
                              description: The comment type
                            comment_text:
                              type: string
                              description: The comment text
                    required:
                      - expense_id
                      - expense_policy_comments
                    additionalProperties: false
              example:
                data:
                  expense_id: txGCcvnhUbrP
                  expense_policy_comments:
                    - comment_type: MISSING_FIELDS
                      comment_text: Reason for missing fields
        '400':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorised request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
  /admin/advance_requests/add_approver:
    post:
      summary: Add approver to advance request
      operationId: advance_requests_add_approver_post
      description: |
        This API allows admins to add an approver to an advance request.
      tags:
        - Advances
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_add_approver_in'
            example:
              data:
                id: areq5F9xIaMURI
                approver_email: approver@example.com
                comment: Need your review on this advance
      responses:
        '200':
          description: Approver added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access.
  /admin/advance_requests/reject:
    post:
      tags:
        - Advances
      summary: Reject advance request
      description: |
        This API allows admins to reject an advance request.
      operationId: advance_requests_reject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_reject_in'
              example:
                data:
                  id: areq5F9xIaMURI
                  comment: Budget exceeded
      responses:
        '200':
          description: Advance request has been rejected successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access.
  /admin/advance_requests/inquire:
    post:
      tags:
        - Advances
      summary: Inquire about advance request
      description: |
        This API allows admins to inquire about an advance request, sending it back to the spender for clarification or modifications.
      operationId: advance_requests_inquire
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_inquire_in'
              required:
                - data
      responses:
        '200':
          description: Advance request has been sent back successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access. 
  /admin/advance_requests/submit:
    post:
      tags:
        - Advances
      summary: Submit an advance request
      description: |
        Submit an advance request.
      operationId: advance_requests_submit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_in'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_out'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access.
  /admin/advance_requests/custom_fields:
    get:
      tags:
        - Advances
      summary: Get advance request custom fields
      description: |
        This API allows admins to retrieve all active custom fields for advance requests in their organization.
      operationId: advance_requests_custom_fields_get
      responses:
        '200':
          description: Successfully retrieved custom fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_custom_fields_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
    post:
      tags:
        - Advances
      summary: Create or update advance request custom fields
      description: |
        This API allows admins to create and update custom fields for advance requests.
      operationId: advance_requests_custom_fields_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/advance_request_custom_field_in'
              required:
                - data
      responses:
        '200':
          description: Custom field created or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/advance_request_custom_field_out'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means current user does not have enough permissions to perform this operation.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: |
                      This error means the requested resource was not found or the requester doesn't have sufficient access.
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://app.fylehq.com/app/developers/#/oauth/authorize
          tokenUrl: https://accounts.fylehq.com/oauth/token
          scopes:
            '*': Grant all actions
  schemas:
    '202':
      type: object
      properties:
        message:
          type: string
          description: |
            Request has been accepted and is being processed, Please try again in sometime.
    '400':
      type: object
      properties:
        message:
          type: string
          nullable: true
          description: |
            Message describing why the request is invalid
    '401':
      type: object
      properties:
        message:
          enum:
            - invalid token
          type: string
          description: |
            This error means that the input access token is either not issued by Fyle or has expired.
            You need to generate a new access token.
    '403':
      type: object
      properties:
        message:
          enum:
            - Forbidden
          type: string
          description: |
            This error means current user does not have enough permissions to perform this operation.
    '404':
      type: object
      properties:
        message:
          enum:
            - Resource not found
          type: string
          description: |
            This error means the requested resource was not found or the requester doesn't have sufficient access.
    '500':
      type: object
      properties:
        message:
          type: string
          description: |
            API server hit an internal error and could not process request. This is likely a bug.
    ExpenseActionDeleteId:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the expense to be deleted.
          example: txm3L9soGEt2
      required:
        - id
    count:
      type: integer
      description: |
        The total number of objects that can be requested.
      example: 10000
    offset:
      description: |
        offset is used to skip that many number of objects before counting. <br>
        For example, if there are 2000 objects, <br>
        The first request will have offset as 0 and limit as 200 to return first 200 objects. <br>
        The second request will have offset as 200 and limit as 200 to return next 200 objects. <br>
      type: integer
      example: 10
    id_integer:
      type: integer
      description: |
        This id is provided by Fyle to identify an object.
      example: 1234
    org_id:
      type: string
      description: |
        The unique id of the Organization to which the object is associated.
      readOnly: true
      example: orwruogwnngg
    created_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was created in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T13:14:54.804+00:00'
    updated_at:
      type: string
      format: date-time
      description: |
        Signifies when this object was updated in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-11T13:14:55.201598+00:00'
    code:
      type: string
      nullable: true
      maxLength: 255
      description: |
        This represents a code that is typically used for syncing with other systems.
      example: C1234
    description:
      type: string
      nullable: true
      maxLength: 255
      description: |
        This represents the description of the resource.
      example: Win the trophy
    is_enabled:
      type: boolean
      description: |
        This indicates if the resource is enabled for use within the organisation.
      example: true
    restricted_spender_user_ids:
      type: array
      nullable: true
      items:
        type: string
        nullable: true
        maxLength: 15
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
        - uswlgwkgw42
      description: |
        List of IDs of users who can access this object.
    approver_user_ids:
      type: array
      nullable: false
      maxItems: 2
      items:
        type: string
        nullable: true
        maxLength: 15
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
        - uswlgwkgw42
      description: |
        List of IDs of users who are approvers of the project.
    id_string:
      type: string
      maxLength: 15
      description: |
        This id is provided by Fyle to identify an object.
      example: sdfd2391
    email:
      type: string
      maxLength: 127
      example: john.doe@example.com
      description: |
        An immutable field that represents the email address of the employee.
        Must be compliant with <a href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
    user_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: uswjwgnwwgo
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters.
          example: John Doe
    admin_approver_project_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          nullable: true
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          maxLength: 513
          description: |
            This is a combination of name and sub_project separated by a / and spaces.
            In case if no sub_project is present it is same as name of the project.
          example: Fast and Furious / Formula One
        description:
          $ref: '#/components/schemas/description'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        restricted_spender_user_ids:
          $ref: '#/components/schemas/restricted_spender_user_ids'
        approver_user_ids:
          $ref: '#/components/schemas/approver_user_ids'
        approver_users:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/user_out_embed'
          description: |
            List of users who are approvers for this project.
        category_ids:
          type: array
          nullable: true
          items:
            type: integer
            example: 16570
          description: List of categories that are applicable for the project.
    project_in:
      type: object
      additionalProperties: false
      required:
        - name
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          nullable: true
          type: string
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        restricted_spender_user_ids:
          type: array
          nullable: true
          items:
            type: string
            nullable: false
            maxLength: 15
            description: |
              This id is provided by Fyle to identify an object.
            example: uswoirwlwwg
          example:
            - uswoirwlwwg
            - uswlgwkgw42
          description: |
            - List of IDs of users who can access this object.
            - `null` value indicates that all users in the org can access this object.
            - `[]` value indicates that no users in the org can access this object.
            - **Note:**
              - **_When the `restrict employee to their own projects` feature is disabled, only `null` value is accepted._**
              - _If the `restrict employee to their own projects` feature is **disabled**, then the default value while creating project  is `null`._
              - _If the `restrict employee to their own projects` feature is **enabled**, then the default value while creating project is `[]`._
        approver_user_ids:
          allOf:
            - $ref: '#/components/schemas/approver_user_ids'
          description: |
            - List of IDs of users who are approvers of the project.
            - Either `approver_user_ids` or `approver_emails` can be used but not both.
            - The default value for approver_user_ids is `[]` and it is applicable only when creating the project.
        approver_emails:
          type: array
          maxItems: 2
          nullable: false
          items:
            type: string
            maxLength: 127
            nullable: true
            example: john.doe@example.com
            description: |
              An immutable field that represents the email address of the employee.
              Must be compliant with <a href='https://www.ietf.org/rfc/rfc822.txt'>RFC 822.</a>
          example:
            - approver1@example.com
            - approver2@example.com
          description: |
            - List of emails of employees that are approvers for the project.
            - Either `approver_user_ids` or `approver_emails` can be used but not both.
            - The default value for approver_emails is `[]` and it is applicable only when creating the project.
        category_ids:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 87291
            - 78322
            - 492
          description: |
            - List of IDs of categories which can be used with the project.
            - `null` value indicates that all categories in the org are applicable for the project.
            - `[]` value indicates that no category in the org is applicable for the project.
            - The default value of `category_ids` is `null`
    bulk_error:
      type: object
      properties:
        error:
          type: string
          example: BulkError
        message:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
                description: |
                  This holds the info of which row contains bad data.
              key:
                oneOf:
                  - type: string
                  - type: integer
                description: |
                  This helps in identifying the error by unique key.
              message:
                type: string
                description: |
                  This explains what the error is in `human readable` text
    project_in_only_id:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
    project_delete_summary_out:
      type: object
      additionalProperties: false
      properties:
        data:
          type: object
          properties:
            delete_count:
              type: integer
              description: Count of projects that could be deleted from input projects.
              example: 2
            projects:
              type: array
              description: Projects that could be deleted.
              example:
                - id: 1234
                - id: 4567
              items:
                $ref: '#/components/schemas/project_in_only_id'
    admin_cost_center_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        restricted_spender_user_ids:
          $ref: '#/components/schemas/restricted_spender_user_ids'
    cost_center_in:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        restricted_spender_user_ids:
          type: array
          nullable: true
          items:
            type: string
            nullable: false
            maxLength: 15
            description: |
              This id is provided by Fyle to identify an object.
            example: uswoirwlwwg
          example:
            - uswoirwlwwg
            - uswlgwkgw42
          description: |
            - List of IDs of users who can access this object.
            - `null` value indicates that all users in the org can access this object.
            - `[]` value indicates that no users in the org can access this object.
            - **Note:**
              - _Either `restricted_spender_user_ids` or `restricted_spender_user_group` key can be used to set restrictions. Both the keys can't be used together._
              - _While creating cost_centers, if both `restricted_spender_user_ids` and `restricted_spender_user_group` keys are not set, restrictions defaults to `"restricted_spender_user_group": {"with_no_cost_center_restrictions": "true"}`_
              - _While updating cost_centers, if both `restricted_spender_user_ids` and `restricted_spender_user_group` keys are not set, restrictions remains unchanged._
        restricted_spender_user_group:
          type: object
          required:
            - with_no_cost_center_restrictions
          additionalProperties: false
          properties:
            with_no_cost_center_restrictions:
              type: boolean
              description: |
                - If you want the cost_center to be visible to all the users in the org with no cost center restrictions,
                  you can set this key to True. <br>
                **Note:**
                  - _Either `restricted_spender_user_ids` or `restricted_spender_user_group` key can be used to set restrictions. Both the keys can't be used together._
                  - _While creating cost_centers, if both `restricted_spender_user_ids` and `restricted_spender_user_group` keys are not set, restrictions defaults to `"restricted_spender_user_group": {"with_no_cost_center_restrictions": "true"}`_
                  - _While updating cost_centers, if both `restricted_spender_user_ids` and `restricted_spender_user_group` keys are not set, restrictions remains unchanged._
              example: true
    admin_approver_category_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          nullable: true
          type: string
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        display_name:
          type: string
          maxLength: 255
          example: Engine / Turbo charged
          description: |
            This is a combination of name and sub_category separated by a / and spaces. In case if no sub_category is present it is same as name of the category.
        system_category:
          nullable: true
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
        code:
          $ref: '#/components/schemas/code'
        restricted_project_ids:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids for which this category can be used. If project_ids is null, then this category can be used for any project.
        restricted_spender_user_ids:
          $ref: '#/components/schemas/restricted_spender_user_ids'
    category_in:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          nullable: true
          type: string
          maxLength: 255
          example: Turbo charged
          description: Represents the sub category of the category. Note that the name and sub category cannot be same.
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        system_category:
          nullable: true
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
        code:
          $ref: '#/components/schemas/code'
        restricted_project_ids:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids for which this category can be used. If project_ids is null, then this category can be used for any project
        restricted_spender_user_ids:
          type: array
          nullable: true
          items:
            type: string
            nullable: false
            maxLength: 15
            description: |
              This id is provided by Fyle to identify an object.
            example: uswoirwlwwg
          example:
            - uswoirwlwwg
            - uswlgwkgw42
          description: |
            - List of IDs of users who can access this category. Default value is `[]`.
            - `null` value indicates that all users in the org can access this category.
            - `[]` value indicates that no users in the org can access this category.
    category_in_only_id:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
    category_delete_summary_out:
      type: object
      additionalProperties: false
      properties:
        data:
          type: object
          properties:
            delete_count:
              type: integer
              description: Count of categories that could be deleted from input categories.
              example: 2
            categories:
              type: array
              description: Categories that could be deleted.
              example:
                - id: 1234
                - id: 4567
              items:
                $ref: '#/components/schemas/category_in_only_id'
    system_category_out:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the system category.
    category_ids:
      type: array
      description: |
        List of category ids.
      items:
        type: integer
        example: 16570
    expense_field_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        seq:
          type: integer
          example: 1
        field_name:
          type: string
          description: |
            This specifies the name of the expense field.
          example: Vendor description
        column_name:
          type: string
          description: |
            This specifies the name of column to which this expense field mapped to.
          example: Purpose
        type:
          type: string
          description: |
            This field specifies the type of the expense field.
          example: SELECT
        options:
          type: array
          items:
            type: string
          description: |
            This specifies the option values of the expense field in case on SELECT or MULTI_SELECT type.
          example:
            - Chai
            - Coffee
        default_value:
          type: string
          nullable: true
          description: |
            This specifies the default value of the expense fields.
          example: Coffee
        placeholder:
          type: string
          nullable: true
          description: |
            This specifies the placeholder of the expense field.
          example: Enter vendor
        category_ids:
          $ref: '#/components/schemas/category_ids'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        is_custom:
          type: boolean
          description: |
            This field indicates if the expense field is custom or not.
          example: false
        is_mandatory:
          type: boolean
          description: |
            This specifies if the expense field is mandatory or not.
          example: true
        code:
          $ref: '#/components/schemas/code'
        parent_field_id:
          type: integer
          nullable: true
          description: |
            This specifies the `id` of the parent expense field and denotes that the expense field is a dependent custom field. NOTE: `type` must be `DEPENDENT_SELECT`.
          example: 1234
    expense_field_in:
      type: object
      additionalProperties: false
      required:
        - field_name
        - type
        - is_mandatory
        - is_enabled
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        field_name:
          type: string
          description: |
            This specifies the name of the expense field.
          example: Vendor description
        type:
          type: string
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - BOOLEAN
            - MULTI_SELECT
            - LOCATION
            - USER_LIST
            - DATE
            - DEPENDENT_SELECT
          description: |
            This field  specifies the type of the expense field.
          example: SELECT
        options:
          type: array
          items:
            type: string
          nullable: true
          description: |
            This specifies the option values of the expense field in case on SELECT or MULTI_SELECT type. Sets to empty array by default if null is passed.
          example:
            - Chai
            - Coffee
        default_value:
          type: string
          description: |
            This specifies the default value of the expense fields.
          example: Coffee
          nullable: true
        placeholder:
          type: string
          nullable: true
          description: |
            This specifies the placeholder of the expense field. Sets to empty string by default if null is passed.
          example: Enter vendor
        category_ids:
          type: array
          nullable: true
          description: List of category ids for which this expense field is applicable. If null is passed, the default value is all category ids of the org as array.
          items:
            type: integer
            example: 16570
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        is_mandatory:
          type: boolean
          description: |
            This specifies if the expense field is mandatory or not.
          example: true
        code:
          $ref: '#/components/schemas/code'
        parent_field_id:
          type: integer
          nullable: true
          description: |
            This specifies the `id` of the parent expense field and denotes that the expense field is a dependent custom field. NOTE: `type` must be `DEPENDENT_SELECT`.
          example: 1234
    dependent_expense_field_values_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        parent_expense_field_value:
          type: string
          description: |
            This specifies the text value of the parent expense field.
          example: Project 1
        expense_field_value:
          type: string
          description: |
            This specifies the text value of the dependent expense field.
          example: Cost Code 1
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    dependent_expense_field_values_in:
      type: object
      additionalProperties: false
      required:
        - parent_expense_field_id
        - expense_field_id
        - parent_expense_field_value
        - expense_field_value
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        parent_expense_field_value:
          type: string
          description: |
            This specifies the text value of the parent expense field.
          example: Project 1
        expense_field_value:
          type: string
          description: |
            This specifies the text value of the dependent expense field.
          example: Cost Code 1
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    dependent_expense_field_values_preview_out:
      type: object
      additionalProperties: false
      properties:
        org_id:
          $ref: '#/components/schemas/org_id'
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        parent_expense_field_value:
          type: string
          description: |
            This specifies the text value of the parent expense field.
          example: Project 1
        expense_field_values:
          type: array
          nullable: false
          description: |
            This specifies the text values of the dependent expense field upto 20 items.
          items:
            type: string
            nullable: false
            description: |
              This specifies the text value of the dependent expense field.
            example: Cost Code 1
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    dependent_expense_field_values_upload_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        file_id:
          type: string
          nullable: false
          description: |
            File `id` of the uploaded excel file.
          example: fiit3pX9gzzP
        error_file_id:
          type: string
          nullable: true
          description: |
            File `id` of the error excel file generated after processing the uploaded file.
          example: fiit3pX9gzzQ
        state:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          example: PENDING
    dependent_expense_field_values_upload_in:
      type: object
      additionalProperties: false
      required:
        - parent_expense_field_id
        - expense_field_id
        - file_id
      properties:
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        file_id:
          type: string
          nullable: false
          description: |
            File `id` of the uploaded excel file.
          example: fiit3pX9gzzP
    dependent_expense_field_values_download_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
        file_id:
          type: string
          nullable: true
          description: |
            File `id` of the uploaded excel file.
          example: fiit3pX9gzzP
        state:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          example: PENDING
    dependent_expense_field_values_download_in:
      type: object
      additionalProperties: false
      required:
        - parent_expense_field_id
        - expense_field_id
      properties:
        parent_expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the parent expense field.
          example: 1234
        expense_field_id:
          type: integer
          description: |
            This specifies the `id` of the dependent expense field.
          example: 5678
    employee_field_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          description: |
            This specifies the name of the employee field.
          example: Title
        type:
          type: string
          description: |
            This field specifies the type of the employee field.
          example: SELECT
        options:
          type: array
          items:
            type: string
          description: |
            This specifies the option values of the employee field in case on SELECT or MULTI_SELECT type.
          example:
            - Mr
            - Mrs
            - Ms
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        is_mandatory:
          type: boolean
          description: |
            This specifies if the employee field is mandatory or not.
          example: true
    employee_field_in:
      type: object
      additionalProperties: false
      required:
        - name
        - type
        - is_mandatory
        - is_enabled
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          description: |
            This specifies the name of the employee field.
          example: Title
        options:
          type: array
          items:
            type: string
          description: |
            This specifies the option values of the employee field in case on SELECT or MULTI_SELECT type.
          example:
            - Mr
            - Ms
            - Mrs
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        is_mandatory:
          type: boolean
          description: |
            This specifies if the employee field is mandatory or not.
          example: true
        type:
          type: string
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - BOOLEAN
            - MULTI_SELECT
            - LOCATION
            - DATE
          description: |
            This field specifies the type of the employee field.
          example: SELECT
    name:
      type: string
      maxLength: 255
      description: |
        This represents the name of the resource. This should be unique in an organization
      example: foo123
    per_diem_rate_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Florida Rate
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        currency:
          type: string
          maxLength: 3
          example: USD
          description: Currency code (must be three letters only)
        rate:
          type: number
          example: 10
          description: Amount per night
    per_diem_rate_in:
      type: object
      additionalProperties: false
      required:
        - is_enabled
        - name
        - currency
        - rate
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Florida Rate
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        currency:
          type: string
          maxLength: 3
          example: USD
          description: Currency code (must be three letters only)
        rate:
          type: number
          example: 10
          description: Amount per night
    department_head_user_ids:
      type: array
      nullable: false
      maxItems: 1
      items:
        type: string
        nullable: true
        maxLength: 15
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
      description: |
        List of IDs of users who are head of the department.
    department_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        sub_department:
          type: string
          nullable: true
          example: Outbound Sales
        department_head_user_ids:
          $ref: '#/components/schemas/department_head_user_ids'
        department_head_users:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/user_out_embed'
          description: |
            List of users who are head of the department.
        display_name:
          type: string
          example: Sales / Outbound Sales
          description: |
            This is a combination of name and sub_department separated by a / and spaces. In case if no sub_department is present it is same as name of the department.
        doc_url:
          type: string
          nullable: true
          description: |
            Link to an external document that would be shared with employees
          example: https://fyle.stoplight.io/
    department_in:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales
        code:
          $ref: '#/components/schemas/code'
        description:
          $ref: '#/components/schemas/description'
        sub_department:
          type: string
          nullable: true
          example: Outbound Sales
        department_head_user_ids:
          $ref: '#/components/schemas/department_head_user_ids'
        doc_url:
          type: string
          nullable: true
          description: |
            Link to an external document that would be shared with employees
          example: https://fyle.stoplight.io/
    mileage_rate_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        unit:
          type: string
          enum:
            - KM
            - MILES
        vehicle_type:
          type: string
          example: Audi
        rate:
          type: number
          example: 10
          nullable: true
          description: Amount (in Home currency) per unit.
        slab_rates:
          type: array
          items:
            type: object
            properties:
              rate:
                type: number
                nullable: true
              limit:
                type: number
                nullable: true
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        code:
          $ref: '#/components/schemas/code'
    mileage_rate_in:
      type: object
      required:
        - unit
        - rate
        - vehicle_type
        - is_enabled
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        unit:
          type: string
          enum:
            - KM
            - MILES
        vehicle_type:
          type: string
          example: Audi
        rate:
          type: number
          example: 10
          nullable: true
          description: Amount (in Home currency) per unit.
        slab_rates:
          type: array
          items:
            type: object
            required:
              - rate
              - limit
            properties:
              rate:
                type: number
                nullable: true
              limit:
                type: number
                nullable: true
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        code:
          $ref: '#/components/schemas/code'
    level_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          nullable: true
          description: |
            Band in which this level belongs to, you can group multiple levels into a single band.
          example: Associate
        code:
          $ref: '#/components/schemas/code'
        description:
          type: string
          nullable: true
          description: |
            Description of the level
          example: Entry level position
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - name
        - band
        - code
        - description
        - is_enabled
    level_in:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          nullable: true
          description: |
            Band in which this level belongs to, you can group multiple levels into a single band.
          example: Associate
        code:
          $ref: '#/components/schemas/code'
        description:
          type: string
          nullable: true
          description: |
            Description of the level
          example: Entry level position
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
      required:
        - name
        - is_enabled
    fk_string:
      type: string
      nullable: true
      maxLength: 15
      description: |
        This id is provided by Fyle to identify an object.
      example: sdfd2391
    department_out_embed:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        code:
          $ref: '#/components/schemas/code'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales
        sub_department:
          type: string
          nullable: true
          example: Outbound Sales
        display_name:
          type: string
          example: Sales / Outbound Sales
          description: |
            This is a combination of name and sub_department separated by a / and spaces. In case if no sub_department is present it is same as name of the department.
    null_field:
      type: string
      nullable: true
    timestamptz_utc:
      type: string
      format: date-time
      nullable: true
      description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T13:14:54.804+00:00'
    joined_at:
      anyOf:
        - $ref: '#/components/schemas/null_field'
        - $ref: '#/components/schemas/timestamptz_utc'
      nullable: true
      description: |
        Date and time when the user joined the organization. Date-time will be in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
    level_out_embed:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          type: string
          description: |
            Level name of the employees
          example: Associate I
        band:
          type: string
          nullable: true
          description: |
            Band in which this level belongs to, you can group multiple levels into a single band.
          example: Associate
      required:
        - id
        - name
        - band
    role:
      type: string
      enum:
        - FYLER
        - APPROVER
        - ACCOUNTANT
        - TRAVEL_ADMIN
        - VERIFIER
        - PAYMENT_PROCESSOR
        - FINANCE
        - ADMIN
        - TRAVEL_AGENT
        - OWNER
        - AUDITOR
        - HOD
        - HOP
      description: |
        Roles are assigned by Admin.
      example: FYLER
    location:
      type: object
      nullable: true
      properties:
        city:
          type: string
          nullable: true
          example: London
        state:
          type: string
          nullable: true
          example: London
        display_name:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
          example: United Kingdom
        formatted_address:
          type: string
          nullable: true
          example: 221 Baker St, Marylebone, London, United Kingdom
        latitude:
          type: number
          nullable: true
          example: 12.971599
        longitude:
          type: number
          nullable: true
          example: 77.594566
    custom_field:
      type: object
      description: |
        Custom field
      properties:
        id:
          type: integer
          description: |
            Expense field ID of the custom field.
          example: 1337
        name:
          type: string
          example: cf1
        value:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - v1
                - v2
    custom_fields:
      type: array
      description: |
        Custom fields
      items:
        $ref: '#/components/schemas/custom_field'
    flattened_custom_field:
      type: object
      description: |
        Custom fields in object format with keys as the name of the custom field and value as the value of the custom field. This is done to make it easier to query the custom fields.

        Example: `[{"name": "Custom Field 1", "value": "Value 1"}]` is flattened to `{"custom_field_1": "Value 1"}`

        NOTE: Key name is converted to snake case and spaces are replaced with underscores.
      nullable: false
      additionalProperties: true
      properties:
        cf1:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - string1
                - string2
      example:
        cf1: string1
        custom_field_2: Value 2
    project_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the project.
          example: Fast and Furious
        sub_project:
          type: string
          nullable: true
          maxLength: 255
          description: Represents the name of the sub_project.
          example: Formula One
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          example: Fast and Furious / Formula One
          description: |
            This is a combination of name and sub_project separated by a / and spaces.
            In case if no sub_project is present it is same as name of the project.
    cost_center_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          type: string
          maxLength: 255
          description: |
            This represents the name of the cost center.
          example: sales & marketing
        code:
          $ref: '#/components/schemas/code'
    per_diem_rate_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Florida Rate
        code:
          $ref: '#/components/schemas/code'
    mileage_rate_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        vehicle_type:
          type: string
          example: Audi
        code:
          $ref: '#/components/schemas/code'
    has_accepted_invite:
      type: boolean
      description: |
        This boolean field represents whether the employee has accepted the current org's invite by verifying his/her email or not.
      example: true
    bank_ifsc:
      type: string
      example: SBIN0007587
      maxLength: 11
      description: |
        IFSC code of the bank account of the Employee
      pattern: ^[A-Z]{4}0[A-Z0-9]{6}$
    phone_number:
      type: string
      example: '+12131234567'
      maxLength: 16
      description: |
        phone number is represented by +CC MMMMMM... where CC is the country code, and is one to three digits, and MMMMMM... is the area code (where applicable) and subscriber number Max 12 digits
      pattern: /^(\+\d{1,3}[- ]?)?\d{10}$/
    locale:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        abbreviation:
          type: string
          nullable: false
          maxLength: 4
          example: IST
          description: |
            Represents the abbreviation of the employee's locale.
        offset:
          type: string
          nullable: false
          maxLength: 9
          example: '05:30:00'
          description: |
            Represents the offset of the employee's timezone from UTC.
        timezone:
          type: string
          nullable: false
          maxLength: 19
          example: Asia/Kolkata
          description: |
            Represents the timezone of the employee.
      description: |
        Location and timezone settings of the employee.
    mileage_settings:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        mileage_rate_labels:
          type: array
          nullable: true
          items:
            type: string
            example: four_wheeler
          example:
            - four_wheeler
            - two_wheeler
        annual_mileage_of_user_before_joining_fyle:
          type: object
          nullable: true
          items:
            type: object
          example:
            two_wheeler: 44
      description: |
        Mileage settings of the employee.
    user_id:
      type: string
      description: |
        The unique id of an user to which the object is associated.
      readOnly: true
      example: uswjwgnwwgo
    user_full_name:
      type: string
      maxLength: 255
      description: |
        String denoting the full name of an employee.
      example: Jon Snow
    delegatees:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_integer'
          description: |
            Delegation id.
          example: 100
        type:
          type: string
          enum:
            - SHORT_TERM
            - PERMANENT
          description: |
            Type of delegation.
          example: SHORT_TERM
        user_id:
          $ref: '#/components/schemas/user_id'
        email:
          allOf:
            - $ref: '#/components/schemas/email'
          description: |
            Email of the delegatee.
        full_name:
          allOf:
            - $ref: '#/components/schemas/user_full_name'
          description: |
            Full name of the delegatee.
        start_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Date and time from which the delegation is active.
          nullable: false
        end_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Date and time till which the delegation is active. If null, delegation is active indefinitely.
          nullable: true
    category_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        system_category:
          nullable: true
          type: string
          maxLength: 255
          example: Others
          description: Represents the name of the system_category.
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the category.
        sub_category:
          type: string
          nullable: true
          maxLength: 255
          example: Turbo charged
          description: Represents the name of the sub_category.
        code:
          $ref: '#/components/schemas/code'
        display_name:
          type: string
          example: Engine / Turbo charged
          description: |
            This is a combination of name and sub_category separated by a / and spaces. In case if no sub_category is present it is same as name of the category.
    employee_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          $ref: '#/components/schemas/fk_string'
        user:
          $ref: '#/components/schemas/user_out_embed'
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        department_id:
          $ref: '#/components/schemas/fk_string'
        department:
          $ref: '#/components/schemas/department_out_embed'
        is_enabled:
          allOf:
            - $ref: '#/components/schemas/is_enabled'
          description: |
            This field indicates whether the employee is enabled in the org.
        joined_at:
          $ref: '#/components/schemas/joined_at'
        level_id:
          $ref: '#/components/schemas/fk_string'
        level:
          $ref: '#/components/schemas/level_out_embed'
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        roles:
          type: array
          items:
            $ref: '#/components/schemas/role'
        special_email:
          type: string
          maxLength: 127
          example: receipts+admin1_mb4w@fyle.ai
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        flattened_custom_field:
          $ref: '#/components/schemas/flattened_custom_field'
        project_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids that this employee is allowed to access.
        projects:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/project_out_embed'
          description: |
            List of projects that this employee is allowed to access.
        cost_center_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of cost center ids that this employee is allowed to access. [] (empty array) means access to all cost centers.
        cost_centers:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/cost_center_out_embed'
          description: |
            List of cost_ enters that this employee is allowed to access. [] (empty array) means access to all cost centers.
        per_diem_rate_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of per diem rate ids that this employee is allowed to access.
        per_diem_rates:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/per_diem_rate_out_embed'
          description: |
            List of per diem rates that this employee is allowed to access.
        mileage_rate_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of mileage rate ids that this employee is allowed to access.
        mileage_rates:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/mileage_rate_out_embed'
          description: |
            List of mileage rates that this employee is allowed to access.
        approver_user_ids:
          type: array
          maxLength: 3
          nullable: true
          items:
            $ref: '#/components/schemas/fk_string'
          example:
            - uswoirwlwwg
            - uswlgwkgw42
          description: |
            List of IDs of users who are approvers for this employee. Maximum 3.
        approver_users:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/user_out_embed'
          description: |
            List of users who are approvers for this employee.
        has_accepted_invite:
          $ref: '#/components/schemas/has_accepted_invite'
        branch_account:
          type: string
          nullable: true
          items:
            $ref: '#/components/schemas/name'
          example: null
          description: |
            The Account number of the bank account of the Employee.
        branch_ifsc:
          type: string
          nullable: true
          items:
            $ref: '#/components/schemas/bank_ifsc'
          example: null
          description: |
            IFSC code of the bank account of the Employee. Must be a 11 digit alphanumeric code.
        mobile:
          type: string
          nullable: true
          example: '+12131234567'
          items:
            $ref: '#/components/schemas/phone_number'
          description: |
            Mobile number of the employee
        is_mobile_verified:
          type: boolean
          nullable: true
          description: |
            Flag which indicates if mobile is verified or not.
          example: false
        locale:
          $ref: '#/components/schemas/locale'
        mileage_settings:
          $ref: '#/components/schemas/mileage_settings'
        ach_account:
          type: object
          nullable: true
          additionalProperties: false
          properties:
            added:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee has added ach account
            verified:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee's ach account is verified.
          description: |
            ACH account details of the employee.
        delegatees:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/delegatees'
          description: |
            List of users who are delegatees for this employee.
        category_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 3345
            - 3346
          description: |
            List of category ids that this employee is allowed to access.
        categories:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/category_out_embed'
          description: |
            List of categories that this employee is allowed to access.
    expense_duplicate_sets_out:
      type: object
      additionalProperties: false
      properties:
        expense_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - txwoirwlwwg
            - txwlgwkgw42
          description: |
            List of expense IDs that are part of the duplicate set
    employee_out_potential_duplicate_expenses:
      type: object
      additionalProperties: false
      properties:
        user_id:
          $ref: '#/components/schemas/user_id'
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters.
          example: John Doe
        potential_duplicate_expenses:
          type: array
          items:
            $ref: '#/components/schemas/expense_duplicate_sets_out'
    employees_export_config_column_formula:
      type: object
      properties:
        function:
          type: string
          enum:
            - Field
          example: Field
        parameters:
          type: array
          items:
            anyOf:
              - type: object
              - type: string
              - type: number
              - type: integer
              - type: boolean
          example:
            - function: field
              parameters:
                - joined_at
            - yyyy-MM-dd'T'HH:mm:ss
            - dd-MM-yyyy
            - error in date formatting
      description: |
        Export column formula is used to specify which field to export and any transformations needed.
    employees_export_config:
      type: object
      additionalProperties: false
      required:
        - type
        - is_header_visible
        - separate_line_items_entry
        - columns
      properties:
        type:
          type: string
          enum:
            - csv
            - xlsx
          description: |
            Type of the export file.
          example: csv
        is_header_visible:
          type: boolean
          description: |
            Whether to show the header in the export file.
          example: true
          default: true
        separate_line_items_entry:
          type: object
          properties:
            enabled:
              type: boolean
              description: |
                Whether to show separate entries for line items.
              example: false
              default: false
            first_row_columns_only:
              type: array
              items:
                type: string
              description: |
                Columns which should be populated for first row only.
              example:
                - Name
                - Departement
            second_row_columns_only:
              type: array
              items:
                type: string
              description: |
                Columns which should be populated for second row only.
              example:
                - Level
                - Sub-Departement
        columns:
          type: array
          items:
            type: object
            required:
              - name
              - formula
            properties:
              name:
                type: string
                description: |
                  Name of the column in the export.
                example: Name
              formula:
                allOf:
                  - $ref: '#/components/schemas/employees_export_config_column_formula'
                description: |
                  Formula specifying which field to export.
    employees_exports_in:
      type: object
      additionalProperties: false
      required:
        - query_params
        - notify_emails
        - config
      properties:
        query_params:
          type: string
          description: |
            SQL-like query parameters to filter employees.
          example: id=eq.btxnaceodwn
        notify_emails:
          type: array
          items:
            type: string
            format: email
          description: |
            List of email addresses to notify when the export is ready.
        config:
          allOf:
            - $ref: '#/components/schemas/employees_export_config'
          nullable: false
          description: |
            Configuration for the export.
    employees_exports_out:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        id:
          type: string
          example: eefilumWHrlPf7K
        org_id:
          type: string
          example: orwruogwnngg
        user_id:
          type: string
          example: uswjwgnwwgo
        query_params:
          type: string
        notify_emails:
          type: array
          items:
            type: string
            format: email
        config:
          allOf:
            - $ref: '#/components/schemas/employees_export_config'
          nullable: false
        file_id:
          type: string
          nullable: true
          example: filumWHrlPf7K
        state:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          description: |
            Status of the export.
          example: PENDING
        processed_at:
          type: string
          format: date-time
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true
        failed_at:
          type: string
          format: date-time
          nullable: true
    name_nullable:
      type: string
      maxLength: 255
      nullable: true
      description: |
        This represents the name of the resource. This should be unique in an organization
      example: foo123
    timestamptz_pst:
      type: string
      format: date-time
      nullable: true
      description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-01T01:18:19.292-08:00'
    delegatee:
      type: object
      additionalProperties: false
      properties:
        user_id:
          type: string
          description: |
            User ID of the delegatee.
          example: uswjwgnwwgo
        start_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Date and time from which the delegation is active.
          nullable: false
        end_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Date and time till which the delegation is active. If null, delegation is active indefinitely.
          nullable: true
    invitation_in:
      type: object
      additionalProperties: false
      required:
        - user_email
      properties:
        user_email:
          $ref: '#/components/schemas/email'
        user_full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters. 
            Is required when creating a new employee
          example: John Doe
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        department_name:
          $ref: '#/components/schemas/name_nullable'
        sub_department:
          $ref: '#/components/schemas/name_nullable'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        joined_at:
          $ref: '#/components/schemas/timestamptz_pst'
        level:
          $ref: '#/components/schemas/name_nullable'
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        approver_emails:
          type: array
          maxItems: 3
          nullable: false
          items:
            $ref: '#/components/schemas/email'
          example:
            - approver1@example.com
            - approver2@example.com
            - null
          description: |
            List of emails of employees that are approvers for this employee. Use null in case of no approver or to remove the approver.
        project_names:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/name'
          example:
            - Project / Sub Project
            - Only Project
          description: |
            List of project names that this employee is allowed to access. If null, then there are no restrictions.
            Individual list item should be in the format of `project_name / sub_project`. If there is no sub project, then simply pass `project_name`.
        cost_center_names:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/name'
          example:
            - Sales
          description: |
            List of cost center names that this employee is allowed to access. [] (empty array) means access to all cost centers.
        per_diem_rate_names:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/name'
          example:
            - TA - USD
          description: |
            List of per diem rate names that this employee is allowed to access.
        category_names:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/name'
          example:
            - Office Party
            - Internet
          description: |
            List of category names that this employee is allowed to access.
        vehicle_types:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/name'
          example:
            - two_wheeler
            - four_wheeler_1
          description: |
            List of mileage rate's vehicle types that this employee is allowed to access. If null, then there are no restrictions
        branch_account:
          type: string
          nullable: true
          items:
            $ref: '#/components/schemas/name'
          example: null
          description: |
            The Account number of the bank account of the Employee.
        branch_ifsc:
          type: string
          nullable: true
          items:
            $ref: '#/components/schemas/bank_ifsc'
          example: null
          description: |
            IFSC code of the bank account of the Employee. Must be a 11 digit alphanumeric code.
        mobile:
          type: string
          nullable: true
          items:
            $ref: '#/components/schemas/phone_number'
          description: |
            Mobile number of the employee
        locale:
          $ref: '#/components/schemas/locale'
        mileage_settings:
          $ref: '#/components/schemas/mileage_settings'
        delegatee_emails:
          type: array
          maxItems: 1
          nullable: false
          items:
            $ref: '#/components/schemas/email'
          example:
            - delegatee@example.com
          description: |
            This key is in the process of being deprecated. It is recommended to use `delegatees` key instead.
          deprecated: true
        delegatees:
          type: array
          maxItems: 5
          nullable: false
          items:
            $ref: '#/components/schemas/delegatee'
          description: |
            List of delegatees for this employee.
    employee_id:
      type: string
      maxLength: 255
      description: |
        This id provided by Fyle to uniquely identify an employee within an organization.
        This id is always prefixed with `ou`.
      example: outGt9ju6qP
    reinvitation_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/employee_id'
    filter_name:
      type: string
      nullable: false
      maxLength: 255
      description: |
        This represents the name of the filter.
      example: Code E0101
    is_shared:
      type: boolean
      nullable: true
      description: |
        This indicates if the filter should be shared with others in the org.
      default: false
      example: true
    query_string:
      type: string
      nullable: false
      maxLength: 255
      description: |
        This represents a query string which will be used to filter the data.
      example: code.eq.'E0101'
    employee_filters_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: efilumWHrlPf7K
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_string:
          $ref: '#/components/schemas/query_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    employee_filters_in:
      type: object
      additionalProperties: false
      required:
        - name
        - query_string
      properties:
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        query_string:
          $ref: '#/components/schemas/query_string'
    employee_filters_delete_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: efilumWHrlPf7K
    employees_upload_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: euo2bn4brep
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        file_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: fi3ou3hg3l
        state:
          type: string
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          description: |
            State of this upload.
        error_file_id:
          type: string
          nullable: true
          description: |
            File `id` of the error excel file generated after processing the uploaded file.
          example: fi1yut1owo3
    employees_upload_in:
      type: object
      properties:
        file_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: fi3ou3hg3l
      required:
        - file_id
    employees_download_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: emdo2bn4jbrep
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        file_id:
          type: string
          nullable: true
          description: |
            File `id` of the excel file generated after processing the download request.
          example: fi3ou3hg3l
        state:
          type: string
          enum:
            - SUCCESS
            - ERROR
            - PENDING
            - PROCESSING
          description: |
            State of this download.
    user_out_embed_nullable:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: uswjwgnwwgo
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters.
          example: John Doe
    employee_summary_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/fk_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user:
          $ref: '#/components/schemas/user_out_embed'
        approver_users:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/user_out_embed_nullable'
          description: |
            List of users who are approvers for this employee.
        unreported_expenses_total:
          type: number
          nullable: true
          description: |
            Total amount of all expenses in the COMPLETE state.
        unapproved_reports_total:
          type: number
          nullable: true
          description: |
            Total amount of all reports in the APPROVER_PENDING state.
        reimbursable_amount:
          type: number
          nullable: true
          description: |
            Total amount of reimbursable expenses.
        advance_account_ids:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/fk_string'
          example:
            - uswoirwlwwg
            - uswlgwkgw42
          description: |
            List of advance wallet IDs associated with the employee.
        advance_accounts_balance:
          type: number
          nullable: true
          description: |
            Total amount of all advance wallets associated with the employee.
        liability_amount:
          type: number
          nullable: true
          description: |
            Total liability payable to the employee.
    file_in:
      type: object
      required:
        - name
        - type
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - INTEGRATION
            - RECEIPT
          description: |
            Indicates whether this file original size or encrypted or its thumbnail image.
          example: RECEIPT
        password:
          type: string
          description: |
            Password which required to unlock the file.
          example: SuperSecretPassword
    admin_file_in:
      allOf:
        - $ref: '#/components/schemas/file_in'
        - type: object
          required:
            - user_id
          properties:
            user_id:
              allOf:
                - $ref: '#/components/schemas/id_string'
              example: us82yutrio54
    file_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/fk_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - INTEGRATION
            - RECEIPT
          description: |
            Indicates whether this file original size or encrypted or its thumbnail image.
          example: RECEIPT
        content_type:
          type: string
          example: text/csv
        download_url:
          type: string
          description: |
            Link to download this file
        upload_url:
          nullable: true
          type: string
          description: |
            Link to upload contents of this file
    file_generate_urls_action_in:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    file_generate_urls_action_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        content_type:
          type: string
          example: text/csv
        download_url:
          type: string
          description: |
            Link to download this file
        upload_url:
          nullable: true
          type: string
          description: |
            Link to upload contents of this file
    file_delete_action_in:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    schedule_config:
      type: object
      nullable: false
      properties:
        type:
          nullable: false
          type: string
          example: interval
          enum:
            - interval
            - date
            - cron
        when:
          nullable: false
          oneOf:
            - type: object
              additionalProperties: false
              properties:
                weeks:
                  type: number
                  example: 2
                days:
                  type: number
                  example: 12
                hours:
                  type: number
                  example: 6
                minutes:
                  type: number
                  example: 30
                seconds:
                  type: number
                  example: 30
                end_date:
                  nullable: true
                  type: string
                  example: '2020-11-11T16:29:30.965869Z'
                start_date:
                  nullable: true
                  type: string
                  example: '2020-11-11T16:29:30.965869Z'
                jitter:
                  nullable: true
                  type: number
                  example: 20
            - type: object
              additionalProperties: false
              properties:
                year:
                  type: string
                  example: 2022
                month:
                  type: string
                  example: 10
                day:
                  type: string
                  example: last, 15
                week:
                  type: string
                  example: 2
                day_of_week:
                  type: string
                  example: mon
                hour:
                  type: string
                  example: 23
                minute:
                  type: string
                  example: 23
                second:
                  type: string
                  example: 23
                end_date:
                  nullable: true
                  type: string
                  example: '2020-11-11T16:29:30.965869Z'
                start_date:
                  nullable: true
                  type: string
                  example: '2020-11-11T16:29:30.965869Z'
            - type: object
              additionalProperties: false
              properties:
                run_date:
                  nullable: true
                  type: string
                  example: '2021-05-12T10:16:50.410Z'
    automate_report_submission_out:
      type: object
      required:
        - id
        - description
        - schedule_config
        - org_id
        - created_at
        - updated_at
        - creator_user_id
        - creator_user
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        description:
          type: string
          description: |
            A human readable identifier for the automate report submission
          example: Expense Reports will be submitted automatically for approval on the Last Day, 7th and 24th of every month.
        schedule_config:
          $ref: '#/components/schemas/schedule_config'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        creator_user:
          $ref: '#/components/schemas/user_out_embed'
    automate_report_submission_in:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        description:
          type: string
          description: |
            A human readable identifier for the automate report submission
          example: Expense Reports will be submitted automatically for approval on the Last Day, 7th and 24th of every month.
        schedule_config:
          $ref: '#/components/schemas/schedule_config'
    delete_automate_report_submission_in:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    subscribed_resources:
      type: array
      items:
        type: string
        enum:
          - EXPENSE
          - REPORT
          - CATEGORY
          - PROJECT
          - COST_CENTER
          - EXPENSE_FIELD
          - DEPENDENT_EXPENSE_FIELD
          - CORPORATE_CARD
          - EMPLOYEE
          - TAX_GROUP
          - ORG_SETTING
    accounting_export_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: ae2froib22i0
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        file_ids:
          type: array
          minItems: 1
          maxItems: 1
          description: List of file ids which holds reference to export files
          readOnly: true
          items:
            $ref: '#/components/schemas/fk_string'
          example:
            - fi123819sa
        exported_at:
          $ref: '#/components/schemas/timestamptz_pst'
        name:
          type: string
          description: This represents name of the resource.
          example: Accounting exports test
        description:
          $ref: '#/components/schemas/description'
        url:
          type: string
          nullable: true
          maxLength: 255
          description: An optional URL where the exported data could be accessed
        client_id:
          type: string
          nullable: true
          maxLength: 255
        org_id:
          $ref: '#/components/schemas/org_id'
    accounting_export_in:
      type: object
      required:
        - file_ids
        - exported_at
        - name
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: ae2froib22i0
        file_ids:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/fk_string'
          example:
            - fi123819sa
          description: List of file ids which holds reference to export files
        exported_at:
          $ref: '#/components/schemas/timestamptz_utc'
        name:
          type: string
          description: This represents name of the resource.
          example: Accounting exports test
        description:
          $ref: '#/components/schemas/description'
        url:
          type: string
          nullable: true
          maxLength: 255
          description: An optional URL where the exported data could be accessed
    accounting_export_lineitem_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        object_id:
          $ref: '#/components/schemas/fk_string'
        object_type:
          type: string
          enum:
            - ADVANCE_REQUEST
            - ADVANCE
            - BALANCE_TRANSFER
            - REFUND
            - REIMBURSEMENT
            - REPORT
            - EXPENSE
            - CCC_EXPENSE
            - SETTLEMENT
        reference:
          type: string
          nullable: true
          maxLength: 255
          description: |
            Optional metadata about the Export operation. For example, newly created Accounting Entry numbers in Quickbooks.
        accounting_export_id:
          $ref: '#/components/schemas/fk_string'
        org_id:
          $ref: '#/components/schemas/org_id'
    accounting_export_lineitem_in:
      type: object
      required:
        - object_id
        - object_type
        - accounting_export_id
        - reference
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        object_id:
          $ref: '#/components/schemas/fk_string'
        object_type:
          type: string
          enum:
            - ADVANCE_REQUEST
            - REIMBURSEMENT
            - REPORT
            - EXPENSE
            - SETTLEMENT
        reference:
          type: string
          nullable: true
          maxLength: 255
          description: |
            Optional metadata about the Export operation. For example, newly created Accounting Entry numbers in Quickbooks.
        accounting_export_id:
          $ref: '#/components/schemas/fk_string'
    currency:
      type: string
      description: |
        The three-letter currency code following ISO standard <a href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
      example: USD
      pattern: ([A-Z]{3})
    foreign_currency:
      type: string
      nullable: true
      description: |
        The three-letter currency code following ISO standard <a href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
      example: GBP
    foreign_amount:
      type: number
      nullable: true
      description: |
        Amount value of the object, in original currency i.e the currency in which the object was initially created.
      example: 3768
    fk_integer:
      type: integer
      nullable: true
      description: |
        This id is provided by Fyle to identify an object.
      example: 1234
    account_out_embed:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: acwbl222wlg
        type:
          type: string
          enum:
            - PERSONAL_CASH_ACCOUNT
            - PERSONAL_CORPORATE_CREDIT_CARD_ACCOUNT
            - PERSONAL_ADVANCE_ACCOUNT
            - COMPANY_EXPENSE_ACCOUNT
            - COMPANY_CORPORATE_CREDIT_CARD_ACCOUNT
            - COMPANY_CATEGORY_ACCOUNT
          example: PERSONAL_CASH_ACCOUNT
    mileage_rate_out_embed_for_expense:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        vehicle_type:
          type: string
          example: Audi
        code:
          $ref: '#/components/schemas/code'
        rate:
          type: number
          example: 10
          nullable: true
          description: Amount (in Home currency) per unit.
    expense_custom_field:
      type: object
      description: |
        Expense custom field
      properties:
        id:
          type: integer
          description: |
            Expense field ID of the custom field.

            NOTE: This field may not be present for older expense custom fields created without the "id" field.
          example: 1337
        name:
          type: string
          example: cf1
        value:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - v1
                - v2
        type:
          type: string
          nullable: true
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - BOOLEAN
            - MULTI_SELECT
            - LOCATION
            - USER_LIST
            - DATE
            - DEPENDENT_SELECT
            - null
          description: |
            This field specifies the type of the expense field.
          example: SELECT
        is_enabled:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/is_enabled'
          nullable: true
    expense_custom_fields:
      type: array
      description: |
        Expense custom fields
      items:
        $ref: '#/components/schemas/expense_custom_field'
    amount:
      type: number
      description: |
        amount of money
      example: 47.99
    report_approval_out_embed:
      type: object
      additionalProperties: false
      properties:
        approver_user_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        approver_user:
          $ref: '#/components/schemas/user_out_embed'
        state:
          type: string
          enum:
            - APPROVAL_PENDING
            - APPROVAL_DISABLED
            - APPROVAL_DONE
          description: |
            State of this report_approval
        approver_order:
          type: integer
          description: |
            This number inidicates the order of the approver in the approval sequence for the report.
            The approver with the lowest approver_order is the first approver in the sequence.
          example: 1
    report_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      required:
        - id
        - last_approved_at
        - last_submitted_at
        - seq_num
        - title
        - state
        - last_paid_at
        - reimbursement_id
        - reimbursement_seq_num
      properties:
        id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          example: rpvgnwlgw34
        last_approved_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was approved.
        last_submitted_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was submitted.
        seq_num:
          type: string
          nullable: true
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        title:
          type: string
          nullable: true
          description: purpose for creating the report
          example: Business trip to London
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
            - null
          nullable: true
        amount:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/amount'
          nullable: true
        last_paid_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was reimbursed.
        last_verified_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this report was verified.
        reimbursement_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          maxLength: 255
          description: |
            An unique ID, generated by Fyle, for identifying the Reimbursement.
          example: reimntGt9ju6qP
        reimbursement_seq_num:
          type: string
          nullable: true
          description: |
            A unique, organization wide identifier for a particular reimbursement.<br>
            This id is always prefixed with `P/`.
          example: P/2020/11/29
        approvals:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
    file_out_embed:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: figwiwpjww
        name:
          type: string
          description: |
            Name of the uploaded file.
          example: uber_expenses_vmrpw.pdf
        type:
          type: string
          enum:
            - INTEGRATION
            - RECEIPT
          description: |
            Indicates whether this file original size or encrypted or its thumbnail image.
          example: RECEIPT
        content_type:
          type: string
          example: application/pdf
    expense_policy_comment_out_embed:
      type: object
      additionalProperties: false
      required:
        - id
        - comment_type
        - comment_text
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: epc1a2f3farmk
        comment_type:
          type: string
          description: Type of the policy comment
        comment_text:
          type: string
          description: Text content of the policy comment
    expense_verification_out_embed:
      type: object
      additionalProperties: false
      properties:
        verifier_user_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        verifier_user:
          $ref: '#/components/schemas/user_out_embed'
    org_name:
      type: string
      maxLength: 255
      description: |
        This represents the name of the organization. This should be unique for all organizations
      example: foo123
    department_id:
      type: string
      maxLength: 255
      nullable: true
      example: dept9in4oIHpdR
    employee_out_embed_for_expense:
      type: object
      additionalProperties: false
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        department_id:
          nullable: true
          $ref: '#/components/schemas/department_id'
        department:
          nullable: true
          $ref: '#/components/schemas/department_out_embed'
        level:
          $ref: '#/components/schemas/level_out_embed'
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        custom_fields:
          type: array
          nullable: true
          description: |
            Custom fields
          items:
            $ref: '#/components/schemas/custom_field'
        flattened_custom_field:
          $ref: '#/components/schemas/flattened_custom_field'
        has_accepted_invite:
          $ref: '#/components/schemas/has_accepted_invite'
        is_enabled:
          allOf:
            - $ref: '#/components/schemas/is_enabled'
          description: |
            This field indicates whether the employee is enabled in the org.
        mobile:
          type: string
          nullable: true
          example: '+12131234567'
          items:
            $ref: '#/components/schemas/phone_number'
          description: |
            Mobile number of the employee
        joined_at:
          $ref: '#/components/schemas/joined_at'
      description: |
        NOTE: The data of this field is not realtime. It will get updated later even if `employee_id` is already up-to-date.
    card_number:
      type: string
      description: |
        Specifies the masked number of the card.
        Add only masked card-numbers, last four digits of the card.
      example: xxxx-4543
    bank_name:
      type: string
      description: |
        Specifies the name of bank who issued the card.
      example: Bank of America
    spent_at:
      allOf:
        - $ref: '#/components/schemas/timestamptz_pst'
      description: |
        It signifies when this expense was made.
        This date cannot be in future.
    merchant:
      type: string
      maxLength: 255
      nullable: true
      description: |
        String denoting the name of the vendor to which the expense was made.
      example: Uber
    matched_corporate_card_transaction_out_embed:
      type: object
      nullable: true
      required:
        - id
        - corporate_card_id
        - corporate_card_number
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card_number:
          $ref: '#/components/schemas/card_number'
        corporate_card_nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Unique nickname assigned to the card
          example: Business Card
        corporate_card_cardholder_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's name
          example: John Cena
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        masked_corporate_card_number:
          $ref: '#/components/schemas/card_number'
        bank_name:
          nullable: true
          $ref: '#/components/schemas/bank_name'
        corporate_card_user_full_name:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/name_nullable'
          maxLength: 255
          description: |
            String denoting the card holder's full name
          example: John Doe
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/spent_at'
          description: |
            Signifies spent date of a card transaction.
            This date cannot be in future.
        posted_at:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies post date of a card transaction.
            This date cannot be in future.
        status:
          type: string
          nullable: true
          enum:
            - PENDING
            - POSTED
            - null
          example: PENDING
          description: |
            Signifies status of a card transaction.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        foreign_currency:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/foreign_amount'
        merchant:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/merchant'
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        matched_by:
          type: string
          nullable: true
          description: |
            String denoting the email of the user who matched the card transaction to an expense.
          example: john.ooe@fyle.in
    missing_mandatory_fields:
      type: object
      nullable: false
      properties:
        expense_field_ids:
          type: array
          nullable: false
          items:
            type: integer
            nullable: true
            description: |
              This id provided by Fyle to identify an expense field.
            example: 123
          example:
            - 123
            - 12423
          description: |
            List of IDs of expense fields which are mandatory but are missing.
        amount:
          type: boolean
          nullable: false
          description: |
            This field shows whether the amount field is present in the expense or not
        currency:
          type: boolean
          nullable: false
          description: |
            This field shows whether the currency field is present in the expense or not
      description: |
        This object contains all the fields which are mandatory bu tare missing in the expense.
    activity_details:
      type: object
      nullable: true
      properties:
        unique_meetings:
          type: number
          nullable: false
          example: 21
        total_meetings:
          type: number
          nullable: false
          example: 70
    extracted_data:
      type: object
      nullable: true
      properties:
        amount:
          type: number
          nullable: true
          example: 21
        vendor_name:
          type: string
          nullable: true
          example: Uber
        currency:
          type: string
          nullable: true
          example: USD
        category:
          type: string
          nullable: true
          example: Taxi
        date:
          type: string
          nullable: true
          example: '2020-07-20'
    split_group_amount:
      type: number
      nullable: true
      description: |
        The amount of expense before splitting.
      example: 3768
    is_billable:
      type: boolean
      nullable: true
      example: true
      description: This field marks whether a given expense is billable or not.
    dependent_expense_fields:
      type: object
      description: |
        Dependent expense fields details
      properties:
        parent_expense_field_id:
          type: integer
          description: |
            This id provided by Fyle to identify the parent expense field.
          example: 123
        dependent_expense_field_id:
          type: integer
          description: |
            This id provided by Fyle to identify the dependent expense field.
          example: 123
        dependent_expense_field_value_id:
          type: integer
          description: |
            This id provided by Fyle to identify dependent field value.
          example: 123
        name:
          type: string
          description: |
            This represents the name of the dependent expense field.
          example: cf1
        value:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - v1
                - v2
    expense_rule_data_in:
      type: object
      nullable: true
      additionalProperties: false
      minProperties: 1
      properties:
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Amazon
        is_billable:
          $ref: '#/components/schemas/is_billable'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 49058
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 92895
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 1049
        custom_fields:
          type: array
          nullable: true
          description: |
            Custom fields
          items:
            $ref: '#/components/schemas/custom_field'
        dependent_fields:
          type: array
          nullable: true
          description: |
            Dependent expense fields
          items:
            $ref: '#/components/schemas/dependent_expense_fields'
    tax_group:
      type: object
      nullable: true
      description: |
        Tax group details.
      properties:
        name:
          type: string
          nullable: true
          description: |
            Name of the tax group.
          example: GST
        percentage:
          type: number
          nullable: true
          description: |
            Tax percentage.
          example: 5
    policy_checks:
      type: object
      description: |
        Policy checks details.
        NOTE: The data of this field is not realtime. It will get updated later even if rest of fields are already up-to-date.
      properties:
        is_amount_limit_applied:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense amount is capped based on the policy calculation.
          example: true
        are_approvers_added:
          type: boolean
          description: |
            A true value here means, approvers are added to the expense based on the policy calculation.
          example: true
        is_flagged_ever:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense is flagged.
          example: true
        violations:
          type: array
          nullable: true
          description: |
            List of policy violations on this expense.
          items:
            type: object
            properties:
              policy_rule_description:
                type: string
                description: |
                  Description of the policy rule.
                example: Expense amount is greater than the policy limit
              policy_rule_id:
                allOf:
                  - $ref: '#/components/schemas/id_string'
                description: |
                  ID of the policy rule.
                example: tprCCiQiiuJZs
    commute_location:
      type: object
      nullable: true
      properties:
        city:
          type: string
          nullable: true
          example: London
        state:
          type: string
          nullable: true
          example: London
        country:
          type: string
          nullable: true
          example: United Kingdom
        formatted_address:
          type: string
          nullable: false
          example: 221 Baker St, Marylebone, London, United Kingdom
        latitude:
          type: number
          nullable: false
          example: 12.971599
        longitude:
          type: number
          nullable: false
          example: 77.594566
    commute_details:
      type: object
      nullable: true
      description: |
        Commute details of the employee. This is used to deduct daily commute from the employee's mileage expenses.
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
        home_location:
          allOf:
            - $ref: '#/components/schemas/commute_location'
          description: |
            Home location of the employee.
          nullable: true
        work_location:
          allOf:
            - $ref: '#/components/schemas/commute_location'
          description: |
            Work location of the employee.
          nullable: true
        distance:
          type: number
          nullable: true
          description: |
            Distance between home and work location of the employee.
          example: 10.55
        distance_unit:
          type: string
          nullable: true
          description: |
            Unit of distance.
          enum:
            - KM
            - MILES
            - null
          example: MILES
    expense_out:
      type: object
      additionalProperties: false
      required:
        - id
        - user_id
        - user
        - org_id
        - created_at
        - updated_at
        - spent_at
        - source
        - merchant
        - currency
        - amount
        - claim_amount
        - policy_amount
        - admin_amount
        - foreign_currency
        - foreign_amount
        - purpose
        - cost_center_id
        - cost_center
        - category_id
        - category
        - project_id
        - project
        - source_account_id
        - advance_wallet_id
        - source_account
        - tax_amount
        - tax_group_id
        - is_billable
        - is_reimbursable
        - distance
        - distance_unit
        - mileage_calculated_distance
        - mileage_calculated_amount
        - mileage_rate_id
        - mileage_rate
        - mileage_is_round_trip
        - per_diem_rate_id
        - per_diem_rate
        - per_diem_num_days
        - started_at
        - ended_at
        - travel_classes
        - hotel_is_breakfast_provided
        - locations
        - custom_fields
        - code
        - state
        - state_display_name
        - seq_num
        - report_id
        - added_to_report_at
        - report
        - is_verified
        - last_verified_at
        - is_receipt_mandatory
        - is_exported
        - last_exported_at
        - file_ids
        - files
        - employee
        - is_corporate_card_transaction_auto_matched
        - matched_corporate_card_transaction_ids
        - matched_corporate_card_transactions
        - last_settled_at
        - missing_mandatory_fields
        - activity_details
        - creator_user_id
        - extracted_data
        - is_manually_flagged
        - is_policy_flagged
        - split_group_id
        - is_physical_bill_submitted
        - physical_bill_submitted_at
        - invoice_number
        - is_duplicate_present
        - expense_policy_comments
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: txwownwrng
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was made.
            This date cannot be in future.
        source:
          type: string
          description: |
            The name of the client app which is creating the expense.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: SLACK_APP
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Uber
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          type: number
          nullable: true
          description: |
            The amount for which the expense was/will-be fyled.
            The amount will be in the currency that the organization's home currency.<br>

            Note that, this field is calculated from admin_amount, policy_amount, claim_amount.

            if admin_amount is present then this value will be same admin_amount.
            if policy_amount is present then this value will be same policy_amount.
            else this should be same as claim_amount.
          example: 1500
        claim_amount:
          type: number
          nullable: true
          description: |
            The expense amount as claimed by user.
          example: 1984.18
        policy_amount:
          type: number
          nullable: true
          description: |
            The expense amount set by policy.
          example: 1500
        admin_amount:
          type: number
          nullable: true
          description: |
            The expense amount which is modified by admin or approver.
            This could be null if admin or approver has not edited your expense.
          example: null
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        cost_center:
          $ref: '#/components/schemas/cost_center_out_embed'
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        category:
          $ref: '#/components/schemas/category_out_embed'
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        project:
          $ref: '#/components/schemas/project_out_embed'
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advwrlAGwjr2
        source_account:
          $ref: '#/components/schemas/account_out_embed'
        tax_amount:
          type: number
          nullable: true
          description: |
            Tax amount as setup by your organization.
            - _Note:_
              - Tax amount cannot be greater than the expense amount.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        is_billable:
          type: boolean
          nullable: true
          example: true
          description: This fields marks whether a given expense is billable a not.
        is_reimbursable:
          type: boolean
          description: This fields marks whether a given expense is reimbursable a not.
          example: true
        distance:
          type: number
          nullable: true
          description: Actual distance travelled by employee in travel related expenses.
        distance_unit:
          type: string
          nullable: true
          description: Unit of distance travelled.
          enum:
            - KM
            - MILES
            - null
          example: MILES
        mileage_calculated_distance:
          type: number
          nullable: true
          description: Distance computed by Fyle in mileage expenses.
        mileage_calculated_amount:
          type: number
          nullable: true
          description: Amount computed by Fyle in mileage expenses.
        mileage_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 9080
        mileage_rate:
          $ref: '#/components/schemas/mileage_rate_out_embed_for_expense'
        mileage_is_round_trip:
          type: boolean
          nullable: true
          description: Flag stating whether this was a round trip or not.
        per_diem_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 583
        per_diem_rate:
          $ref: '#/components/schemas/per_diem_rate_out_embed'
        per_diem_num_days:
          type: number
          nullable: true
          description: |
            Specific to per diem related expenses, number of days for which per diem claim is made.
          example: 2
        started_at:
          $ref: '#/components/schemas/timestamptz_utc'
        ended_at:
          $ref: '#/components/schemas/timestamptz_utc'
        travel_classes:
          description: |
            This field is applicable only for `Flight`, `Train`, `Bus`, `Taxi` category.
            index 0 holds onward journey class, index 1 holds return journey travel class.
          type: array
          minItems: 0
          maxItems: 2
          items:
            type: string
          example:
            - ECONOMY
            - BUSINESS
        hotel_is_breakfast_provided:
          type: boolean
          nullable: true
          description: |
            This field is applicable for only `Hotel` category.
        locations:
          description: |
            This field will be present for travel related categories.
            For travel between Place A to Place B, this array will contain two items, From location at array index 0 and To location at array index 1.
            For travel between Place A to Place c and stopping at Place B, this
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: '#/components/schemas/location'
        custom_fields:
          $ref: '#/components/schemas/expense_custom_fields'
        custom_fields_flattened:
          $ref: '#/components/schemas/flattened_custom_field'
        code:
          type: string
          nullable: true
          description: |
            Id given by external systems like Gmail. To identify whether that entity
            has been already added to Fyle or not.
          example: wgjwgo3ihwljnlsww
        state:
          type: string
          enum:
            - COMPLETE
            - DRAFT
            - PAID
            - PAYMENT_PROCESSING
            - APPROVER_PENDING
            - PAYMENT_PENDING
            - APPROVED
            - UNREPORTABLE
          description: The state of the Expense.
        state_display_name:
          type: string
          example: Sent Back
          description: readable state name
        seq_num:
          type: string
          readOnly: true
          description: |
            This is user visible identifier for an expense.
            This field can be used as reference in UI.
          example: E/2020/10/T/95
        report_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          description: |
            Unique id given by Fyle to identify an Expense Report.
          example: rpvgnwlgw34
        added_to_report_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was added to a report.
            If this expense is not added to a report, then this could be null.
        report:
          $ref: '#/components/schemas/report_out_embed'
        is_verified:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been verified by a verifier.
        last_verified_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was verified.
        is_receipt_mandatory:
          type: boolean
          nullable: true
          description: |
            Determines whether a receipt is missing for this expense when it is required.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been exported to external accounting system or not.
        last_exported_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: signifies when this expense was exported to an external accounting system.
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - figwiwpjww
        files:
          type: array
          items:
            $ref: '#/components/schemas/file_out_embed'
        expense_policy_comments:
          type: array
          items:
            $ref: '#/components/schemas/expense_policy_comment_out_embed'
          description: |
            List of expense policy comment objects
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        verifications:
          type: array
          items:
            $ref: '#/components/schemas/expense_verification_out_embed'
          description: |
            List of verification objects
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          nullable: true
          $ref: '#/components/schemas/employee_out_embed_for_expense'
        is_corporate_card_transaction_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this corporate card transaction is auto_matched.
        matched_corporate_card_transaction_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the corporate card transaction ids which are matched to this expense
          example:
            - btxnwownwrng
        matched_corporate_card_transactions:
          type: array
          items:
            $ref: '#/components/schemas/matched_corporate_card_transaction_out_embed'
          description: |
            Holds the corporate card transactions which are matched to this expense.
            NOTE: The data of this field is not realtime. It will get updated later even if `matched_corporate_card_transaction_ids` is already up-to-date.
        last_settled_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last settled.
        missing_mandatory_fields:
          $ref: '#/components/schemas/missing_mandatory_fields'
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        activity_details:
          $ref: '#/components/schemas/activity_details'
        extracted_data:
          $ref: '#/components/schemas/extracted_data'
        is_manually_flagged:
          type: boolean
          nullable: true
          description: This fields marks whether a given expense is manually flagged or not.
          example: true
        is_policy_flagged:
          type: boolean
          nullable: true
          description: This fields marks whether a given expense is flagged by policy or not.
          example: true
        split_group_id:
          type: string
          nullable: true
          maxLength: 15
          description: |
            This id provided by Fyle to identify an object.
          example: txwownwrngx
        split_group_amount:
          $ref: '#/components/schemas/split_group_amount'
        is_physical_bill_submitted:
          type: boolean
          nullable: true
          description: |
            This fields marks if physical has been collected for the given expense.
          example: true
        physical_bill_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when the physical bill for this report was submitted.
          nullable: true
        expense_rule_id:
          type: string
          nullable: true
          maxLength: 15
          description: |
            This id is provided by Fyle to identify an Expense Rule.
          example: ervgnwlgw34
        expense_rule_data:
          $ref: '#/components/schemas/expense_rule_data_in'
        is_split:
          type: boolean
          nullable: true
          description: |
            Whether the expense is split.
          example: true
        tax_group:
          $ref: '#/components/schemas/tax_group'
        approver_comments:
          type: array
          description: |
            Comments added by approvers.
            NOTE: The data of this field is not realtime. It will get updated later even if rest of fields are already up-to-date.
          items:
            type: string
          example:
            - This is a comment by approver
        verifier_comments:
          type: array
          description: |
            Comments added by verifiers.
            NOTE: The data of this field is not realtime. It will get updated later even if rest of fields are already up-to-date.
          items:
            type: string
          example:
            - This is a comment by verifier
        policy_checks:
          $ref: '#/components/schemas/policy_checks'
        accounting_export_summary:
          type: object
          description: |
            Summary of accounting export for this expense.
          properties:
            state:
              type: string
              enum:
                - COMPLETE
                - ERROR
                - IN_PROGRESS
                - SKIPPED
                - INITIATED
              example: COMPLETE
            error_type:
              type: string
              nullable: true
              enum:
                - ACCOUNTING_INTEGRATION_ERROR
                - MAPPING
                - null
              example: ACCOUNTING_INTEGRATION_ERROR
            url:
              type: string
              description: URL Endpoint for exported / failed expense
              example: https://app.example.com/expense/txwownwrng
            tpa_id:
              type: string
              nullable: false
              description: |
                Third party app id.
              example: tpa_1234567890
        report_last_paid_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when report of this expense was reimbursed.
        report_last_approved_at:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when report of this expense was approved.
        invoice_number:
          type: string
          nullable: true
          maxLength: 255
          description: |
            Invoice number of the expense.
          example: 123456
        commute_deduction:
          type: string
          nullable: true
          maxLength: 12
          description: |
            Commute deduction type of the expense.
          example: ONE_WAY
          enum:
            - ONE_WAY
            - ROUND_TRIP
            - NO_DEDUCTION
            - null
        commute_details_id:
          type: integer
          nullable: true
          description: |
            Commute details id of the expense. This id is provided by Fyle to identify a commute details.
          example: 1234
        commute_details:
          $ref: '#/components/schemas/commute_details'
        is_duplicate_present:
          type: boolean
          nullable: false
          description: |
            Whether duplicate expenses is detected for this expense or not.
          example: true
    source:
      type: string
      description: |
        This value signifies the client from which this expense was created
      example: SLACK
    is_reimbursable:
      type: boolean
      nullable: true
      description: This field marks whether a given expense is reimbursable or not.
      example: true
    distance:
      type: number
      nullable: true
      description: Actual distance travelled by employee in travel related expenses.
    distance_unit:
      type: string
      nullable: true
      description: Unit of distance travelled.
      enum:
        - KM
        - MILES
      example: MILES
    travel_classes:
      description: |
        This field is applicable only for `Flight`, `Train`, `Bus` category.
        Index 0 holds onward journey travel class, index 1 holds return journey travel class.
      type: array
      minItems: 0
      maxItems: 2
      nullable: true
      items:
        type: string
      example:
        - ECONOMY
        - BUSINESS
    locations:
      description: |
        This field will be present for travel related categories.
        For travel between Place A to Place B, this array will contain two items. From location at array index i and To location at array index i+1.
      type: array
      nullable: true
      minItems: 0
      maxItems: 10
      items:
        type: object
        nullable: true
        properties:
          city:
            type: string
            nullable: true
            example: London
          state:
            type: string
            nullable: true
            example: London
          display:
            type: string
            nullable: true
          country:
            type: string
            nullable: true
            example: United Kingdom
          formatted_address:
            type: string
            nullable: true
            example: 221 Baker St, Marylebone, London, United Kingdom
          latitude:
            type: number
            nullable: true
            example: 12.971599
          longitude:
            type: number
            nullable: true
            example: 77.594566
    admin_expense_in:
      type: object
      additionalProperties: false
      anyOf:
        - required:
            - admin_amount
            - assignee_user_email
        - required:
            - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This id is provided by Fyle to identify an object
            - When `id` is sent, default action is to update the expense
        admin_amount:
          type: number
          nullable: false
          description: |
            The expense amount which is added or modified by admin or approver.
            - **Note:**
              - This field is required while creating an expense.
              - _Not required when updating an expense, but is non-nullable_. 
          example: 1900
        spent_at:
          type: string
          format: date-time
          nullable: true
          description: |
            It signifies when this expense was made.
            This date cannot be in future.
            - **Note:**
              - This field is required while creating an expense.
              - _Not required when updating an expense, but is non-nullable_. 
          example: '2020-06-01T01:18:19.292-08:00'
        assignee_user_email:
          allOf:
            - $ref: '#/components/schemas/email'
          description: |
            An immutable field that represents the email address of the employee.
            Must be compliant with <a href='https://www.ietf.org/rfc/rfc822.txt'>RFC
            822.</a>
            - **Note:**
              - The expense will be assigned/re-assigned to this particular `employee`. 
              - This field is required while creating an expense.
              - _Not required when updating an expense, but is non-nullable_. 
              - Admins can't assign the expense to self.
        source:
          $ref: '#/components/schemas/source'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          $ref: '#/components/schemas/merchant'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        purpose:
          type: string
          example: Team lunch
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advwrlAGwjr2
        tax_amount:
          type: number
          nullable: true
          description: |
            Tax amount as setup by your organization.
            - _Note:_
              - Tax amount cannot be greater than the expense amount.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        is_billable:
          $ref: '#/components/schemas/is_billable'
        is_reimbursable:
          $ref: '#/components/schemas/is_reimbursable'
        distance:
          $ref: '#/components/schemas/distance'
        distance_unit:
          $ref: '#/components/schemas/distance_unit'
        started_at:
          $ref: '#/components/schemas/timestamptz_pst'
        ended_at:
          $ref: '#/components/schemas/timestamptz_pst'
        travel_classes:
          $ref: '#/components/schemas/travel_classes'
        locations:
          $ref: '#/components/schemas/locations'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        file_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/fk_string'
          description: |
            List of file ids to attach to the expense. <br>
            To add new files to the expense, send the list of file ids to be attached. <br>
            To remove files from the expense, send the list of all file ids except which you want to remove. <br>
        hotel_is_breakfast_provided:
          type: boolean
          nullable: true
          description: |
            This field is applicable for only `Hotel` category.
        mileage_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          description: |
            Specific to mileage expense. This represents the Mileage's rate id given by Fyle
            during creation of mileage rate for which this expense is created.
          nullable: true
          example: 9080
        mileage_is_round_trip:
          type: boolean
          nullable: true
          description: Flag stating whether this was a round trip or not.
        mileage_calculated_distance:
          type: number
          nullable: true
          description: Distance computed by Fyle in mileage expenses.
        mileage_calculated_amount:
          type: number
          nullable: true
          description: Amount computed by Fyle in mileage expenses.
        commute_details_id:
          type: integer
          nullable: true
          description: |
            Commute details id of the expense. This id is provided by Fyle to identify a commute details.
          example: 1234
        commute_deduction:
          type: string
          nullable: true
          maxLength: 12
          description: |
            Commute deduction type of the expense.
          example: ONE_WAY
          enum:
            - ONE_WAY
            - ROUND_TRIP
            - NO_DEDUCTION
            - null
        per_diem_rate_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 583
          description: |
            Specific to per diem expense. This represents the per diem's rate id given by Fyle
            during creation of per diem rate for which this expense is created. <br>
            This field is required for creating Per Diem Expenses.
        per_diem_num_days:
          type: number
          nullable: true
          example: 2
          description: |
            Specific to per diem related expenses, number of days for which per diem claim is made. <br>
            This field is required for creating Per Diem Expenses.
    attach_files_to_expense_in:
      type: object
      required:
        - id
        - file_ids
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: txsjfwlrglw
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - figwiwpjww
          description: List of files to be attached to the expense
    accounting_export_summary_in:
      type: object
      required:
        - id
        - state
        - error_type
        - url
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        state:
          type: string
          enum:
            - COMPLETE
            - ERROR
            - IN_PROGRESS
            - SKIPPED
            - INITIATED
          example: COMPLETE
        error_type:
          type: string
          nullable: true
          enum:
            - ACCOUNTING_INTEGRATION_ERROR
            - MAPPING
            - null
          example: ACCOUNTING_INTEGRATION_ERROR
        url:
          type: string
          description: URL Endpoint for exported / failed expense
          example: https://app.example.com/expense/txwownwrng
    sub_feature:
      type: string
      description: |
        This field can be used to setup a collection of filters. For example, if you have multiple filters
        for a single page, this can be used as an identifier to fetch all the filters for that page. <br>
        **Note: Only combination of alphabets, numbers and _(underscore) is allowed**
      nullable: true
      example: flagged_expenses
    expense_filters_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: exfilumWHrlPf7K
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_string:
          $ref: '#/components/schemas/query_string'
        sub_feature:
          $ref: '#/components/schemas/sub_feature'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    expense_filters_in:
      type: object
      additionalProperties: false
      required:
        - name
        - query_string
      properties:
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        query_string:
          $ref: '#/components/schemas/query_string'
        sub_feature:
          $ref: '#/components/schemas/sub_feature'
    expense_filters_delete_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: exfilumWHrlPf7K
    expenses_verify_bulk_in:
      type: object
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            Expense ID of the expense to be verified.
          example: tx0agOdICdbV
    expenses_stats_in:
      properties:
        query_params:
          nullable: false
          type: string
          description: |
            Query param string similar to expenses GET call. Use group_by_state=eq.true to get state-wise grouping of stats.
          example: id=in.('tx1263', 'tx1569')&group_by_state=eq.true
    expenses_stats_out:
      oneOf:
        - type: array
          title: State-wise grouped stats
          description: Stats grouped by expense state
          items:
            type: object
            required:
              - count
              - total_amount
              - state
            properties:
              count:
                type: integer
                nullable: false
                description: Number of matching expenses in this state
                example: 10
              total_amount:
                type: number
                nullable: false
                description: Sum of amounts for matching expenses in this state
                example: 44545.4
              state:
                type: string
                enum:
                  - COMPLETE
                  - DRAFT
                  - APPROVER_PENDING
                  - APPROVED
                  - PAYMENT_PENDING
                  - PAYMENT_PROCESSING
                  - PAID
                  - UNREPORTABLE
                description: Expense state
        - type: object
          title: Overall stats
          description: Overall stats without state grouping
          required:
            - count
            - total_amount
          properties:
            count:
              type: integer
              nullable: false
              description: Total number of matching expenses
              example: 353
            total_amount:
              type: number
              nullable: false
              description: Sum of amounts for all matching expenses
              example: 45882.4
      example:
        - state: COMPLETE
          count: 343
          total_amount: 1337
        - state: DRAFT
          count: 10
          total_amount: 44545.4
        - state: PAID
          count: 0
          total_amount: 0
        - state: PAYMENT_PROCESSING
          count: 0
          total_amount: 0
        - state: APPROVER_PENDING
          count: 0
          total_amount: 0
        - state: PAYMENT_PENDING
          count: 0
          total_amount: 0
        - state: APPROVED
          count: 0
          total_amount: 0
        - state: UNREPORTABLE
          count: 0
          total_amount: 0
    query_params:
      type: string
      description: |
        This field contains the query param string similar to the query params passed in GET call for displaying data in the list view.
      example: state=eq.PAID
    expenses_export_config_column_formula:
      type: object
      properties:
        function:
          type: string
          example: parse-format-time
        parameters:
          type: array
          items:
            anyOf:
              - type: object
              - type: string
              - type: number
              - type: integer
              - type: boolean
          example:
            - function: field
              parameters:
                - spent_at
            - yyyy-MM-dd'T'HH:mm:ss
            - dd-MM-yyyy
            - error in date formatting
      description: |
        Export column formula is a expression that is used to transform the data. Refer https://www.fylehq.com/help/en/articles/4422306-advanced-export-formulas for more details.
    expenses_export_config:
      type: object
      additionalProperties: true
      properties:
        type:
          type: string
          enum:
            - xlsx
            - csv
          description: |
            Type of the export file.
          example: csv
        is_header_visible:
          type: boolean
          description: |
            Whether to show the header in the export file.
          example: true
        separate_line_items_entry:
          type: object
          properties:
            enabled:
              type: boolean
              description: |
                Whether to show the double rows for each line item in the export file.
              example: false
            debit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for debit entries.
              example:
                - debit_amount
            credit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for credit entries.
              example:
                - credit_amount
          description: |
            Configure how to show the double rows for each line item in the export file, if enabled.
        columns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: |
                  Name of the column.
                example: Spent Date
              formula:
                allOf:
                  - $ref: '#/components/schemas/expenses_export_config_column_formula'
                description: |
                  Formula to transform the data in the column.
          description: |
            Configure the columns to show in the export file.
    expenses_exports_in:
      type: object
      additionalProperties: false
      required:
        - query_params
        - notify_emails
        - config
      properties:
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
          description: |
            List of emails to notify when the export is ready.
        config:
          allOf:
            - $ref: '#/components/schemas/expenses_export_config'
          nullable: false
          description: |
            Configuration for the export.
    expenses_exports_out:
      type: object
      additionalProperties: false
      properties:
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: eefilumWHrlPf7K
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
        config:
          allOf:
            - $ref: '#/components/schemas/expenses_export_config'
          nullable: false
        file_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          example: filumWHrlPf7K
        state:
          type: string
          nullable: false
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          description: |
            Status of the export.
          example: PENDING
    expense_permissions_in:
      type: object
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            Expense ID of the expense to check permissions for.
          example: tx0agOdICdbV
    expense_permissions_out:
      type: object
      required:
        - can_delete
        - can_edit
        - can_verify
        - can_remove_from_report
        - can_assign
        - can_add_to_report
      properties:
        can_delete:
          type: boolean
          description: |
            Indicates whether the user has permission to delete this expense.
          example: false
        can_edit:
          type: boolean
          description: |
            Indicates whether the user has permission to edit this expense.
          example: true
        can_verify:
          type: boolean
          description: |
            Indicates whether the user has permission to verify this expense.
          example: true
        can_remove_from_report:
          type: boolean
          description: |
            Indicates whether the user has permission to remove this expense from a report.
          example: false
        can_assign:
          type: boolean
          description: |
            Indicates whether the user has permission to assign this expense to another user.
          example: false
        can_add_to_report:
          type: boolean
          description: |
            Indicates whether the user has permission to add this expense to a report.
          example: true
    target_expense_fields:
      type: object
      additionalProperties: false
      properties:
        amount:
          type: number
          description: The amount for which the expense was/will-be filed.
          example: 1500
          nullable: false
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        tax_amount:
          type: number
          nullable: true
          description: Tax amount as setup by your organization.
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_pst'
          nullable: true
          description: Date on which the expense was made. This date cannot be in future.
        purpose:
          type: string
          nullable: true
          example: Team lunch
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: acwbl222wlg
        is_billable:
          $ref: '#/components/schemas/is_billable'
        is_reimbursable:
          allOf:
            - $ref: '#/components/schemas/is_reimbursable'
          nullable: false
        merchant:
          $ref: '#/components/schemas/merchant'
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          description: |
            This represents the category's id given by Fyle during creation of category
            for which this expense is created.
            Null is not allowed for category_id field instead pass Unspecified category Id
          example: 49058
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        distance:
          $ref: '#/components/schemas/distance'
        distance_unit:
          $ref: '#/components/schemas/distance_unit'
        started_at:
          $ref: '#/components/schemas/timestamptz_pst'
        ended_at:
          $ref: '#/components/schemas/timestamptz_pst'
        hotel_is_breakfast_provided:
          type: boolean
          nullable: true
          description: |
            This field is applicable for only `Hotel` category.
        travel_classes:
          $ref: '#/components/schemas/travel_classes'
        locations:
          $ref: '#/components/schemas/locations'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/fk_string'
          example:
            - figwiwpjww
    expenses_merge_in:
      type: object
      additionalProperties: false
      required:
        - target_expense_id
        - source_expense_ids
        - target_expense_fields
      properties:
        target_expense_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: tx0agOdICdbV
          nullable: false
        source_expense_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - tx0agOdICdbV
            - tx0agOdBCdbV
          description: |
            List of source expense IDs to merge into the target expense.
        target_expense_fields:
          allOf:
            - $ref: '#/components/schemas/target_expense_fields'
          nullable: false
          description: |
            Fields to be updated in the target expense.
    advance_out_embed:
      type: object
      nullable: true
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id provided by Fyle to uniquely identify an advances.
            This id is always prefixed with `adv`.
          readOnly: true
          example: advkvnwrnpwi
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        advance_request_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advjrgwlk2Q
        seq_num:
          type: string
          description: |
            This is user visible identifier for an advances.
            This field can be used as reference in UI.
          example: A/2020/10/T/95
    advance_request_custom_field:
      type: object
      description: |
        Advance request custom field
      properties:
        name:
          type: string
          example: cf1
        value:
          nullable: true
          oneOf:
            - type: string
              example: string1
            - type: boolean
              example: true
            - type: integer
              example: 123
            - $ref: '#/components/schemas/location'
            - type: array
              items:
                type: string
              example:
                - v1
                - v2
        type:
          type: string
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - BOOLEAN
            - MULTI_SELECT
            - LOCATION
            - USER_LIST
            - DATE
          description: |
            This field specifies the type of the custom field.
          example: SELECT
        id:
          type: integer
          description: ID of the custom field
          example: 123
    advance_request_custom_fields:
      type: array
      description: |
        Advance request custom fields
      items:
        $ref: '#/components/schemas/advance_request_custom_field'
    advance_request_approval_out_embed:
      type: object
      additionalProperties: false
      properties:
        approver_user_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: usge49ielgel
        approver_user:
          $ref: '#/components/schemas/user_out_embed'
        state:
          type: string
          enum:
            - APPROVAL_PENDING
            - APPROVAL_DISABLED
            - APPROVAL_DONE
            - APPROVAL_REJECTED
          description: |
            State of this advance request approval
    employee_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        org_id:
          $ref: '#/components/schemas/org_id'
        department_id:
          nullable: true
          $ref: '#/components/schemas/department_id'
        department:
          nullable: true
          $ref: '#/components/schemas/department_out_embed'
    user_id_nullable:
      type: string
      description: |
        The unique id of an user to which the object is associated.
      readOnly: true
      nullable: true
      example: uswjwgnwwgo
    advance_request_comments_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        comment:
          type: string
          description: A comment on the advance request
          example: Advance request was created
        action:
          type: string
          description: Advance request action for which comment is added.
          example: SUBMITTED
        advance_request_id:
          $ref: '#/components/schemas/id_string'
        creator_type:
          type: string
          description: Describes whether the comment is system-generated or User made.
          enum:
            - SYSTEM
            - POLICY
            - USER
          example: USER
        creator_user_id:
          $ref: '#/components/schemas/user_id_nullable'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        org_id:
          $ref: '#/components/schemas/org_id'
    advance_request_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: areqiwr3Wwirr
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        advance_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advjrgwlk2Q
        advance:
          $ref: '#/components/schemas/advance_out_embed'
        seq_num:
          type: string
          description: |
            This is user visible identifier for an advance request.
            This field can be used as reference in UI.
          example: AR/2020/10/T/95
        code:
          $ref: '#/components/schemas/code'
        notes:
          type: string
          nullable: true
          description: |
            Optional descriptive notes which can be added to an advance request.
          example: onsite client meeting
        purpose:
          type: string
          nullable: true
          description: |
            Descriptive purpose which is added to an advance request.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        state:
          type: string
          enum:
            - DRAFT
            - APPROVAL_PENDING
            - APPROVED
            - SENT_BACK
            - PULLED_BACK
            - REJECTED
            - PAID
          description: |
            State of the advance request.
          example: PAID
        project_id:
          $ref: '#/components/schemas/fk_integer'
        project:
          $ref: '#/components/schemas/project_out_embed'
        custom_fields:
          $ref: '#/components/schemas/advance_request_custom_fields'
        last_approved_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies if and when this advance request was approved.
          nullable: true
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/advance_request_approval_out_embed'
          description: |
            List of advance request approval objects
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this advance request has been exported to external accounting system or not.
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/advance_request_comments_out'
          description: |
            List of comments in the advance request
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - figwiwpjww
        files:
          type: array
          items:
            $ref: '#/components/schemas/file_out_embed'
    advance_request_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: areqiwr3Wwirr
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        code:
          $ref: '#/components/schemas/code'
        notes:
          type: string
          nullable: true
          description: |
            Optional descriptive notes which can be added to an advance request.
          example: onsite client meeting
        purpose:
          type: string
          nullable: true
          description: |
            Descriptive purpose which is added to an advance request.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        project_id:
          $ref: '#/components/schemas/fk_integer'
        custom_fields:
          $ref: '#/components/schemas/advance_request_custom_fields'
    advance_requests_stats_in:
      properties:
        query_params:
          description: |
            Query param string similar to advance_requests GET call. Use group_by_state=eq.true to get state-wise grouping of stats.
          nullable: false
          example: id=in.('adr1263','adr1569')&group_by_state=eq.true
    advance_requests_stats_out:
      oneOf:
        - type: array
          title: State-wise grouped stats
          description: Stats grouped by advance request state
          items:
            type: object
            required:
              - count
              - total_amount
              - state
            properties:
              count:
                type: integer
                nullable: false
                description: Number of matching advance requests in this state.
                example: 10
              total_amount:
                type: number
                nullable: false
                description: Sum of amounts for matching advance requests in this state.
                example: 44545.4
              state:
                type: string
                enum:
                  - DRAFT
                  - APPROVAL_PENDING
                  - APPROVED
                  - CANCELLED
                  - REJECTED
                  - PAID
                  - PULLED_BACK
                  - SENT_BACK
                description: Advance request state.
        - type: object
          title: Overall stats
          description: Overall stats without state grouping.
          required:
            - count
            - total_amount
          properties:
            count:
              type: integer
              nullable: false
              description: Total number of matching advance requests.
              example: 353
            total_amount:
              type: number
              nullable: false
              description: Sum of amounts for all matching advance requests.
              example: 45882.4
      example:
        - state: DRAFT
          count: 10
          total_amount: 44545.4
        - state: APPROVAL_PENDING
          count: 0
          total_amount: 0
        - state: APPROVED
          count: 343
          total_amount: 1337
        - state: CANCELLED
          count: 0
          total_amount: 0
        - state: SENT_BACK
          count: 0
          total_amount: 0
        - state: PULLED_BACK
          count: 0
          total_amount: 0
        - state: REJECTED
          count: 0
          total_amount: 0
        - state: PAID
          count: 0
          total_amount: 0
    advance_request_permissions_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: id of the advance request
          example: areqiwr3Wwirr
    advance_request_permissions_out:
      type: object
      additionalProperties: false
      properties:
        can_save:
          type: boolean
          description: Whether the user can save changes to this advance request
          example: true
        can_submit:
          type: boolean
          description: Whether the user can submit this advance request for approval
          example: false
        can_edit:
          type: boolean
          description: Whether the user can edit this advance request
          example: true
        can_add_approver:
          type: boolean
          description: Whether the user can add an approver to this advance request
          example: false
        can_disable_approver:
          type: boolean
          description: Whether the user can disable an approver for this advance request
          example: false
        can_reject:
          type: boolean
          description: Whether the user can reject this advance request
          example: false
        can_approve:
          type: boolean
          description: Whether the user can approve this advance request
          example: true
        can_inquire:
          type: boolean
          description: Whether the user can inquire about this advance request
          example: false
        can_pull_back:
          type: boolean
          description: Whether the user can pull back this advance request
          example: false
        can_pay:
          type: boolean
          description: Whether the user can mark this advance request as paid
          example: false
        can_delete:
          type: boolean
          description: Whether the user can delete this advance request
          example: true
    advance_request_comments_in:
      type: object
      additionalProperties: false
      required:
        - advance_request_id
        - comment
      properties:
        advance_request_id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to add comment to
          example: areq5F9xIaMURI
        comment:
          type: string
          description: Comment text to be added to the advance request
          example: test
    advance_request_remove_approver_in:
      type: object
      additionalProperties: false
      required:
        - id
        - approver_email
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to remove approver from
          example: areq5F9xIaMURI
        approver_email:
          $ref: '#/components/schemas/email'
          description: Email address of the approver to be removed
          example: approver@example.com
    advance_request_out_embed:
      type: object
      nullable: true
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id provided by Fyle to uniquely identify an advance requests.
            This id is always prefixed with `adr`.
          readOnly: true
          example: adrkvnwrnpwi
        last_approved_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies if and when this advance request was approved.
          nullable: true
        seq_num:
          type: string
          description: |
            This is user visible identifier for an advance request.
            This field can be used as reference in UI.
          example: AR/2020/10/T/95
    advance_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: advwrlAGwjr2
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        payment_mode:
          type: string
          enum:
            - CARD
            - BANK_TRANSFER
            - CHEQUE_DD
            - FOREX
            - CASH
          example: CASH
        advance_request_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advjrgwlk2Q
        advance_request:
          $ref: '#/components/schemas/advance_request_out_embed'
        advance_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: accwiofowiww
          deprecated: true
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: awfgRr8YA6KK
        seq_num:
          type: string
          description: |
            This is user visible identifier for an advances.
            This field can be used as reference in UI.
          example: A/2020/10/T/95
        purpose:
          type: string
          nullable: true
          description: |
            Descriptive purpose which is added to an advance.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        project_id:
          $ref: '#/components/schemas/fk_integer'
        project:
          $ref: '#/components/schemas/project_out_embed'
        code:
          $ref: '#/components/schemas/code'
        issued_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies if and when this advance was issued.
          nullable: true
        card_number:
          type: string
          nullable: true
          example: XXXXXXXXXXXX1234
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this advance has been exported to external accounting system or not.
        last_exported_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: signifies when this advance was exported to an external accounting system.
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
    advance_in:
      type: object
      required:
        - user_id
        - currency
        - amount
        - payment_mode
      properties:
        user_id:
          type: string
          description: |
            The unique id of an user to which the object is associated.
          example: uswjwgnwwgo
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        payment_mode:
          type: string
          enum:
            - BANK_TRANSFER
            - CHEQUE_DD
            - FOREX
            - CASH
          example: CASH
        advance_request_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advjrgwlk2Q
        advance_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          deprecated: true
          example: accwiofowiww
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: awfgRr8YA6KK
        purpose:
          type: string
          nullable: true
          description: |
            Descriptive purpose which is added to an advances.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        project_id:
          $ref: '#/components/schemas/fk_integer'
        code:
          $ref: '#/components/schemas/code'
        card_number:
          type: string
          nullable: true
          example: XXXXXXXXXXXX1234
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
    advances_stats_in:
      properties:
        query_params:
          type: string
          description: |
            This field contains the query param string similar to the query params passed in advances GET call for displaying advances in the list view.
          nullable: false
          example: id=in.('adv1263', 'adv1569')
    advances_stats_out:
      type: object
      properties:
        count:
          type: integer
          description: |
            This field represents the total number of advances that match the criteria specified in the query_params within the body of the request.
          nullable: false
          example: 1
        total_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the sum of amount of advances that match the criteria specified in the query_params within the body of the request.
          example: 100
    advance_wallet_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: advwrlAGwjr2
        user_id:
          $ref: '#/components/schemas/user_id'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        currency:
          $ref: '#/components/schemas/currency'
        balance_amount:
          $ref: '#/components/schemas/amount'
    advance_wallet_in:
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string
          description: |
            The unique id of an user to which the object is associated.
          example: uswjwgnwwgo
    advance_refund_out:
      type: object
      additionalProperties: false
      properties:
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: advwrlAGwjr2
        user_id:
          $ref: '#/components/schemas/user_id'
        org_id:
          $ref: '#/components/schemas/org_id'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed'
        collector_user_id:
          $ref: '#/components/schemas/user_id'
        refunded_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies if and when this advance refund was completed.
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        foreign_currency:
          allOf:
            - $ref: '#/components/schemas/foreign_currency'
          nullable: true
        foreign_amount:
          allOf:
            - $ref: '#/components/schemas/foreign_amount'
          nullable: true
        payment_mode:
          type: string
          enum:
            - CARD
            - BANK_TRANSFER
            - CHEQUE_DD
            - FOREX
            - CASH
          example: CASH
        code:
          allOf:
            - $ref: '#/components/schemas/code'
          nullable: true
        notes:
          type: string
          nullable: true
          description: |
            Optional descriptive notes which can be added to an advance refund.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance refund was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        card_number:
          type: string
          nullable: true
          example: XXXXXXXXXXXX1234
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: awfgRr8YA6KK
    advance_refund_in:
      type: object
      required:
        - currency
        - amount
        - payment_mode
        - advance_wallet_id
      properties:
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        foreign_currency:
          allOf:
            - $ref: '#/components/schemas/foreign_currency'
          nullable: true
        foreign_amount:
          allOf:
            - $ref: '#/components/schemas/foreign_amount'
          nullable: true
        payment_mode:
          type: string
          enum:
            - CARD
            - BANK_TRANSFER
            - CHEQUE_DD
            - FOREX
            - CASH
          example: CASH
        code:
          allOf:
            - $ref: '#/components/schemas/code'
          nullable: true
        notes:
          type: string
          nullable: true
          description: |
            Optional descriptive notes which can be added to an advance refund.
          example: onsite client meeting
        source:
          type: string
          nullable: true
          description: |
            The name of the client app from which this advance refund was created.
            if its a thrid party app, it prefixed with TPA_.
            Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
            passed, source is saved as TPA.
          example: WEBAPP
        card_number:
          type: string
          nullable: true
          example: XXXXXXXXXXXX1234
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: awfgRr8YA6KK
    advance_refunds_stats_in:
      properties:
        query_params:
          type: string
          description: |
            This field contains the query param string similar to the query params passed in advance_refunds GET call for displaying advance_refunds in the list view.
          nullable: false
          example: id=in.('adr1263', 'adr1569')
    advance_refunds_stats_out:
      type: object
      properties:
        count:
          type: integer
          description: |
            This field represents the total number of advance_refunds that match the criteria specified in the query_params within the body of the refund.
          nullable: false
          example: 1
        total_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the sum of amount of advance_refunds that match the criteria specified in the query_params within the body of the refund.
          example: 100
    reminder_type:
      type: string
      enum:
        - FYLE_EXPENSES
        - REPORT_EXPENSES
        - APPROVE_REPORTS
        - VERIFY_EMPLOYEES
        - MATCH_CORPORATE_CARD_TRANSACTIONS
        - APPROVE_ADVANCE_REQUESTS
        - RESUBMIT_ADVANCE_REQUESTS
        - MATCH_ADVANCES
        - VERIFY_EMPLOYEES
        - ADD_CORPORATE_CARDS
        - CONNECT_VISA_RTF
        - VERIFY_VISA_CARD
        - CONNECT_MASTERCARD_RTF
        - PROCESS_REPORTS
        - VERIFY_REPORTS
      maxLength: 255
      description: Represents the type of reminder.
      example: FYLE_EXPENSES
    reminder_schedule_config:
      description: description of weekly/monthly schedule for sending scheduled reminder
      type: object
      nullable: true
      properties:
        type:
          nullable: false
          type: string
          example: cron
          enum:
            - cron
        when:
          type: object
          additionalProperties: false
          properties:
            year:
              type: string
              example: '*'
              description: cron expression (string, e.g. "*" for every year)
            month:
              oneOf:
                - type: number
                  example: 1
                  description: Month of the year (number, e.g. 1)
                - type: string
                  example: '*/2'
                  description: cron expression (e.g. '*/2' for every alternate month)
            day:
              oneOf:
                - type: number
                  example: 15
                  description: Day of month (number, e.g. 15)
                - type: string
                  example: last
                  description: cron expression (string, e.g. "last")
            day_of_week:
              oneOf:
                - type: string
                  enum:
                    - mon
                    - tue
                    - wed
                    - thu
                    - fri
                    - sat
                    - sun
                  example: mon
                  description: Single weekday name (e.g. "mon")
                - type: string
                  pattern: ^[1-7](?:,[1-7])*$
                  example: 1,3,5
                  description: comma-separated day numbers (e.g. "1,3,5" for mon,wed,fri)
            hour:
              type: number
              example: 22
              description: hour of the day in 24-hr format (0-23)
            minute:
              type: number
              example: 42
              description: minute of the hour (0-59)
    reminder_receiver_user_ids:
      type: array
      nullable: true
      items:
        type: string
        nullable: false
        description: |
          This id is provided by Fyle to identify an object.
        example: uswoirwlwwg
      example:
        - uswoirwlwwg
        - uswlgwkgw42
      description: |
        List of IDs of users to whom this reminder will be sent.
    reminder_out:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          maxLength: 20
          description: |
            This id provided by Fyle to identify an object.
          example: remindRsjf2WmGd2
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        type:
          $ref: '#/components/schemas/reminder_type'
        message:
          type: string
          description: |
            The custom message which the admin wants to send alongside the reminder
          example: Please fyle your expenses before 25th of this month
        schedule_config:
          $ref: '#/components/schemas/reminder_schedule_config'
        last_reminded_at:
          type: string
          format: date-time
          nullable: true
          description: Signifies the time when this reminder was sent. In case of scheduled reminders, signifies when the last reminder was sent. Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
          example: '2021-06-01T13:14:54.804+00:00'
        next_reminder_at:
          type: string
          format: date-time
          nullable: true
          description: Only valid for scheduled reminders. Signifies the time when the next reminder will be sent according to the schedule_config. Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
          example: '2021-06-01T13:14:54.804+00:00'
        add_to_calendar:
          type: boolean
          nullable: false
          default: false
          description: |
            Determines whether this reminder will be added as an event in the google calendar of receiver.
          example: true
        receiver_user_ids:
          $ref: '#/components/schemas/reminder_receiver_user_ids'
    reminder_in:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          maxLength: 20
          description: |
            This id provided by Fyle to identify an object.
          example: remindRsjf2WmGd2
        type:
          $ref: '#/components/schemas/reminder_type'
        message:
          type: string
          description: |
            The custom message which the admin wants send alongside the reminder
          example: Please fyle your expenses before going on leave
        schedule_config:
          $ref: '#/components/schemas/reminder_schedule_config'
        add_to_calendar:
          type: boolean
          nullable: false
          default: false
          description: |
            Determines whether this reminder will be added as an event in the google calendar of receiver.
          example: true
        receiver_user_ids:
          $ref: '#/components/schemas/reminder_receiver_user_ids'
    reminder_delete_in:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          maxLength: 20
          description: |
            ID of the reminder that needs to be deleted.
          example: remindNZgN7V5pft
    employee_out_embed_for_report:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        code:
          type: string
          maxLength: 255
          nullable: true
          example: E84122
          description: |
            This field refers to any string that the client programs can use to refer to an employee's unique id.
            This could be any field such as an UUID from an Active Directory server or employee id in a HRMS system.
        org_id:
          $ref: '#/components/schemas/org_id'
        org_name:
          $ref: '#/components/schemas/org_name'
        department_id:
          nullable: true
          $ref: '#/components/schemas/department_id'
        department:
          nullable: true
          $ref: '#/components/schemas/department_out_embed'
        level:
          $ref: '#/components/schemas/level_out_embed'
        ach_account:
          additionalProperties: false
          type: object
          properties:
            added:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee has added ach account
            verified:
              nullable: true
              type: boolean
              description: |
                This field indicates whether employee's ach account is verified.
        business_unit:
          type: string
          maxLength: 255
          nullable: true
          example: Finance ops
        location:
          type: string
          maxLength: 255
          nullable: true
          example: Bangalore Ofc
        title:
          type: string
          maxLength: 255
          nullable: true
          example: Branch Manager
        has_accepted_invite:
          $ref: '#/components/schemas/has_accepted_invite'
        is_enabled:
          allOf:
            - $ref: '#/components/schemas/is_enabled'
          description: |
            This field indicates whether the employee is enabled in the org.
        mobile:
          type: string
          nullable: true
          example: '+12131234567'
          items:
            $ref: '#/components/schemas/phone_number'
          description: |
            Mobile number of the employee
        joined_at:
          $ref: '#/components/schemas/joined_at'
    ach_transfer_state:
      type: string
      enum:
        - ACH_FAILED
        - ACH_INITIATED
        - ACH_COMPLETE
        - ACH_RETRY
      description: |
        Status of ACH if this reimbursment is processed via ACH.
      example: ACH_FAILED
    ach_transfer:
      type: object
      properties:
        state:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/ach_transfer_state'
            - $ref: '#/components/schemas/null_field'
        status_info:
          type: string
          description: |
            Description of current status of the payment.
          example: Kindly ask the employee to add a valid bank account in their Settings. You'll then be able to see the bank icon next to the payment number, after which you can retry the payment.
          nullable: true
        initiated_at:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/timestamptz_utc'
            - $ref: '#/components/schemas/null_field'
          description: |
            signifies when the ach payment was initiated.
        source_account_ach_reference_id:
          nullable: true
          type: string
          description: |
            Signifies the source of ach transfer reference code.
          example: IMJYXG4G
        destination_account_ach_reference_id:
          nullable: true
          type: string
          description: |
            Signifies the destination of ach transfer reference code.
          example: II7P2228Z
    reimbursement_out_minimal:
      type: object
      nullable: true
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id provided by Fyle to uniquely identify a reimbursement.
            This id is always prefixed with `reim`.
          example: reimntGt9ju6qP
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        mode:
          type: string
          enum:
            - ACH
            - OFFLINE
          description: |
            Mode of creation of this reimbursement.
          example: ACH
        ach_transfer:
          $ref: '#/components/schemas/ach_transfer'
    report_comments_out_embed:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
        - creator_user_id
        - creator_user
        - created_at
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        comment:
          type: string
          description: comment on the report
          example: We don't accept laundry bills
        creator_user_id:
          $ref: '#/components/schemas/id_string'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
    advance_wallet_report_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: advwrlAGwjr2
        amount:
          $ref: '#/components/schemas/amount'
    admin_report_out:
      type: object
      additionalProperties: false
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - user_id
        - user
        - purpose
        - currency
        - amount
        - tax
        - state
        - num_expenses
        - is_manually_flagged
        - is_policy_flagged
        - last_paid_at
        - last_approved_at
        - last_submitted_at
        - last_resubmitted_at
        - seq_num
        - source
        - approvals
        - employee
        - next_approver_user_ids
        - reimbursement_id
        - reimbursement
        - comments
        - applied_advance_wallets
        - can_apply_advances
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          $ref: '#/components/schemas/id_string'
        user:
          $ref: '#/components/schemas/user_out_embed'
        purpose:
          type: string
          description: purpose for creating the report
          example: Business trip to London
          nullable: true
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        tax:
          type: number
          description: |
            Tax amount for the report
          example: 18.23
          nullable: true
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
        num_expenses:
          type: integer
          description: |
            Number of expenses part of this report
          example: 3
        is_verified:
          type: boolean
          nullable: true
          description: |
            Determines whether this report has been verified by a verifier
        is_physical_bill_submitted:
          type: boolean
          nullable: true
          description: |
            Signifies if physical has been collected for this report
        physical_bill_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when the physical bill for this report was submitted.
          nullable: true
        is_manually_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged manually
        is_policy_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged from a policy
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been exported to external accounting system or not.
        last_paid_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was reimbursed.
          nullable: true
        last_approved_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was approved.
          nullable: true
        last_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was submitted.
          nullable: true
        last_resubmitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was resubmitted.
          nullable: true
        seq_num:
          type: string
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        source:
          type: string
          description: |
            signifies the client from which this report was created
          nullable: true
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed_for_report'
        next_approver_user_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - us123heh98
        reimbursement_id:
          type: string
          nullable: true
          maxLength: 255
          description: |
            An unique ID, generated by Fyle, for identifying the Reimbursement.
          example: reimntGt9ju6qP
        reimbursement:
          $ref: '#/components/schemas/reimbursement_out_minimal'
        state_display_name:
          type: string
          example: Sent Back
          description: readable state name
        comments:
          type: array
          items:
            $ref: '#/components/schemas/report_comments_out_embed'
          description: |
            List of comments on the report
        accounting_export_summary:
          type: object
          description: |
            Summary of accounting export for this report.
          properties:
            state:
              type: string
              enum:
                - COMPLETE
                - ERROR
                - IN_PROGRESS
                - SKIPPED
                - INITIATED
              example: COMPLETE
            skipped:
              type: number
              description: |
                Number of skipped expenses.
              example: 2
            error:
              type: number
              description: |
                Number of failed expenses.
              example: 0
            complete:
              type: number
              description: |
                Number of complete expenses.
              example: 5
            in_progress:
              type: number
              description: |
                Number of in progress expenses.
              example: 0
            initiate:
              type: number
              description: |
                Number of initiated expenses.
              example: 0
            tpa_id:
              type: string
              nullable: false
              description: |
                Third party app id.
              example: tpa_1234567890
        can_apply_advances:
          type: boolean
          nullable: true
          description: |
            Determines whether advances can be applied to this report
        applied_advance_wallets:
          type: array
          items:
            $ref: '#/components/schemas/advance_wallet_report_out'
          nullable: true
          description: |
            List of applied advance wallets
    admin_report_in:
      type: object
      additionalProperties: false
      required:
        - purpose
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        purpose:
          type: string
          description: |
            Indicates purpose of the reports. It can only be updated for an existing report when the report is in `APPROVER_PENDING` or `APPROVED` state.
          example: '#1: Jun 2020'
    report_action_with_expenses_ids_to_eject:
      type: object
      additionalProperties: false
      required:
        - id
        - expense_ids
      properties:
        id:
          type: string
          description: |
            id of report, from which the expenses are to be ejected
          example: rpa21A2rdj2
        expense_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - txelntgwgwll
    report_filters_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: rpfilumWHrlPf7K
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_string:
          $ref: '#/components/schemas/query_string'
        sub_feature:
          $ref: '#/components/schemas/sub_feature'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    report_filters_in:
      type: object
      additionalProperties: false
      required:
        - name
        - query_string
      properties:
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        query_string:
          $ref: '#/components/schemas/query_string'
        sub_feature:
          $ref: '#/components/schemas/sub_feature'
    report_filters_delete_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: rpfilumWHrlPf7K
    report_comments_in:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
      properties:
        id:
          type: string
          description: |
            id of the report, on which need to add comment
          example: rpa21A2rdj2
        comment:
          type: string
          description: |
            comment on the report
          example: We don't accept laundry bills
    report_comments_out:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
        - report_id
        - creator_user_id
        - creator_user
        - created_at
        - org_id
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        comment:
          type: string
          description: comment on the report
          example: We don't accept laundry bills
        report_id:
          $ref: '#/components/schemas/id_string'
        creator_user_id:
          $ref: '#/components/schemas/id_string'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        org_id:
          $ref: '#/components/schemas/id_string'
    add_approver_in:
      type: object
      additionalProperties: false
      required:
        - id
        - approver_email
        - comment
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        approver_email:
          $ref: '#/components/schemas/email'
        comment:
          type: string
          description: |
            Specify why you are adding this approver
          example: Extra approval from finance required
    report_action_remove_approver_in:
      type: object
      required:
        - id
        - approver_email
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        approver_email:
          $ref: '#/components/schemas/email'
    report_action_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          type: string
          description: |
            id of report that is to be approved
          example: rpa21A2rdj2
    send_back_in:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        comment:
          type: string
          description: |
            Specify why you are sending back the report.
          example: Amount is incorrect
    process_ach_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: re123453
      required:
        - id
    mark_paid_bulk_in:
      type: object
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: re123453
        paid_notify_at:
          type: string
          format: date-time
          description: |
            This field indicates when should user receive notification regarding reimbursement
          example: '2022-12-02T17:58:21.406Z'
        code:
          $ref: '#/components/schemas/code'
    process_manual_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: re123453
      required:
        - id
    process_summary_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: re123453
      required:
        - id
    process_summary_out:
      type: object
      additionalProperties: true
      properties:
        selected_reimbursable_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the final reimbursable amount.
          example: 101
        selected_count:
          type: integer
          description: |
            This field indicates the count of selected reports.
          example: 1
        unverified_count:
          type: integer
          description: |
            This field indicates the count of unverified reports.
          example: 2
        unverified_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the total amount of unverified reports.
          example: 100
        missing_bank_details_count:
          type: integer
          description: |
            This field indicates the count of reports with missing users bank account details.
          example: 2
        missing_bank_details_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the total amount of reports with missing users bank account details.
          example: 101
        missing_bank_details_employee_count:
          type: integer
          description: |
            This field indicates the count of employees with missing users bank account details.
          example: 2
        missing_bank_details_employee_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - ouN7x27CwrwC
          description: |
            This field contains list of employee_ids whose bank accounts are missing.
        payment_initiated_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the total amount of reports that are in payment_processing and ach_initiated state.
          example: 101
        payment_initiated_count:
          type: integer
          description: |
            This field indicates the count of reports that are in payment_processing and ach_initiated state.
          example: 2
        reimbursable_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the Final amount to be reimbursement. 
          example: 101
        reimbursable_report_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - re1234423
          description: |
            This field contains list of reimbursable report_ids. 
        closable_report_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - re123453
          description: |
            This field contains list of report_ids that can directly be closed(with reimbursable amount as 0). 
    report_accounting_export_summary_in:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    reports_stats_in:
      properties:
        query_params:
          type: string
          description: |
            Query param string similar to reports GET call. Use group_by_state=eq.true to get state-wise grouping of stats.
          nullable: false
          example: id=in.('rp123','rep1234')&group_by_state=eq.true
    reports_stats_out:
      oneOf:
        - type: array
          title: State-wise grouped stats
          description: Stats grouped by report state
          items:
            type: object
            required:
              - count
              - total_amount
              - state
              - failed_amount
              - failed_count
              - processing_amount
              - processing_count
              - reimbursable_amount
            properties:
              count:
                type: integer
                nullable: false
                description: Number of matching reports in this state.
                example: 5
              total_amount:
                type: number
                nullable: false
                description: Sum of amounts for matching reports in this state.
                example: 2200
              state:
                type: string
                enum:
                  - APPROVER_PENDING
                  - DRAFT
                  - PAYMENT_PROCESSING
                  - APPROVER_INQUIRY
                  - APPROVED
                  - PAYMENT_PENDING
                  - PAID
                description: Report state.
              failed_amount:
                type: number
                nullable: true
                description: Sum of reimbursable amount for ACH-failed reports, applicable only in PAYMENT_PROCESSING state.
                example: 200
              failed_count:
                type: integer
                nullable: true
                description: Count of ACH-failed reports, applicable only in PAYMENT_PROCESSING state.
                example: 1
              processing_amount:
                type: number
                nullable: true
                description: Sum of reimbursable amount for processing reports, applicable only in PAYMENT_PROCESSING state.
                example: 1500
              processing_count:
                type: integer
                nullable: true
                description: Count of processing reports, applicable only in PAYMENT_PROCESSING state.
                example: 3
              reimbursable_amount:
                type: number
                nullable: false
                description: Sum of reimbursable amounts for matching reports in this state.
                example: 500
        - type: object
          title: Overall stats
          description: Overall stats without state grouping (response for older mobile app versions).
          required:
            - count
            - total_amount
            - processing_amount
            - processing_count
            - failed_amount
            - failed_count
          properties:
            count:
              type: integer
              nullable: false
              description: Total number of matching reports.
              example: 1
            total_amount:
              type: number
              nullable: false
              description: Total sum of amounts for all matching reports.
              example: 100
            processing_amount:
              type: number
              nullable: true
              description: Sum of reimbursable amounts for reports in processing state.
              example: 101
            processing_count:
              type: integer
              nullable: true
              description: Count of reports in processing state.
              example: 2
            failed_amount:
              type: number
              nullable: true
              description: Sum of reimbursable amounts for reports in processing state with ACH failures.
              example: 101
            failed_count:
              type: integer
              nullable: true
              description: Count of reports in processing state with ACH failures.
              example: 1
      example:
        - state: DRAFT
          count: 3
          failed_amount: null
          failed_count: null
          processing_amount: null
          processing_count: null
          reimbursable_amount: 200
          total_amount: 350
        - state: APPROVER_PENDING
          count: 5
          failed_amount: null
          failed_count: null
          processing_amount: null
          processing_count: null
          reimbursable_amount: 500
          total_amount: 2200
        - state: PAYMENT_PROCESSING
          count: 5
          failed_amount: 200
          failed_count: 1
          processing_amount: 1500
          processing_count: 3
          reimbursable_amount: 500
          total_amount: 2200
        - state: PAID
          count: 0
          failed_amount: null
          failed_count: null
          processing_amount: null
          processing_count: null
          reimbursable_amount: 0
          total_amount: 0
    report_create_and_submit_expenses:
      type: object
      additionalProperties: false
      required:
        - expense_ids
      properties:
        expense_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - txelntgwgwll
            - txavbdabass
    report_permissions_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    report_permissions_out:
      type: object
      additionalProperties: false
      required:
        - can_edit
        - can_admin_or_approver_edit
        - can_delete
        - can_submit
        - can_export
        - can_resubmit
        - can_approve
        - can_admin_approve
        - can_send_back
        - can_verify
        - can_move_to_payment_pending
        - can_add_approver
        - can_remove_approver
      properties:
        can_edit:
          type: boolean
          example: true
        can_admin_or_approver_edit:
          type: boolean
          example: true
        can_delete:
          type: boolean
          example: true
        can_submit:
          type: boolean
          example: true
        can_export:
          type: boolean
          example: true
        can_resubmit:
          type: boolean
          example: true
        can_approve:
          type: boolean
          example: true
        can_admin_approve:
          type: boolean
          example: true
        can_send_back:
          type: boolean
          example: true
        can_verify:
          type: boolean
          example: true
        can_move_to_payment_pending:
          type: boolean
          example: true
        can_add_approver:
          type: boolean
          example: true
        can_remove_approver:
          type: boolean
          example: true
    apply_advance_wallets_in:
      type: object
      required:
        - id
        - advance_wallet_ids
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        advance_wallet_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - awfgRr8YA6KK
    remove_advance_wallets_in:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    round_off_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    reports_export_config_column_formula:
      type: object
      properties:
        function:
          type: string
          example: parse-format-time
        parameters:
          type: array
          items:
            anyOf:
              - type: object
              - type: string
              - type: number
              - type: integer
              - type: boolean
          example:
            - function: field
              parameters:
                - spent_at
            - yyyy-MM-dd'T'HH:mm:ss
            - dd-MM-yyyy
            - error in date formatting
      description: |
        Export column formula is a expression that is used to transform the data. Refer https://www.fylehq.com/help/en/articles/4422306-advanced-export-formulas for more details.
    reports_export_config:
      type: object
      additionalProperties: true
      properties:
        type:
          type: string
          enum:
            - xlsx
            - csv
            - pdf
          description: |
            Type of the export file.
          example: csv
        include_receipts:
          type: boolean
          description: |
            Whether to include receipts in the export file or not. Only required for PDF exports.
          example: true
        is_header_visible:
          type: boolean
          description: |
            Whether to show the header in the export file. Only required for CSV and XLSX exports.
          example: true
        separate_line_items_entry:
          type: object
          properties:
            enabled:
              type: boolean
              description: |
                Whether to show the double rows for each line item in the export file.
              example: false
            debit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for debit entries.
              example:
                - debit_amount
            credit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for credit entries.
              example:
                - credit_amount
          description: |
            Configure how to show the double rows for each line item in the export file, if enabled. Only required for CSV and XLSX exports.
        columns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: |
                  Name of the column.
                example: Spent Date
              formula:
                allOf:
                  - $ref: '#/components/schemas/reports_export_config_column_formula'
                description: |
                  Formula to transform the data in the column.
          description: |
            Configure the columns to show in the export file. Only required for CSV and XLSX exports.
    reports_exports_out:
      type: object
      additionalProperties: false
      properties:
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: refilumWHrlPf7K
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
        config:
          allOf:
            - $ref: '#/components/schemas/reports_export_config'
          nullable: false
        file_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          example: filumWHrlPf7K
        state:
          type: string
          nullable: false
          enum:
            - PENDING
            - PROCESSING
            - SUCCESS
            - ERROR
          description: |
            Status of the export.
          example: PENDING
    reports_exports_in:
      type: object
      additionalProperties: false
      required:
        - query_params
        - notify_emails
        - config
      properties:
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
          description: |
            List of emails to notify when the export is ready.
        config:
          allOf:
            - $ref: '#/components/schemas/reports_export_config'
          nullable: false
          description: |
            Configuration for the export.
    corporate_card_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          maxLength: 255
          nullable: true
          description: |
            The unique id of an user to whom the card is assigned
          example: uswjwgnwwgo
        user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        bank_name:
          $ref: '#/components/schemas/bank_name'
        card_number:
          $ref: '#/components/schemas/card_number'
        cardholder_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's name
          example: John Cena
        data_feed_source:
          type: string
          nullable: true
          description: |
            signifies the source of how card is added and how further card transactions could be synced
          example: BANK FEED - CDF
        code:
          type: string
          nullable: true
          description: |
            Id given by external systems like Gmail. To identify whether that entity
            has been already added to Fyle or not.
          example: wgjwgo3ihwljnlsww
        yodlee_account_id:
          type: string
          nullable: true
          description: |
            Identifier for the linked Yodlee account.
          example: yac2cqC4eSaS6
        last_synced_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card was last synced.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card was last assigned.
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card.
          nullable: true
          example: uswjwgnwwgo
        is_visa_enrolled:
          type: boolean
          description: |
            If the card is enrolled with real time feed from visa
          nullable: false
        is_mastercard_enrolled:
          type: boolean
          description: |
            If the card is enrolled with realtime feed from Mastercard
          nullable: false
        is_capitalone_enrolled:
          type: boolean
          description: |
            If the card is enrolled with realtime feed from Capital One
          nullable: true
        is_dummy:
          type: boolean
          description: |
            If the card is a test card
          nullable: false
        last_ready_for_verification_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the card was ready to be verified 
          example: '2022-02-01T07:20:30.951475+00:00'
          nullable: true
        last_verification_attempt_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the last card verification was attempted
          nullable: true
        last_verified_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the card was verified
          example: '2022-02-01T07:20:39.207250+00:00'
          nullable: true
        verification_status:
          type: string
          nullable: false
          description: |
            Verification status of the corporate card
          enum:
            - VERIFIED
            - NOT_VERIFIED
            - READY_FOR_VERIFICATION
        virtual_card_id:
          type: string
          description: |
            The unique id of the virtual card, if the card is created from virtual card.
          nullable: true
          example: viasdfasdfddd
        virtual_card_state:
          type: string
          description: |
            Status of the virtual card
          nullable: true
          enum:
            - ACTIVE
            - PREACTIVE
            - INACTIVE
            - EXPIRED
            - DELETED
            - USED
            - null
          example: ACTIVE
        nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Unique nickname assigned to the card
          example: Business Card
        total_transactions_count:
          type: integer
          nullable: false
          description: |
            The total number of transactions for the card, in Fyle
          example: 100
        unassigned_transactions_count:
          type: integer
          nullable: false
          description: |
            The total number of unassigned transactions for the card, in Fyle
          example: 50
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - bank_name
        - card_number
        - cardholder_name
        - data_feed_source
        - code
        - yodlee_account_id
        - last_synced_at
        - last_assigned_at
        - assignor_user_id
        - is_visa_enrolled
        - is_mastercard_enrolled
        - is_capitalone_enrolled
        - is_dummy
        - last_ready_for_verification_at
        - last_verification_attempt_at
        - last_verified_at
        - verification_status
        - virtual_card_id
        - virtual_card_state
        - nickname
        - total_transactions_count
        - unassigned_transactions_count
    corporate_card_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        bank_name:
          type: string
          description: |
            Specifies the name of bank who issued the card.
          example: Bank of America
        card_number:
          type: string
          description: |
            Specifies the masked number of the card.
            Add only masked card-numbers, last four digits of the card.
          example: xxxx-4543
        cardholder_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's name
          example: John Cena
        data_feed_source:
          type: string
          nullable: true
          description: |
            signifies the source of how card is added and how further card transactions could be synced
          example: BANK FEED - CDF
        code:
          type: string
          nullable: true
          description: |
            Id given by external systems like Gmail. To identify whether that entity
            has been already added to Fyle or not.
          example: wgjwgo3ihwljnlsww
        last_synced_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card was last synced.
        nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Signifies the unique nickname assigned to the card
          example: Business Card
      required:
        - bank_name
        - card_number
    corporate_card_stats_in:
      properties:
        query_params:
          nullable: false
          type: string
          description: |
            This field contains the query param string, which can be used to fetch data for assigned and unassigned cards.
          example: user_id=eq.null
    corporate_card_stats_out:
      type: object
      properties:
        count:
          type: integer
          nullable: false
          description: |
            This field indicates the total count of cards.
          example: 100
        transactions_count:
          type: integer
          nullable: false
          description: |
            This field indicates the total count of transactions, present for the cards.
          example: 1000
    corporate_card_assign_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card should be assigned.
          example: uswjwgnwwgo
      required:
        - id
        - user_id
    corporate_card_id_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
      required:
        - id
    user_out_nullable_example_null:
      type: object
      nullable: true
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: uswjwgnwwgo
        email:
          $ref: '#/components/schemas/email'
        full_name:
          type: string
          maxLength: 255
          description: |
            Represents the full name of the Employee. Must be at least 3 characters.
          example: John Doe
      example: null
    corporate_card_unassign_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          maxLength: 255
          nullable: true
          description: |
            The unique id of an user to whom the card is assigned
          example: null
        user:
          $ref: '#/components/schemas/user_out_nullable_example_null'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        bank_name:
          type: string
          description: |
            Specifies the name of bank who issued the card.
          example: Bank of America
        card_number:
          type: string
          description: |
            Specifies the masked number of the card.
            Add only masked card-numbers, last four digits of the card.
          example: xxxx-4543
        cardholder_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's name
          example: John Cena
        data_feed_source:
          type: string
          nullable: true
          description: |
            signifies the source of how card is added and how further card transactions could be synced
          example: BANK FEED - CDF
        code:
          type: string
          nullable: true
          description: |
            Id given by external systems like Gmail. To identify whether that entity
            has been already added to Fyle or not.
          example: wgjwgo3ihwljnlsww
        yodlee_account_id:
          type: string
          nullable: true
          description: |
            Identifier for the linked Yodlee account.
          example: yac2cqC4eSaS6
        last_synced_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card was last synced.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card was last assigned.
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card.
          nullable: true
          example: null
        is_dummy:
          type: boolean
          description: |
            If the card is a test card
          nullable: false
        last_ready_for_verification_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the card was ready to be verified
          example: '2022-02-01T07:20:30.951475+00:00'
          nullable: true
        is_visa_enrolled:
          type: boolean
          description: |
            If the card is enrolled with real time feed from visa
          nullable: false
        is_mastercard_enrolled:
          type: boolean
          description: |
            If the card is enrolled with realtime feed from Mastercard
          nullable: false
        is_capitalone_enrolled:
          type: boolean
          description: |
            If the card is enrolled with realtime feed from Capital One
          nullable: true
        last_verification_attempt_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the last card verification was attempted
          nullable: true
        verification_status:
          type: string
          nullable: false
          description: |
            Verification status of the corporate card
        last_verified_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Signifies when the card was verified
          example: '2022-02-01T07:20:39.207250+00:00'
          nullable: true
        virtual_card_id:
          type: string
          description: |
            The unique id of the virtual card, if the card is created from virtual card.
          nullable: true
          example: viasdfasdfddd
        virtual_card_state:
          type: string
          description: |
            Status of the virtual card
          nullable: true
          enum:
            - ACTIVE
            - PREACTIVE
            - INACTIVE
            - EXPIRED
            - DELETED
            - USED
            - null
          example: ACTIVE
        nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Unique nickname assigned to the card
          example: Business Card
        total_transactions_count:
          type: integer
          nullable: false
          description: |
            The total number of transactions for the card, in Fyle
          example: 100
        unassigned_transactions_count:
          type: integer
          nullable: false
          description: |
            The total number of unassigned transactions for the card, in Fyle
          example: 50
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - bank_name
        - card_number
        - cardholder_name
        - data_feed_source
        - code
        - yodlee_account_id
        - last_synced_at
        - last_assigned_at
        - assignor_user_id
        - is_dummy
        - last_ready_for_verification_at
        - is_visa_enrolled
        - is_mastercard_enrolled
        - is_capitalone_enrolled
        - last_verification_attempt_at
        - verification_status
        - last_verified_at
        - virtual_card_id
        - virtual_card_state
        - nickname
        - total_transactions_count
        - unassigned_transactions_count
    corporate_card_reassign_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card should be reassigned.
          example: uswjwgnwwgo
      required:
        - id
        - user_id
    string_detail:
      type: string
      description: Additional string details of the card transaction. Can hold details upto 256 characters in length.
      nullable: true
      example: sample string
    corporate_card_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        bank_name:
          type: string
          description: |
            Specifies the name of bank who issued the card.
          example: Bank of America
        card_number:
          type: string
          description: |
            Specifies the masked number of the card.
            Add only masked card-numbers, last four digits of the card.
          example: xxxx-4543
        nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Unique nickname assigned to the card
          example: Business Card
        cardholder_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's name
          example: John Cena
        masked_number:
          type: string
          description: |
            Specifies the last 4 digits of the card number.
          example: '4543'
        user_full_name:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the card holder's full name
          example: John Cena
        user_email:
          type: string
          maxLength: 127
          nullable: true
          description: |
            String denoting the card holder's email
          example: john.doe@example.com
    matched_expense_out_embed:
      type: object
      nullable: true
      additionalProperties: false
      required:
        - id
        - currency
        - amount
        - spent_at
        - merchant
        - purpose
        - foreign_currency
        - foreign_amount
        - state
        - seq_num
        - no_of_files
        - category_display_name
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: txwownwrng
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this expense was made.
            This date cannot be in future.
        merchant:
          type: string
          nullable: true
          maxLength: 255
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Uber
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        state:
          type: string
          enum:
            - COMPLETE
            - DRAFT
            - PAID
            - PAYMENT_PROCESSING
            - APPROVER_PENDING
            - PAYMENT_PENDING
            - APPROVED
            - UNREPORTABLE
          description: The state of the Expense.
        seq_num:
          type: string
          readOnly: true
          description: |
            This is user visible identifier for an expense.
            This field can be used as reference in UI.
          example: E/2020/10/T/95
        no_of_files:
          type: integer
          description: |
            Number of files attached to the expense.
          example: 1
        category_display_name:
          type: string
          description: |
            Category of the expense.
          example: Travel
    double_precision_detail:
      type: number
      description: Additional floating point numeric details of the card transaction. Same as double precision.
      nullable: true
      example: 468.2923
    timestamp_detail:
      type: string
      format: date-time
      description: |
        Additional details of the card transaction. <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339, section 5.6 compliant timestamp.</a>
      example: '2020-07-03T18:19:31.193Z'
      nullable: true
    integer_detail:
      type: integer
      description: Additional integer details of the card transaction.
      nullable: true
      example: 5
    text_detail:
      type: string
      description: Additional text details of the card transaction.
      nullable: true
      example: sample text
    corporate_card_transaction_metadata:
      type: object
      nullable: true
      description: |
        Additional data that can optionally be stored. Some example details are added for reference.
      properties:
        merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        flight_merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        flight_supplier_name:
          $ref: '#/components/schemas/string_detail'
        flight_travel_agency_name:
          $ref: '#/components/schemas/string_detail'
        flight_ticket_number:
          $ref: '#/components/schemas/string_detail'
        flight_total_fare:
          $ref: '#/components/schemas/double_precision_detail'
        flight_travel_date:
          $ref: '#/components/schemas/timestamp_detail'
        flight_service_class:
          $ref: '#/components/schemas/string_detail'
        flight_carrier_code:
          $ref: '#/components/schemas/string_detail'
        flight_fare_base_code:
          $ref: '#/components/schemas/string_detail'
        flight_trip_leg_number:
          $ref: '#/components/schemas/string_detail'
        hotel_merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        hotel_supplier_name:
          $ref: '#/components/schemas/string_detail'
        hotel_checked_in_at:
          $ref: '#/components/schemas/timestamp_detail'
        hotel_nights:
          $ref: '#/components/schemas/integer_detail'
        hotel_checked_out_at:
          $ref: '#/components/schemas/timestamp_detail'
        hotel_country:
          $ref: '#/components/schemas/string_detail'
        hotel_city:
          $ref: '#/components/schemas/string_detail'
        hotel_total_fare:
          $ref: '#/components/schemas/double_precision_detail'
        fleet_product_merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        fleet_product_supplier_name:
          $ref: '#/components/schemas/string_detail'
        fleet_service_merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        fleet_service_supplier_name:
          $ref: '#/components/schemas/string_detail'
        car_rental_merchant_category_code:
          $ref: '#/components/schemas/string_detail'
        car_rental_supplier_name:
          $ref: '#/components/schemas/string_detail'
        car_rental_started_at:
          $ref: '#/components/schemas/timestamp_detail'
        car_rental_days:
          $ref: '#/components/schemas/integer_detail'
        car_rental_ended_at:
          $ref: '#/components/schemas/timestamp_detail'
        general_ticket_issued_at:
          $ref: '#/components/schemas/timestamp_detail'
        general_ticket_number:
          $ref: '#/components/schemas/string_detail'
        general_issuing_carrier:
          $ref: '#/components/schemas/string_detail'
        general_travel_agency_name:
          $ref: '#/components/schemas/string_detail'
        general_travel_agency_code:
          $ref: '#/components/schemas/string_detail'
        general_ticket_total_fare:
          $ref: '#/components/schemas/double_precision_detail'
        general_ticket_total_tax:
          $ref: '#/components/schemas/double_precision_detail'
        merchant_address:
          $ref: '#/components/schemas/text_detail'
    corporate_card_transaction_list_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card transaction is assigned.
          readOnly: true
          nullable: true
          example: null
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          nullable: false
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        transaction_status:
          type: string
          enum:
            - POSTED
            - PENDING
          description: |
            Holds the status of the Corporate Card Transaction, whether posted or still pending.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
        bank_transaction_number:
          type: string
          nullable: true
          description: |
            The external bank reference number provided for Amex transactions.
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example:
            - txwownwrng
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example:
            - txwownwrng
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - is_exported
        - metadata
    corporate_card_transaction_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - amount
        - currency
        - spent_at
        - corporate_card_id
    corporate_card_transaction_post_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card transaction is assigned.
          readOnly: true
          nullable: true
          example: null
        user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
          nullable: false
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: null
        assignor_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
          example: false
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
          example: null
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - is_exported
        - metadata
    corporate_card_transactions_stats_in:
      properties:
        query_params:
          nullable: false
          type: string
          description: |
            This field contains the query param string similar to the query params passed in corporate card transactions GET call for displaying transactions in the list view.
          example: amount=gt.0&amount=lt.1000&created_at=gt.2021-01-01T00:00:00.000Z&created_at=lt.2021-12-31T23:59:59.999Z
    corporate_card_transactions_stats_out:
      type: object
      properties:
        count:
          type: integer
          nullable: false
          description: |
            This field indicates the count of corporate card transactions.
          example: 1
        debit_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the sum of amount of the debit type corporate card transactions.
          example: 1239
        credit_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the sum of amount of the credit type corporate card transactions.
          example: 101
    corporate_card_transactions_delete_summary_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxn123453
      required:
        - id
    corporate_card_transactions_delete_summary_out:
      type: object
      properties:
        delete_count:
          type: integer
          nullable: false
          description: |
            This field indicates the count of corporate card transactions that can be deleted.
          example: 1
        delete_amount:
          allOf:
            - $ref: '#/components/schemas/amount'
          description: |
            This field indicates the sum of amount of the corporate card transactions that can be deleted.
          example: 101
    corporate_card_transactions_delete_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxn123453
      required:
        - id
    corporate_card_transaction_filters_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: cctfilumWHrlPf7K
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_string:
          $ref: '#/components/schemas/query_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    corporate_card_transaction_filters_in:
      type: object
      additionalProperties: false
      required:
        - name
        - query_string
      properties:
        name:
          $ref: '#/components/schemas/filter_name'
        is_shared:
          $ref: '#/components/schemas/is_shared'
        query_string:
          $ref: '#/components/schemas/query_string'
    corporate_card_transaction_filters_delete_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: ctsflumWHrlPf7K
    corporate_card_transaction_assign_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card transaction should be assigned.
          example: usge49ielgel
      required:
        - id
        - user_id
    corporate_card_transaction_assign_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - is_exported
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_reassign_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        user_id:
          type: string
          description: |
            The unique id of an user to whom the card transaction should be reassigned.
          example: usge49ielgel
      required:
        - id
        - user_id
    corporate_card_transaction_id_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
      required:
        - id
    corporate_card_transaction_unassign_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          description: |
            The unique id of an user to which the object is associated.
          readOnly: true
          nullable: true
          example: null
        user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: null
        assignor_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
          example: false
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_mark_personal_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: true
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_unmark_personal_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_ignore_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: true
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_undo_ignore_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        transaction_status:
          type: string
          enum:
            - POSTED
            - PENDING
          description: |
            Holds the status of the Corporate Card Transaction, whether posted or still pending.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        bank_transaction_number:
          type: string
          nullable: true
          description: |
            The external bank reference number provided for Amex transactions.
          example: null
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
          example: null
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - is_exported
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_match_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - txwownwrng
      required:
        - id
        - expense_ids
    corporate_card_transaction_match_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example:
            - txwownwrng
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
          example: false
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transaction_unmatch_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - txwownwrng
      required:
        - id
        - expense_ids
    corporate_card_transaction_unmatch_out:
      additionalProperties: false
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: btxnwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        user:
          $ref: '#/components/schemas/user_out_embed'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        amount:
          $ref: '#/components/schemas/amount'
        currency:
          $ref: '#/components/schemas/currency'
        spent_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies when this card transaction was made.
            This date cannot be in future.
        post_date:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            signifies post date of a card transaction.
            This date cannot be in future.
        transaction_status:
          type: string
          enum:
            - POSTED
            - PENDING
          description: |
            Holds the status of the Corporate Card Transaction, whether posted or still pending.
        description:
          type: string
          nullable: true
          description: |
            Holds the description of the card transaction
          example: Team lunch
        statement_id:
          type: string
          nullable: true
          description: |
            If the transaction is created by statement uploaded then this key refers to the source statement.
          example: stmtdasfdsaf3
        can_delete:
          type: boolean
          nullable: true
          description: |
            Determines whether this card transaction can be deleted or not.
          example: false
        capitalone_virtual_card_last_four:
          type: string
          nullable: true
          description: |
            Last four digits of capitalone virtual card.
          example: '4521'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        code:
          $ref: '#/components/schemas/code'
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the vendor to which the card transaction was made.
            Note: This is not same as the merchant added in Fyle but just a string
          example: Uber
        mcc:
          type: string
          description: |
            This refers to the merchant category code for which this card transaction is made.
          $ref: '#/components/schemas/string_detail'
          example: '5102'
        category:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the category of the card transaction
            Note: This is not same as the category added in Fyle but just a string
          example: Travel
        corporate_card_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: bawownwrng
        corporate_card:
          $ref: '#/components/schemas/corporate_card_out_embed'
        assignor_user_id:
          type: string
          description: |
            The unique id of an user who assigned the card transaction.
          nullable: true
          example: uswjwgnwwgo
        assignor_user:
          $ref: '#/components/schemas/user_out_embed'
        is_assigned:
          type: boolean
          description: |
            Determines whether this card transaction is assigned.
        last_assigned_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last assigned.
        is_marked_personal:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is marked as personal transaction made on the corporate card.
        bank_transaction_number:
          type: string
          nullable: true
          description: |
            The external bank reference number provided for Amex transactions.
          example: null
        last_marked_personal_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last marked personal.
          example: null
        is_dismissed:
          type: boolean
          example: false
          description: |
            Determines whether this card transaction is dismissed.
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this CCC transaction has been exported to external accounting system or not.
        last_dismissed_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            Signifies when this card transaction was last dismissed.
          example: null
        is_auto_matched:
          type: boolean
          example: false
          description: |
            Signifies when this card transaction is auto_matched.
        auto_suggested_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are automatically suggested to be matched by the system
          example: []
        last_auto_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was auto matched.
          example: null
        matched_expense_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          description: |
            Holds the expense ids which are matched to this card transaction
          example: []
        matched_expenses:
          type: array
          items:
            $ref: '#/components/schemas/matched_expense_out_embed'
        last_user_matched_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          nullable: true
          description: |
            signifies when this expense was last matched by user.
        metadata:
          $ref: '#/components/schemas/corporate_card_transaction_metadata'
      required:
        - id
        - org_id
        - user_id
        - user
        - created_at
        - updated_at
        - amount
        - currency
        - spent_at
        - post_date
        - description
        - statement_id
        - foreign_currency
        - foreign_amount
        - code
        - merchant
        - category
        - corporate_card_id
        - corporate_card
        - can_delete
        - assignor_user_id
        - assignor_user
        - is_assigned
        - last_assigned_at
        - is_marked_personal
        - last_marked_personal_at
        - is_dismissed
        - last_dismissed_at
        - is_auto_matched
        - auto_suggested_expense_ids
        - last_auto_matched_at
        - matched_expense_ids
        - matched_expenses
        - last_user_matched_at
        - metadata
    corporate_card_transactions_export_config_column_formula:
      type: object
      properties:
        function:
          type: string
          example: parse-format-time
        parameters:
          type: array
          items:
            anyOf:
              - type: object
              - type: string
              - type: number
              - type: integer
              - type: boolean
          example:
            - function: field
              parameters:
                - spent_at
            - yyyy-MM-dd'T'HH:mm:ss
            - dd-MM-yyyy
            - error in date formatting
      description: |
        Export column formula is a expression that is used to transform the data. Refer https://www.fylehq.com/help/en/articles/4422306-advanced-export-formulas for more details.
    corporate_card_transactions_export_config:
      type: object
      additionalProperties: true
      properties:
        type:
          type: string
          enum:
            - xlsx
            - csv
          description: |
            Type of the export file.
          example: csv
        is_header_visible:
          type: boolean
          description: |
            Whether to show the header in the export file. Only required for CSV and XLSX exports.
          example: true
        separate_line_items_entry:
          type: object
          properties:
            enabled:
              type: boolean
              description: |
                Whether to show the double rows for each line item in the export file.
              example: false
            debit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for debit entries.
              example:
                - debit_amount
            credit_entries_only:
              type: array
              items:
                type: string
              description: |
                Configure which columns to show for credit entries.
              example:
                - credit_amount
          description: |
            Configure how to show the double rows for each line item in the export file, if enabled. Only required for CSV and XLSX exports.
        columns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: |
                  Name of the column.
                example: Spent Date
              formula:
                allOf:
                  - $ref: '#/components/schemas/corporate_card_transactions_export_config_column_formula'
                description: |
                  Formula to transform the data in the column.
          description: |
            Configure the columns to show in the export file. Only required for CSV and XLSX exports.
    corporate_card_transactions_exports_in:
      type: object
      additionalProperties: false
      required:
        - query_params
        - notify_emails
        - config
      properties:
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
          description: |
            List of emails to notify when the export is ready.
        config:
          allOf:
            - $ref: '#/components/schemas/corporate_card_transactions_export_config'
          nullable: false
          description: |
            Configuration for the export.
    processed_at:
      type: string
      format: date-time
      nullable: true
      description: |
        Signifies when this was processed in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-11T13:14:55.201598+00:00'
    completed_at:
      type: string
      format: date-time
      nullable: true
      description: |
        Signifies when this was completed in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-11T13:14:55.201598+00:00'
    failed_at:
      type: string
      format: date-time
      nullable: true
      description: |
        Signifies when this was failed in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      example: '2020-06-11T13:14:55.201598+00:00'
    corporate_card_transactions_exports_out:
      type: object
      additionalProperties: false
      properties:
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: refilumWHrlPf7K
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        query_params:
          allOf:
            - $ref: '#/components/schemas/query_params'
          nullable: false
        notify_emails:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/email'
        config:
          allOf:
            - $ref: '#/components/schemas/corporate_card_transactions_export_config'
          nullable: false
        file_id:
          anyOf:
            - $ref: '#/components/schemas/null_field'
            - $ref: '#/components/schemas/id_string'
          nullable: true
          example: filumVIrlPf7K
        state:
          type: string
          nullable: false
          enum:
            - PENDING
            - PROCESSING
            - COMPLETED
            - FAILED
          description: |
            Status of the export.
          example: PENDING
        processed_at:
          $ref: '#/components/schemas/processed_at'
          nullable: true
        completed_at:
          $ref: '#/components/schemas/completed_at'
          nullable: true
        failed_at:
          $ref: '#/components/schemas/failed_at'
          nullable: true
    virtual_card_out:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: viwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          maxLength: 255
          description: |
            The unique id of an user to whom the card is assigned
          example: uswjwgnwwgo
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        last_five:
          type: string
          description: |
            Specifies the last 5 digits of the card.
          example: '4543'
        state:
          type: string
          description: |
            Status of the virtual card
          nullable: true
          enum:
            - ACTIVE
            - PREACTIVE
            - INACTIVE
            - EXPIRED
            - DELETED
            - USED
            - null
          example: ACTIVE
        expiry_date:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Specifies the expiry date of the card.
          example: '2022-02-01'
        amex_account_id:
          type: string
          description: |
            The unique id of the amex account to which the card is assigned
          example: amactr7NhV9Qn6
        valid_from_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Specifies the valid from date of the card, ie from when the card would be active.
          example: '2022-02-01'
        valid_till_at:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Specifies the valid till date of the card, ie till when the card would be active.
          example: '2022-02-01'
        creator_user_id:
          type: string
          description: |
            The unique id of an user who created the card.
          example: useradfasd
        virtual_card_user_id:
          type: string
          description: |
            This id refers to the virtual card user to whom the virtual card is assigned.
          example: vcg2Bl78jstf
        nick_name:
          type: string
          description: |
            Represents user defined nick name associated with the virtual card for easier recognition.
          example: john
      required:
        - id
        - org_id
        - user_id
        - created_at
        - updated_at
        - last_five
        - state
        - expiry_date
        - amex_account_id
        - valid_from_at
        - valid_till_at
        - creator_user_id
        - virtual_card_user_id
        - nick_name
    virtual_cards_id_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            The unique id of the virtual card
          example: viwownwrng
      required:
        - id
    virtual_cards_get_current_balance_out:
      type: object
      properties:
        current_amount:
          type: number
          description: |
            The current balance amount of the virtual card
          example: 1000
      required:
        - current_amount
    virtual_cards_show_card_details_out:
      type: object
      properties:
        full_card_number:
          type: string
          description: |
            Full card number of the virtual card
          example: 1234567890123456
        expiry_date:
          allOf:
            - $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Specifies the expiry date of the card.
          example: '2022-02-01'
        cvv:
          type: string
          description: |
            CVV of the virtual card
          example: 123
      required:
        - full_card_number
        - expiry_date
        - cvv
    webhook_url:
      type: string
      description: |
        URL Endpoint for webhook
      example: https://api.custom.com/webhook1
    subscribed_resources:
      type: array
      description: |
        List of resource types that the subscription is configured for.
      items:
        type: string
        enum:
          - EXPENSE
          - REPORT
      example:
        - EXPENSE
        - REPORT
    admin_subscriptions_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        webhook_url:
          $ref: '#/components/schemas/webhook_url'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        created_at:
          $ref: '#/components/schemas/created_at'
        org_id:
          $ref: '#/components/schemas/fk_string'
        subscribed_resources:
          $ref: '#/components/schemas/subscribed_resources'
    subscriptions_in:
      type: object
      additionalProperties: false
      required:
        - is_enabled
        - webhook_url
        - subscribed_resources
      properties:
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        webhook_url:
          $ref: '#/components/schemas/webhook_url'
        subscribed_resources:
          $ref: '#/components/schemas/subscribed_resources'
    report_out:
      type: object
      additionalProperties: false
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - user_id
        - user
        - purpose
        - currency
        - amount
        - tax
        - state
        - num_expenses
        - is_manually_flagged
        - is_policy_flagged
        - last_paid_at
        - last_approved_at
        - last_submitted_at
        - last_resubmitted_at
        - seq_num
        - source
        - approvals
        - employee
        - next_approver_user_ids
        - comments
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          $ref: '#/components/schemas/id_string'
        user:
          $ref: '#/components/schemas/user_out_embed'
        purpose:
          type: string
          description: purpose for creating the report
          example: Business trip to London
          nullable: true
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        tax:
          type: number
          description: |
            Tax value of the object.
          example: 18.23
          nullable: true
        state:
          type: string
          enum:
            - DRAFT
            - APPROVER_PENDING
            - APPROVER_INQUIRY
            - PAYMENT_PROCESSING
            - APPROVED
            - PAYMENT_PENDING
            - PAID
        num_expenses:
          type: integer
          description: |
            Number of expenses part of this report
          example: 3
        is_verified:
          type: boolean
          nullable: true
          description: |
            Determines whether this report has been verified by a verifier
        is_physical_bill_submitted:
          type: boolean
          nullable: true
          description: |
            If physical has been collected for this report
        physical_bill_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when the physical bill for this report was submitted.
          nullable: true
        is_manually_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged manually
        is_policy_flagged:
          type: boolean
          description: |
            Determines whether this report was flagged from a policy
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this expense has been exported to external accounting system or not.
        last_paid_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was reimbursed.
          nullable: true
        last_approved_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was approved.
          nullable: true
        last_submitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was submitted.
          nullable: true
        last_resubmitted_at:
          type: string
          format: date-time
          example: '2020-06-11T13:14:55.201598+00:00'
          description: |
            Signifies if and when this report was resubmitted.
          nullable: true
        seq_num:
          type: string
          description: |
            A unique human readable identifier for the report
          example: C/2021/02/R/907
        source:
          type: string
          description: |
            where was this report object created from
          nullable: true
        approvals:
          type: array
          items:
            $ref: '#/components/schemas/report_approval_out_embed'
          description: |
            List of report_approval objects
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed_for_report'
        next_approver_user_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - us123heh98
        state_display_name:
          type: string
          example: Sent Back
          description: readable state name
        comments:
          type: array
          items:
            $ref: '#/components/schemas/report_comments_out_embed'
          description: |
            List of comments on the report
        accounting_export_summary:
          type: object
          description: |
            Summary of accounting export for this report.
          properties:
            state:
              type: string
              enum:
                - COMPLETE
                - ERROR
                - IN_PROGRESS
                - SKIPPED
                - INITIATED
              example: COMPLETE
            skipped:
              type: number
              description: |
                Number of skipped expenses.
              example: 2
            error:
              type: number
              description: |
                Number of failed expenses.
              example: 0
            complete:
              type: number
              description: |
                Number of complete expenses.
              example: 5
            in_progress:
              type: number
              description: |
                Number of in progress expenses.
              example: 0
            initiate:
              type: number
              description: |
                Number of initiated expenses.
              example: 0
            tpa_id:
              type: string
              nullable: false
              description: |
                Third party app id.
              example: tpa_1234567890
        applied_advance_wallets:
          type: array
          items:
            $ref: '#/components/schemas/advance_wallet_report_out'
          nullable: true
          description: |
            List of applied advance wallets
    report_out_subscriptions_admin:
      type: object
      additionalProperties: false
      required:
        - resource
        - action
        - data
        - reason
      properties:
        resource:
          type: string
          example: REPORT
        action:
          type: string
          enum:
            - ACCOUNTING_EXPORT_INITIATED
            - APPROVED
            - ADMIN_APPROVED
            - STATE_CHANGE_PAYMENT_PROCESSING
            - MARK_PAID
          example: ADMIN_APPROVED
        data:
          allOf:
            - $ref: '#/components/schemas/report_out'
            - type: object
              additionalProperties: false
              properties:
                updated_by_user:
                  $ref: '#/components/schemas/user_out_embed'
        reason:
          type: string
          example: Admin approved the report.
    reimbursement_out:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id provided by Fyle to uniquely identify a reimbursement.
            This id is always prefixed with `reim`.
          readOnly: true
          example: reimntGt9ju6qP
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        reimbursement_number:
          type: string
          description: |
            A unique, organization wide identifier for a particular reimbursement.<br>
            This id is always prefixed with `P/`.
          example: P/2020/11/29
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        org_id:
          $ref: '#/components/schemas/org_id'
        currency:
          $ref: '#/components/schemas/currency'
        amount:
          $ref: '#/components/schemas/amount'
        is_paid:
          type: boolean
          example: true
        paid_at:
          $ref: '#/components/schemas/timestamptz_utc'
        mode:
          type: string
          enum:
            - ACH
            - OFFLINE
          description: |
            Mode of creation of this reimbursement.
          example: OFFLINE
        purpose:
          type: string
          description: |
            Details about purpose of this reimbursement.
          example: End of month settlement
        is_exported:
          type: boolean
          nullable: true
          description: |
            Determines whether this reimbursement has been exported to external
            accounting system or not.
        code:
          $ref: '#/components/schemas/code'
        employee_id:
          $ref: '#/components/schemas/employee_id'
        employee:
          $ref: '#/components/schemas/employee_out_embed'
    reimbursement_in_minimal:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
          description: |
            This id provided by Fyle to uniquely identify a reimbursement.
            This id is always prefixed with `reim`.
          example: reimntGt9ju6qP
        code:
          $ref: '#/components/schemas/code'
    account_minimal:
      description: |
        Account of a user belonging to any org
      type: object
      nullable: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: acwbl222wlg
        currency:
          $ref: '#/components/schemas/currency'
        current_balance_amount:
          type: number
          example: 50
        tentative_balance_amount:
          type: number
          example: 100
    employee_account_summary_out:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        org_id:
          $ref: '#/components/schemas/org_id'
        org_currency:
          $ref: '#/components/schemas/currency'
        user_email:
          $ref: '#/components/schemas/email'
        user_full_name:
          type: string
          description: |
            This represents the full name of the employee
          example: foo123
        cash_account_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: accHbfr7An39w
        cash_account:
          $ref: '#/components/schemas/account_minimal'
        cash_account_balance:
          $ref: '#/components/schemas/amount'
        ccc_account_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: accHbfr7An39w
        ccc_account:
          $ref: '#/components/schemas/account_minimal'
        ccc_account_balance:
          $ref: '#/components/schemas/amount'
        advance_account_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          example:
            - acwbl222wlg
            - accg30nel335
        advance_accounts:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/account_minimal'
        advance_accounts_balance:
          $ref: '#/components/schemas/amount'
        is_settleable:
          type: boolean
          description: |
            This indicates whether the user's accounts can be settled or not.
          example: true
    schedule_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        config:
          $ref: '#/components/schemas/schedule_config'
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          type: string
          description: |
            The unique id of an user to which the object is associated.
          readOnly: true
          example: uswjwgnwwgo
          nullable: true
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    event_payload:
      nullable: true
      type: object
      properties:
        resource_id:
          nullable: true
          type: string
          example: tx123TRew12
        resource_name:
          nullable: true
          type: string
          example: TRANSACTION
    schedule_in:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        event_payload:
          $ref: '#/components/schemas/event_payload'
        config:
          $ref: '#/components/schemas/schedule_config'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        event_name:
          type: string
          nullable: true
          example: report.created
    scheduled_callback_url:
      type: string
      description: |
        URL Endpoint for scheduled callback
      example: https://api.custom.com/expenses/export/
    scheduled_callback_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        url:
          $ref: '#/components/schemas/scheduled_callback_url'
        payload:
          $ref: '#/components/schemas/event_payload'
        schedule_config:
          $ref: '#/components/schemas/schedule_config'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        org_id:
          $ref: '#/components/schemas/org_id'
    scheduled_callback_in:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        url:
          $ref: '#/components/schemas/scheduled_callback_url'
        payload:
          $ref: '#/components/schemas/event_payload'
        schedule_config:
          $ref: '#/components/schemas/schedule_config'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    time_interval_granularity:
      type: string
      nullable: false
      enum:
        - day
        - month
        - quarter
        - year
      description: |
        The time duration by which to group expenses to aggregate sum of amount
      example: month
    total_amount:
      type: number
      nullable: false
      description: |
        Total sum of amount of expenses falling under filtering criteria
      example: 990
    time_interval_marker:
      type: string
      nullable: false
      description: |
        Representation of a point in time for which the sum of amount of expenses is calculated.
        Value depends of value of time_interval_granularity as follows :
        - for time_interval_granularity of `day`, value will be in date format YYYY-MM-DD. Example : 2021-01-01
        - for time_interval_granularity of `month`, value will be in date format YYYY-MM. Example : 2021-01
        - for time_interval_granularity of `quarter`, value will be in date format YYYY-QQ. Example : 2021-Q1
        - for time_interval_granularity of `year`, value will be in date format YYYY. Example : 2021
      example: 2022-02
    spend_overview_summary_data_out:
      type: object
      nullable: false
      properties:
        amount:
          $ref: '#/components/schemas/amount'
        time_interval_marker:
          $ref: '#/components/schemas/time_interval_marker'
    spend_overview_percentage:
      type: number
      description: |
        Percentage of spend which falls under this object/resource after filtering criteria is applied.
      example: 10.34
    spend_overview_change_percentage:
      type: number
      description: |
        Change in percentage of spend compared to spend in same time period one time interval ago, after filtering criteria is applied.
      example: -4.95
    spend_overview_by_merchant_data_out:
      type: object
      nullable: false
      properties:
        merchant_name:
          $ref: '#/components/schemas/merchant'
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    project_display_name:
      type: string
      nullable: false
      description: |
        String denoting the display name of a project.
      example: Westeros / Casterly rocks
    spend_overview_by_project_data_out:
      type: object
      nullable: false
      properties:
        project_id:
          $ref: '#/components/schemas/id_integer'
        project_display_name:
          $ref: '#/components/schemas/project_display_name'
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    category_display_name:
      type: string
      nullable: false
      description: |
        String denoting the display name of a category.
      example: Wildlings / Thenns
    spend_overview_by_category_data_out:
      type: object
      nullable: false
      properties:
        category_id:
          $ref: '#/components/schemas/id_integer'
        category_display_name:
          $ref: '#/components/schemas/category_display_name'
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    department_display_name:
      type: string
      nullable: false
      description: |
        String denoting the display name of a department.
      example: Knights / Kingsguard
    spend_overview_by_department_data_out:
      type: object
      nullable: false
      properties:
        department_id:
          $ref: '#/components/schemas/id_string'
        department_display_name:
          $ref: '#/components/schemas/department_display_name'
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    spend_overview_by_user_data_out:
      type: object
      nullable: false
      properties:
        user_id:
          $ref: '#/components/schemas/id_string'
        user_full_name:
          $ref: '#/components/schemas/user_full_name'
        user_email:
          $ref: '#/components/schemas/email'
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    spend_overview_by_corporate_card_data_out:
      type: object
      nullable: false
      properties:
        card_id:
          $ref: '#/components/schemas/id_string'
        card_number:
          $ref: '#/components/schemas/card_number'
        card_holder_name:
          type: string
          nullable: true
          maxLength: 255
          description: |
            String denoting the name on the corporate card. This can be null.
          example: Jon Snow
        card_nickname:
          type: string
          maxLength: 25
          nullable: true
          description: |
            Unique nickname assigned to the card
          example: Business Card
        user_id:
          type: string
          nullable: true
          maxLength: 15
          description: |
            This id provided by Fyle to identify a user. This can be null if the corporate card is not assigned to any user.
          example: sdfd2391
        amount:
          $ref: '#/components/schemas/amount'
        percentage:
          $ref: '#/components/schemas/spend_overview_percentage'
        change_percentage:
          $ref: '#/components/schemas/spend_overview_change_percentage'
    account_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: acwbl222wlg
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        user_id:
          type: string
          nullable: true
          description: |
            The unique id of an user to which the object is associated.
          example: uswjwgnwwgo
        type:
          type: string
          enum:
            - PERSONAL_CASH_ACCOUNT
            - PERSONAL_CORPORATE_CREDIT_CARD_ACCOUNT
            - PERSONAL_ADVANCE_ACCOUNT
            - COMPANY_EXPENSE_ACCOUNT
            - COMPANY_CORPORATE_CREDIT_CARD_ACCOUNT
            - COMPANY_CATEGORY_ACCOUNT
          example: PERSONAL_CASH_ACCOUNT
        currency:
          $ref: '#/components/schemas/currency'
        current_balance_amount:
          type: number
          example: 90.9
        tentative_balance_amount:
          type: number
          example: 43.8
        org_id:
          $ref: '#/components/schemas/org_id'
        category_id:
          type: integer
          description: |
            This id is provided by Fyle to identify a category.
          nullable: true
          example: 49058
    account_in:
      type: object
      additionalProperties: false
      properties:
        user_id:
          type: string
          nullable: true
          description: |
            The unique id of an user to which the object is associated.
          example: uswjwgnwwgo
        type:
          type: string
          enum:
            - PERSONAL_ADVANCE_ACCOUNT
          example: PERSONAL_ADVANCE_ACCOUNT
        currency:
          $ref: '#/components/schemas/currency'
        category_id:
          type: integer
          description: |
            This id is provided by Fyle to identify a category.
          nullable: true
          example: 49058
    tax_group_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: tgwfjbgqo32
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the tax_group.
        percentage:
          type: number
          minimum: 0
          maximum: 100
          example: 18
          description: percentage of tax levied.
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        code:
          $ref: '#/components/schemas/code'
    tax_group_in:
      type: object
      required:
        - name
        - percentage
        - is_enabled
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: tgwfjbgqo32
        name:
          type: string
          maxLength: 255
          example: Engine
          description: Represents the name of the tax_group.
        percentage:
          type: number
          minimum: 0
          maximum: 100
          example: 18
          description: percentage of tax levied.
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        code:
          $ref: '#/components/schemas/code'
    budget_type:
      nullable: false
      type: string
      enum:
        - WEEKLY
        - MONTHLY
        - QUARTERLY
        - HALF_YEARLY
        - YEARLY
        - ONE_TIME
      description: |
        Type of budgets
      example: WEEKLY
    budget_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales
        type:
          $ref: '#/components/schemas/budget_type'
        amount_limit:
          $ref: '#/components/schemas/amount'
        alert_threshold:
          nullable: true
          type: number
          example: 5000
        department_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - 2222
            - 1221
          description: |
            List of department ids
        project_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids
        cost_center_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of cost center ids
        category_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of category ids
        observer_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - usge49ielgel
        fiscal_year_start_month:
          type: number
          example: 10
          description: Month number of start of fiscal year
          minimum: 1
          maximum: 12
        budget_start_date:
          type: string
          nullable: true
          format: date-time
          example: '2022-04-01T00:00:00+00:00'
          description: Start date of the current budget interval
        budget_end_date:
          type: string
          nullable: true
          format: date-time
          example: '2022-04-30T00:00:00+00:00'
          description: End date of the current budget interval
        budget_creator:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/id_string'
            name:
              $ref: '#/components/schemas/name'
            email:
              $ref: '#/components/schemas/email'
          example:
            id: usq8rwZj2POy
            name: John Brown
            email: admin1@company.com
        amount_spent:
          type: number
          nullable: true
          example: 5000
          description: Amount spent from the budget interval
        amount_remaining:
          type: number
          nullable: true
          example: 5000
          description: Amount remaining in the budget interval
        utilisation_percentage:
          type: number
          nullable: true
          example: 50
          description: Utilisation percentage of the budget interval
    budget_in:
      type: object
      required:
        - is_enabled
        - name
        - type
        - observer_ids
        - amount_limit
        - fiscal_year_start_month
        - department_ids
        - project_ids
        - cost_center_ids
        - category_ids
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales Montly Budget
        type:
          $ref: '#/components/schemas/budget_type'
        amount_limit:
          allOf:
            - $ref: '#/components/schemas/amount'
          example: 10000
        alert_threshold:
          nullable: true
          type: number
          example: 5000
        department_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - 2222
            - 1221
          description: |
            List of department ids
        project_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids
        cost_center_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of cost center ids
        category_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of category ids
        observer_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - usge49ielgel
        fiscal_year_start_month:
          type: number
          example: 10
          description: Month number of start of fisical year
          minimum: 1
          maximum: 12
    budget_out_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
          example: Sales Montly Budget
        type:
          $ref: '#/components/schemas/budget_type'
        amount_limit:
          allOf:
            - $ref: '#/components/schemas/amount'
          example: 10000
        is_enabled:
          $ref: '#/components/schemas/is_enabled'
    budget_usage_out:
      type: object
      required:
        - budget_id
        - budget_observer_ids
        - spent
        - amount_limit
        - budget
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        org_id:
          $ref: '#/components/schemas/id_string'
        budget_id:
          $ref: '#/components/schemas/id_string'
        start_date:
          type: string
          nullable: true
          format: date-time
          example: 2020-06-11T00.00.00Z
          description: Start date of the cycle of the budget
        end_date:
          type: string
          nullable: true
          format: date-time
          example: 2020-06-11T00.00.00Z
          description: End date of the cycle of the budget
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        budget_observer_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - usge49ielgel
        spent:
          allOf:
            - $ref: '#/components/schemas/amount'
          example: 1000
        amount_limit:
          allOf:
            - $ref: '#/components/schemas/amount'
          example: 10000
        budget_department_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - 2222
            - 1221
          description: |
            List of department ids
        budget_project_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          example:
            - 2222
            - 1221
          description: |
            List of project ids
        budget:
          $ref: '#/components/schemas/budget_out_embed'
    org_out:
      type: object
      additionalProperties: false
      required:
        - id
        - name
        - domain
        - currency
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/org_id'
        name:
          type: string
          maxLength: 255
          description: Represents the name of the org.
          example: Demo Account
        domain:
          type: string
          maxLength: 255
          description: This field specifies the domain with which the organisation is registered.
          example: example.com
        currency:
          $ref: '#/components/schemas/currency'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        is_current:
          type: boolean
          description: A boolean flag indicating whether the organisation is the current organisation the user is logged into.
        is_primary:
          type: boolean
          description: A boolean flag indicating whether the organisation is the primary organisation of the user.
    expense_policy_limit_type:
      nullable: true
      type: string
      enum:
        - INDIVIDUAL
        - DAILY
        - NIGHTLY
        - WEEKLY
        - MONTHLY
        - QUARTERLY
        - HALF_YEARLY
        - YEARLY
        - LIFETIME
        - null
      example: MONTHLY
    contains_operator:
      nullable: true
      type: string
      enum:
        - IN
        - NOT_IN
        - null
      description: |
        Value signifying the operator for the field
      example: IN
    policy_payment_modes:
      nullable: true
      type: array
      items:
        type: string
        enum:
          - PERSONAL_CASH_ACCOUNT
          - PERSONAL_CORPORATE_CREDIT_CARD_ACCOUNT
          - COMPANY_ACCOUNT
          - null
      example: PERSONAL_CASH_ACCOUNT
    vehicle_type:
      type: string
      enum:
        - bicycle
        - electric_car
        - four_wheeler
        - four_wheeler1
        - four_wheeler2
        - four_wheeler3
        - four_wheeler4
        - two_wheeler
      example: electric_car
    expense_policy_out:
      type: object
      additionalProperties: true
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This represents the id of the expense policy rule.
          example: tpr12345xyz
        description:
          allOf:
            - $ref: '#/components/schemas/description'
          description: |
            This represents the description of the expense policy rule.
          example: Receipt is mandatory for expense above $50
        source:
          type: string
          enum:
            - WEBAPP_POLICY_FORM
            - WEBAPP_POLICY_JSON
            - WEBAPP_EXPENSE_RECEIPT_AMOUNT_LIMIT
            - WEBAPP_EXPENSE_MILEAGE_SLAB_RATE
            - WEBAPP_PROJECT_APPROVAL
            - DEFAULT_PRIMARY_APPROVER_POLICY
          description: |
            This represents the source of the expense policy rule, i.e. from where it was created.
          example: WEBAPP_POLICY_FORM
        is_enabled:
          type: boolean
          description: |
            Whether the policy rule is active or not.
        is_retired:
          type: boolean
          description: |
            Whether the policy rule is retired and can't be made active again.
        is_approver_policy:
          type: boolean
          description: |
            Whether the policy rule adds an approver to the expense on violation.
        approver_order:
          type: number
          nullable: true
          description: |
            This number indicates the order of the approver expense policy rule in the defined approval sequence. For non-approver policies, this field will be null.
          minimum: 1
          example: 3
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        expense_limit_type:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/expense_policy_limit_type'
          description: |
            Value signifying the limit type of the expense policy.
        expense_currency:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/currency'
            - $ref: '#/components/schemas/null_field'
          description: |
            The three-letter currency code following ISO standard <a
            href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.
        expense_amount_max:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            If an expense's amount exceeds this value, this policy rule will be violated for that expense.
          example: 10000
        expense_amount_min:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            If an expense's amount falls behind this value, this policy rule will be violated for that expense.
          example: 500
        expense_fiscal_start_month:
          nullable: true
          type: number
          description: |
            Month number of start of fiscal year.
          example: 4
          minimum: 1
          maximum: 12
        expense_distance_max:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/distance'
          description: |
            If an expense's distance exceeds this value, this policy rule will be violated for that expense.
          example: 10000
        expense_distance_min:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/distance'
          description: |
            If an expense's distance falls behind this value, this policy rule will be violated for that expense.
          example: 500
        expense_category_ids:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of category ids considered by this policy rule.
          example:
            - 2222
            - 1221
        expense_category_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the categories listed in the field `expense_category_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the categories listed in the field `expense_category_ids`.
        expense_project_ids:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of project ids considered by this policy rule.
          example:
            - 1234
            - 5678
        expense_project_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the projects listed in the field `expense_project_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the projects listed in the field `expense_project_ids`.
        expense_cost_center_ids:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of cost centers ids considered by this policy rule.
          example:
            - 1987
            - 3456
        expense_cost_center_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the cost centers listed in the field `expense_cost_center_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the cost centers listed in the field `expense_cost_center_ids`.
        expense_allowed_exchange_rate_difference_percentage:
          nullable: true
          type: number
          description: |
            Allowed percentage difference for exchange rates beyond which this policy rule will be violated.
          example: 10
          minimum: 0
          maximum: 100
        expense_allowed_distance_difference_percentage:
          nullable: true
          type: number
          description: |
            Allowed distance percentage difference beyond which this policy rule will be violated.
          example: 8
          minimum: 0
          maximum: 100
        expense_custom_fields:
          allOf:
            - $ref: '#/components/schemas/custom_fields'
          description: |
            Custom fields (if any)
        expense_custom_fields_op:
          nullable: true
          type: object
          description: |
            Operator for the expense_custom_fields.
          properties:
            field_name:
              type: string
        expense_locations:
          nullable: true
          description: |
            Location of expense considered by this policy rule.
          type: array
          items:
            $ref: '#/components/schemas/location'
        expense_locations_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        expense_creation_delay_days_max:
          nullable: true
          type: number
          example: 12
          description: |
            This value decides how delayed an expense creation can be. If the expense is created after this many days of spend date, this policy rule will be violated.
        expense_without_receipt_allowed:
          type: boolean
          description: |
            If this is set to false, then for all such expenses that doesn't have receipt, this policy rule will be violated.
          default: true
          example: true
        expense_spent_at_max:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_pst'
          description: |
            If an expense's spend date exceeds this value, this policy rule will be violated for that expense.
        expense_spent_at_min:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/timestamptz_pst'
          description: |
            If an expense's spend date falls behind this value, this policy rule will be violated for that expense.
        expense_payment_modes:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/policy_payment_modes'
          description: |
            Payment mode for expense to be considered by the policy rule.
        expense_payment_modes_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        expense_without_ccc_match_allowed:
          type: boolean
          description: |
            If this is set to false, then for all such expenses that are not matched to corporate credit card transaction, this policy rule will be violated.
          default: true
          example: true
        expense_include_foreign_currency:
          type: boolean
          description: |
            If this is set to true, then for all such expenses that are created in foreign currency, this policy rule will be applicable.
          default: false
          example: true
        expense_flight_travel_class:
          nullable: true
          type: array
          description: |
            This field is applicable only for Flight category. <br> List of travel classes considered by this policy rule.
          items:
            type: string
          example:
            - BUSINESS
            - ECONOMY
        expense_train_travel_class:
          nullable: true
          type: array
          description: |
            This field is applicable only for Train category. <br> List of travel classes considered by this policy rule.
          items:
            type: string
          example:
            - AC First Class
            - Second Sitting
        expense_vehicle_type:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/vehicle_type'
            - $ref: '#/components/schemas/null_field'
          description: |
            Vehicle type considered by this policy rule.
        expense_annual_distance_max:
          nullable: true
          type: number
          example: 1200
          description: |
            If an expense's annual distance exceeds this value, this policy rule will be violated for that expense.
        employee_level_ids:
          nullable: true
          type: array
          description: |
            Employee level ids considered by this policy rule.
          items:
            type: string
          example:
            - lvl1sdfad
            - lvl2sdfas
        employee_level_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        employee_custom_fields:
          allOf:
            - $ref: '#/components/schemas/custom_fields'
          description: |
            Custom fields (if any)
        employee_custom_fields_op:
          nullable: true
          type: object
          description: |
            Operator for the employee_custom_fields.
          properties:
            field_name:
              type: string
        employee_department_ids:
          nullable: true
          type: array
          description: |
            Employee department ids considered by this policy rule.
          items:
            type: string
          example:
            - dept1asdfa
            - dept2adfad
        employee_department_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        employee_locations:
          nullable: true
          description: |
            Location of employees considered by this policy rule. <br>
            If this is set, then for all such employees whose location is in `employee_locations`, this policy rule will be applicable.
          type: array
          items:
            $ref: '#/components/schemas/location'
        employee_locations_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        employee_user_ids:
          nullable: true
          type: array
          description: |
            Employee user ids considered by this policy rule.
          items:
            type: string
          example:
            - usabcds1
            - usabcds2
        employee_user_ids_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        employee_titles:
          nullable: true
          type: array
          description: |
            Employee titles considered by this policy rule.
          items:
            type: string
          example:
            - CEO
            - Manager
        employee_titles_op:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/contains_operator'
        action_flag:
          type: boolean
          description: |
            If it is set to true, then the expense(s) violating this policy rule, will be flagged.
          default: false
          example: true
        action_show_warning:
          type: boolean
          description: |
            If it is set to true, then a warning is shown to the employee, whenever he attempts to create an expense that violates this policy rule.
          default: false
          example: true
        action_make_unreportable:
          type: boolean
          description: |
            If it is set to true, then the expense(s) violating this policy rule, will be made unreportable. <br>
            (Expense will be created but employee will not be able to add it to report).
          default: false
          example: true
        action_remove_employee_approver1:
          type: boolean
          description: |
            If this is set to true, then the employee's first approver will be removed from the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_employee_approver2:
          type: boolean
          description: |
            If this is set to true, then the employee's second approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_employee_approver3:
          type: boolean
          description: |
            If this is set to true, then the employee's third approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_project_approver1:
          type: boolean
          description: |
            If this is set to true, then the project's first approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_project_approver2:
          type: boolean
          description: |
            If this is set to true, then the project's second approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_department_head_approver:
          type: boolean
          description: |
            If this is set to true, then the employee's department approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_cap_amount:
          type: boolean
          description: |
            If it is set to true, then expense's amount will be capped to `expense_amount_max` when the expense(s) violates this policy rule.
          default: false
          example: true
        action_add_approver_user_ids:
          nullable: true
          type: array
          description: |
            List of approver user ids that will be added to the report that contains expense(s) violating this policy rule.
          items:
            type: string
          example:
            - usabcds3
            - usabcds4
        action_override_distance_slab_rate:
          nullable: true
          type: number
          description: |
            When annual mileage distance limit exceeds `expense_annual_distance_max` for `expense_vehicle_type`, this rate will be applied afterwards.
          example: 20
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
    expense_policy_in:
      type: object
      required:
        - description
      additionalProperties: true
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This represents the id of the expense policy rule.<br><br>
            _Note: When creating the policy rule, this field shouldn't be set._<br>
            _When updating, this field should be set._
          example: tpr12345xyz
        description:
          allOf:
            - $ref: '#/components/schemas/description'
          nullable: false
          description: |
            This represents the description of the expense policy rule.
          example: Receipt is mandatory for expense above $50
        expense_without_receipt_allowed:
          type: boolean
          description: |
            If this is set to false, then for all such expenses that doesn't have receipt, this policy rule will be violated. <br>
            **Note: If this field is set to false i.e. receipts are mandatory, only following conditions & actions are allowed =>**
            - expense_category_ids
            - expense_category_ids_op
            - expense_project_ids
            - expense_project_ids_op
            - expense_cost_center_ids
            - expense_cost_center_ids_op
            - expense_limit_type (only `INIDIVIDUAL` type is allowed)
            - expense_currency
            - expense_amount_max
            - expense_payment_modes
            - expense_payment_modes_op
            - expense_without_ccc_match_allowed
            - employee_department_ids
            - employee_department_ids_op
            - employee_locations
            - employee_user_ids
            - employee_user_ids_op
            - employee_titles
            - employee_titles_op
            - action_flag
            - action_show_warning
            - action_make_unreportable
            - description
          default: true
          example: true
        expense_limit_type:
          oneOf:
            - $ref: '#/components/schemas/expense_policy_limit_type'
          description: |
            Value signifying the limit type of the expense policy. <br><br>
            `INDIVIDUAL`: Amount limit will be checked against each expense. <br>
            `DAILY`: Amount limit will be checked against the total of all expenses in a day. <br>
            `NIGHTLY`: Amount limit will be checked against the hotel cost per night. <br>
            `WEEKLY`: Amount limit will be checked against the total of all expenses in a week. <br>
            `MONTHLY`: Amount limit will be checked against the total of all expenses in a month. <br>
            `QUARTERLY`: Amount limit will be checked against the total of all expenses in a financial quarter. <br>
            `HALF_YEARLY`: Amount limit will be checked against the total of all expenses in a financial half-year. <br>
            `YEARLY`: Amount limit will be checked against the total of all expenses in a financial year. <br>
            `LIFETIME`: Amount limit will be checked against the total amount of all expenses throughout employee duration in the organisation. <br><br>
            **Note: If this field is set(to any value), then the following fields are mandatory in the request body:** <br>
            - `expense_currency`
            - Either `expense_amount_max` or `expense_amount_min` <br>
            **Note: If this field is set to QUARTERLY, HALF_YEARLY or YEARLY, then the following additional fields are mandatory in the request body:** <br>
            - `expense_fiscal_start_month`
        expense_currency:
          allOf:
            - $ref: '#/components/schemas/currency'
          description: |
            The three-letter currency code following ISO standard <a
            href='https://www.iso.org/iso-4217-currency-codes.html'>ISO 4217</a>.<br>
            _Note: `expense_amount_max` or `expense_amount_min` is mandatory if the field `expense_currency` is present in the request body._
        expense_amount_max:
          anyOf:
            - $ref: '#/components/schemas/amount'
          description: |
            If an expense's amount exceeds this value, this policy rule will be violated for that expense.<br>
            _Note: `expense_currency` and `expense_limit_type` is mandatory if the field `expense_amount_max` is present in the request body._
          example: 10000
        expense_amount_min:
          anyOf:
            - $ref: '#/components/schemas/amount'
          description: |
            If an expense's amount falls behind this value, this policy rule will be violated for that expense..<br>
            _Note: `expense_currency` and `expense_limit_type` is mandatory if the field `expense_amount_min` is present in the request body._
          example: 500
        expense_fiscal_start_month:
          type: number
          description: |
            Month number of start of fiscal year.<br>
            _Note: This fields is required when `expense_limit_type` is QUARTERLY, HALF_YEARLY or YEARLY._
          example: 4
          minimum: 1
          maximum: 12
        expense_distance_max:
          allOf:
            - $ref: '#/components/schemas/distance'
          description: |
            If an expense's distance exceeds this value, this policy rule will be violated for that expense.<br>
            _Note: `expense_category_ids` with mileage category is mandatory if the field `expense_distance_max` is present in the request body._
          example: 10000
        expense_distance_min:
          allOf:
            - $ref: '#/components/schemas/distance'
          description: |
            If an expense's distance falls behind this value, this policy rule will be violated for that expense.<br>
            _Note: `expense_category_ids` with mileage category is mandatory if the field `expense_distance_min` is present in the request body._
          example: 500
        expense_category_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of category ids considered by this policy rule. <br>
            _Note: You need to use field `expense_category_ids_op` along with this field._
          example:
            - 2222
            - 1221
        expense_category_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the categories listed in the field `expense_category_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the categories listed in the field `expense_category_ids`.
        expense_project_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of project ids considered by this policy rule. <br>
            _Note: You need to use field `expense_project_ids_op` along with this field._
          example:
            - 1234
            - 5678
        expense_project_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the projects listed in the field `expense_project_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the projects listed in the field `expense_project_ids`.
        expense_cost_center_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_integer'
          description: |
            List of cost centers ids considered by this policy rule. <br>
            _Note: You need to use field `expense_cost_center_ids_op` along with this field._
          example:
            - 1987
            - 3456
        expense_cost_center_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            - If it is set to IN, this policy rule will be applicable to all the expenses that belong to any of the cost centers listed in the field `expense_cost_center_ids`.
            - If it is set to NOT_IN, this policy rule will be applicable to all the expenses that do not belong to any of the cost centers listed in the field `expense_cost_center_ids`.
        expense_allowed_exchange_rate_difference_percentage:
          type: number
          description: |
            Allowed percentage difference for exchange rates beyond which this policy rule will be violated.
          example: 10
          minimum: 0
          maximum: 100
        expense_allowed_distance_difference_percentage:
          type: number
          description: |
            Allowed distance percentage difference beyond which this policy rule will be violated.<br>
            _Note: `expense_category_ids` with mileage category is mandatory if the field `expense_allowed_distance_difference_percentage` is present in the request body._
          example: 8
          minimum: 0
          maximum: 100
        expense_custom_fields:
          allOf:
            - $ref: '#/components/schemas/custom_fields'
          description: |
            Custom fields (if any)<br>
            _Example -> "No. of days": 5_ <br>
            _Note: You need to use field `expense_custom_fields_op` along with this field._
        expense_custom_fields_op:
          type: object
          description: |
            Operator for the expense_custom_fields. <br>
            _Format -> field_name: operator_ <br>
            _Example -> "No. of days": "GREATER_THAN_EQUAL_TO"_ <br><br>
            Supported values based on field type: <br>
            `Boolean`: `IS`, `NOT_IS` <br>
            `Date`: `LESS_THAN_EQUAL_TO`, `GREATER_THAN_EQUAL_TO` <br>
            `Location`: `IN`, `NOT_IN` <br>
            `Number`: `LESS_THAN_EQUAL_TO`, `GREATER_THAN_EQUAL_TO` <br>
            `String`: `CONTAINS`, `EQUALS` <br>
            `Select`: `IN`, `NOT_IN`<br>
            _Note: This field is mandatory if the field `expense_custom_fields` is present in the request body._
          properties:
            field_name:
              type: string
        expense_locations:
          description: |
            Location of expense considered by this policy rule. <br>
            If this is set, then for all such expenses that have a location - like expenses of category Flight, Train, Bus, Hotel, etc. - this policy rule will be applicable. <br>
            _Note: You need to use field `expense_locations_op` along with this field._
          type: array
          items:
            $ref: '#/components/schemas/location'
        expense_locations_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `expense_locations` is present in the request body._
        expense_creation_delay_days_max:
          type: number
          example: 12
          description: |
            This value decides how delayed an expense creation can be. If the expense is created after this many days of spend date, this policy rule will be violated.
        expense_spent_at_max:
          allOf:
            - $ref: '#/components/schemas/timestamptz_pst'
          description: |
            If an expense's spend date exceeds this value, this policy rule will be violated for that expense.
        expense_spent_at_min:
          allOf:
            - $ref: '#/components/schemas/timestamptz_pst'
          description: |
            If an expense's spend date falls behind this value, this policy rule will be violated for that expense
        expense_payment_modes:
          allOf:
            - $ref: '#/components/schemas/policy_payment_modes'
          description: |
            Payment mode for expense to be considered by the policy rule. <br>
            _Note: You need to use field `expense_payment_modes_op` along with this field._
        expense_payment_modes_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `expense_payment_modes` is present in the request body._
        expense_without_ccc_match_allowed:
          type: boolean
          description: |
            If this is set to false, then for all such expenses that are not matched to corporate credit card transaction, this policy rule will be violated.
          default: true
          example: true
        expense_include_foreign_currency:
          type: boolean
          description: |
            If this is set to true, then for all such expenses that are created in foreign currency, this policy rule will be applicable.
          default: false
          example: true
        expense_flight_travel_class:
          type: array
          description: |
            This field is applicable only for Train category. <br> List of travel classes considered by this policy rule. _Note: `expense_category_ids` with train category is mandatory if the field `expense_train_travel_class` is present in the request body._
          items:
            type: string
          example:
            - BUSINESS
            - ECONOMY
        expense_train_travel_class:
          type: array
          description: |
            This field is applicable only for Train category. <br> List of travel classes considered by this policy rule. _Note: `expense_category_ids` with train category is mandatory if the field `expense_train_travel_class` is present in the request body._
          items:
            type: string
          example:
            - AC First Class
            - Second Sitting
        expense_vehicle_type:
          allOf:
            - $ref: '#/components/schemas/vehicle_type'
          description: |
            Vehicle type considered by this policy rule. <br>
            _Note: `expense_annual_distance_max` and `action_override_distance_slab_rate` is mandatory if the field `expense_vehicle_type` is present in the request body._
        expense_annual_distance_max:
          type: number
          example: 1200
          description: |
            If an expense's annual distance exceeds this value, this policy rule will be violated for that expense.<br>
            _Note: `expense_vehicle_type` and `action_override_distance_slab_rate` is mandatory if the field `expense_annual_distance_max` is present in the request body._
        employee_level_ids:
          type: array
          description: |
            Employee level ids considered by this policy rule. <br>
            _Note: You need to use field `employee_level_ids_op` along with this field._
          items:
            type: string
          example:
            - lvl1sdfad
            - lvl2sdfas
        employee_level_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            Note: This field is mandatory if the field `employee_level_ids` is present in the request payload/body.
        employee_custom_fields:
          allOf:
            - $ref: '#/components/schemas/custom_fields'
          description: |
            Custom fields (if any)<br>
            _Example -> "Employee Age": 30_ <br>
            _Note: You need to use field `employee_custom_fields_op` along with this field._
        employee_custom_fields_op:
          type: object
          description: |
            Operator for the employee_custom_fields. <br>
            _Format -> field_name: operator_ <br>
            _Example -> "Employee Age": "GREATER_THAN_EQUAL_TO"_ <br><br>
            Supported values based on field type: <br>
            `Boolean`: `IS`, `NOT_IS` <br>
            `Date`: `LESS_THAN_EQUAL_TO`, `GREATER_THAN_EQUAL_TO` <br>
            `Location`: `IN`, `NOT_IN` <br>
            `Number`: `LESS_THAN_EQUAL_TO`, `GREATER_THAN_EQUAL_TO` <br>
            `String`: `CONTAINS`, `EQUALS` <br>
            `Select`: `IN`, `NOT_IN`<br>
            _Note: This field is mandatory if the field `employee_custom_fields` is present in the request body._
          properties:
            field_name:
              type: string
        employee_department_ids:
          type: array
          description: |
            Employee department ids considered by this policy rule. <br>
            _Note: You need to use field `employee_department_ids_op` along with this field._
          items:
            type: string
          example:
            - dept1asdfa
            - dept2adfad
        employee_department_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `employee_department_ids` is present in the request body._
        employee_locations:
          description: |
            Location of employees considered by this policy rule. <br>
            If this is set, then for all such employees whose location is in `employee_locations`, this policy rule will be applicable. <br>
            _Note: You need to use field `employee_locations_op` along with this field._
          type: array
          items:
            $ref: '#/components/schemas/location'
        employee_locations_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `employee_locations` is present in the request body._
        employee_user_ids:
          type: array
          description: |
            Employee user ids considered by this policy rule. <br>
            _Note: You need to use field `employee_user_ids_op` along with this field._
          items:
            type: string
          example:
            - usabcds1
            - usabcds2
        employee_user_ids_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `employee_user_ids` is present in the request body._
        employee_titles:
          type: array
          description: |
            Employee titles considered by this policy rule. <br>
            _Note: You need to use field `employee_titles_op` along with this field._
          items:
            type: string
          example:
            - CEO
            - Manager
        employee_titles_op:
          allOf:
            - $ref: '#/components/schemas/contains_operator'
          description: |
            _Note: This field is mandatory if the field `employee_titles` is present in the request body._
        action_flag:
          type: boolean
          description: |
            If it is set to true, then the expense(s) violating this policy rule, will be flagged.
          default: false
          example: true
        action_show_warning:
          type: boolean
          description: |
            If it is set to true, then a warning is shown to the employee, whenever he attempts to create an expense that violates this policy rule.
          default: false
          example: true
        action_make_unreportable:
          type: boolean
          description: |
            If it is set to true, then the expense(s) violating this policy rule, will be made unreportable. <br>
            (Expense will be created but employee will not be able to add it to report).
          default: false
          example: true
        action_remove_employee_approver1:
          type: boolean
          description: |
            If this is set to true, then the employee's first approver will be removed from the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_employee_approver2:
          type: boolean
          description: |
            If this is set to true, then the employee's second approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_employee_approver3:
          type: boolean
          description: |
            If this is set to true, then the employee's third approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_project_approver1:
          type: boolean
          description: |
            If this is set to true, then the project's first approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_project_approver2:
          type: boolean
          description: |
            If this is set to true, then the project's second approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_add_department_head_approver:
          type: boolean
          description: |
            If this is set to true, then the employee's department approver will be added to the report that contains expense(s) violating this policy rule.
          default: false
          example: true
        action_cap_amount:
          type: boolean
          description: |
            If it is set to true, then expense's amount will be capped to `expense_amount_max` when the expense(s) violates this policy rule.
          default: false
          example: true
        action_add_approver_user_ids:
          type: array
          description: |
            List of approver user ids that will be added to the report that contains expense(s) violating this policy rule.
          items:
            type: string
          example:
            - usabcds3
            - usabcds4
        action_override_distance_slab_rate:
          type: number
          description: |
            When annual mileage distance limit exceeds `expense_annual_distance_max` for `expense_vehicle_type`, this rate will be applied afterwards.<br>
            _Note: `expense_vehicle_type` and `expense_annual_distance_max` is mandatory if the field `action_override_distance_slab_rate` is present in the request body._
          example: 20
    expense_policy_state_change_in:
      type: object
      required:
        - id
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: tprXsN9xJXG4W
          description: |
            This represents the id of the expense policy rule.
    expense_policy_rule_embed:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          example: tpr1234abcd
          description: This represents the id of the expense policy rule that is violated for this expense.
        description:
          anyOf:
            - $ref: '#/components/schemas/description'
          description: |
            This represents the description of the expense policy rule that is violated for this expense.
          example: Receipt is mandatory for expense above $50
        action_show_warning:
          type: boolean
          description: |
            A true value here means that policy calculation suggests showing a warning when the user attempts to create an expense that violates this expense policy rule.
          example: true
        action_make_unreportable:
          type: boolean
          nullable: false
          description: |
            A true value here means that policy calculation suggests making the expense unreportable when the user attempts to create an expense that violates this expense policy rule.
          example: true
    expense_policy_expenses_query_object_params:
      type: object
      properties:
        category_id:
          type: string
          description: |
            Category ids query param to find the list of expenses.
          example: in.(60506)
        project_id:
          type: string
          description: |
            Project ids query param to find the list of expenses.
          example: in.(261155)
        cost_center_id:
          type: string
          description: |
            Cost center ids query param to find the list of expenses.
          example: in.(7475)
        currency:
          type: string
          description: |
            Currency query param to find the list of expenses.
          example: eq.USD
        mileage_rate_id:
          type: string
          description: |
            Mileage rate query param to find the list of expenses.
          example: eq.2
        employee_id:
          type: string
          description: |
            Employee id query param to find the list of expenses.
          example: eq.ouNSnadfaLA
    expense_policy_expenses_query_object:
      type: object
      description: |
        An expense may be violating an expense policy rule due to a group of other expenses.
        These query params can be used to fetch those expenses because of which this expense is causing a violation. <br>
        Below params should be ANDed to get the correct list of violating expenses.
      properties:
        limit_start_date:
          type: string
          description: |
            Spend start date query param to find the list of violating expenses.
          example: '2021-12-01'
        limit_end_date:
          type: string
          description: |
            Spend end date query param to find the list of violating expenses.
          example: '2022-03-31'
        params:
          $ref: '#/components/schemas/expense_policy_expenses_query_object_params'
    expense_policy_individual_desired_states:
      type: object
      properties:
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        approver_policy_order:
          type: integer
          nullable: true
          description: |
            This represents the order of the approver policy related to this individual desired state record.
            If the policy does not add any approver, this field will be null.
          example: 1
        approver_source:
          type: string
          enum:
            - PRIMARY_APPROVER
            - SECONDARY_APPROVER_1
            - SECONDARY_APPROVER_2
            - PROJECT_APPROVER_1
            - PROJECT_APPROVER_2
            - DEPARTMENT_HEAD_APPROVER
            - EMAIL_APPROVER
            - null
          nullable: true
          description: |
            This represents the type of approver(source) that was added by the approver policy related to this individual
            desired state record. If the policy does not add any approver, this field will be null.
          example: PROJECT_APPROVER_1
        run_status:
          nullable: false
          type: string
          enum:
            - VIOLATED_ACTION_SUCCESS
            - VIOLATED_ACTION_FAILURE
            - UNVIOLATED
          description: |
            This represent the status of policy computation for an expense against the policy. If the state is
            `UNVIOLATED`, it means that the expense is not violating the policy. If the state is `VIOLATION_ACTION_SUCCESS`,
            it means that expense is violating the policy and action stated in the object will be applied to
            expense. However, if the state is `VIOLATION_ACTION_FAILURE`, it means that the policy is violated for the
            expense but since some approver was missing or not setup properly, it will fail to take action
            on the expense
          example: SUCCESS
        run_result:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense. Note that, in
            case some approver was not setup properly for the given violation, this array will contain description of
            missing approvers. For example, Department approver, Project head, etc.
          example:
            - flag the expense
            - cap the amount
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        expense_policy_rule_id:
          type: string
          description: |
            This represents the id of the expense policy rule.
          example: tprabsdfSYqd
        rule:
          $ref: '#/components/schemas/expense_policy_rule_embed'
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        expenses_query_object_params:
          nullable: true
          $ref: '#/components/schemas/expense_policy_expenses_query_object'
    expense_policy_final_desired_state:
      type: object
      properties:
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        flag:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense should be flagged.
          example: true
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        unreportable:
          type: boolean
          nullable: false
          description: |
            A true value here means, that as per policy calculation this expense should be made unreportable.
          example: true
        is_receipt_mandatory:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense requires receipt.
          example: true
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        remove_employee_approver1:
          type: boolean
          description: |
            A true value here means, that as per policy calculation, the employee's first approver should be removed from the report that contains this expense.
          example: true
        run_status:
          nullable: false
          type: string
          enum:
            - SUCCESS
            - FAILURE
          description: |
            This represent the run status of the policy.
          example: SUCCESS
        run_summary:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense.
          example:
            - flag the expense
            - cap the amount
    expense_policy_states_out:
      type: object
      additionalProperties: false
      properties:
        expense_id:
          type: string
          description: |
            This represents the id of the expense.
          example: txabsdfSYqd
        individual_desired_states:
          type: array
          items:
            $ref: '#/components/schemas/expense_policy_individual_desired_states'
        final_desired_state:
          $ref: '#/components/schemas/expense_policy_final_desired_state'
    statements_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmtwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        file_name:
          type: string
          description: |
            Specifies the name of file uploaded by the user.
          example: amex.csv
        file_size:
          type: number
          description: |
            Specifies the size of file uploaded by the user. (The size is represented in bytes)
          example: 21
        no_of_debit:
          type: integer
          description: |
            Number of debit transactions in the statement uploaded by the user.
          example: 3
          nullable: true
        no_of_credit:
          type: integer
          description: |
            Number of credit transactions in the statement uploaded by the user.
          example: 3
          nullable: true
        no_of_transactions:
          type: integer
          description: |
            Number of transactions in the statement uploaded by the user.
          example: 6
        all_statement_columns:
          type: array
          items:
            type: string
          description: |
            This specifies headers of the statement uploaded by the user.
          example:
            - account_number
            - amount
        start_date:
          $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Start date of the statement period
          nullable: true
        end_date:
          $ref: '#/components/schemas/timestamptz_utc'
          description: |
            End date of the statement period
          nullable: true
        has_duplicate_statements:
          type: boolean
          description: |
            This specifies if the statement is complete duplicate of already uploaded statement or not.
          nullable: true
        duplicate_statement_ids:
          type: array
          description: Holds the list of statement_ids which are complete duplicate of the current statement
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - stmtge49ielgel
        has_duplicate_statement_line_items:
          type: boolean
          description: |
            Indicates whether there are any line items in this statement are duplicates.
          nullable: true
        duplicate_statement_line_items:
          type: array
          items:
            type: object
            properties:
              ids:
                type: array
                items:
                  $ref: '#/components/schemas/id_string'
                example:
                  - stlige49ielgel
                description: Ids of the current statement line items which are duplicates
              duplicate_line_item_statement_id:
                type: string
                description: |
                  Id of the existing duplicate statement
                example:
                  - stmpge49ielgel
                nullable: true
        unique_id:
          type: string
          description: |
            Unique hash value that is used to identify the statement.
          example: 74175aadf22675aa59df28b96d351cfb
        file_id:
          type: string
          description: |
            File id of the uploaded statement.
          example: fiit3pX9gzzP
          nullable: true
        is_processed:
          type: boolean
          description: |
            Indicates whether the corporate card transactions are created out of the statement.
        statement_mappings_id:
          type: string
          example: stmpdfddfd
          description: |
            Id of the mapping used to extract transaction from the statement.
          nullable: true
      required:
        - id
        - org_id
        - creator_user_id
        - created_at
        - updated_at
        - file_name
        - file_size
        - no_of_debit
        - no_of_credit
        - no_of_transactions
        - all_statement_columns
        - start_date
        - end_date
        - has_duplicate_statements
        - has_duplicate_statement_line_items
        - duplicate_statement_ids
        - duplicate_statement_line_items
        - unique_id
        - file_id
        - is_processed
        - statement_mappings_id
    statements_in:
      type: object
      properties:
        file_id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: fidftadfdsdf
      required:
        - file_id
    statement_mappings_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmpwownwrng
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        bank_name:
          type: string
          description: |
            Specifies the bank name of the statement.
          example: American Express
        is_debit_positive:
          type: boolean
          description: |
            Specifies the representation of the the amount in the statement, if true then the amount represented by 
            positive sign are debits, and if false then the amount represented by negative sign are debits.
          example: true
        transaction_date_column:
          type: string
          description: |
            Specifies the header name of the transaction date column in the statement.
          example: spent date
        merchant_column:
          type: string
          description: |
            Specifies the header name of the merchant column in the statement.
          example: merchant
        transaction_id_column:
          type: string
          description: |
            Specifies the header name of the transaction id / unique id column in the statement.
          nullable: true
          example: reference number
        amount_column:
          type: string
          description: |
            Specifies the header name of the amount column in the statement.
          example: amount
        name:
          type: string
          description: |
            Specifies the mapping name.
          example: amex_mapping
        card_number_column:
          type: string
          description: |
            Specifies the header name of the card number column in the statement.
          example: account number
        foreign_amount_column:
          type: string
          description: |
            Specifies the header name of the foreign amount column in the statement.
          nullable: true
          example: foreign amount
        foreign_currency_column:
          type: string
          description: |
            Specifies the header name of the foreign currency column in the statement.
          nullable: true
          example: foreign currency
        description_column:
          type: string
          description: |
            Specifies the header name of the description column in the statement.
          nullable: true
          example: description
        post_date_column:
          type: string
          description: |
            Specifies the header name of the post date column in the statement.
          example: post date
          nullable: true
        is_auto_created:
          type: boolean
          description: |
            Helps to identify if a statement mapping got auto created or not
          example: false
        card_network:
          type: string
          description: |
            Specifies the card network used by the card
          example: VISA
          nullable: true
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - bank_name
        - is_debit_positive
        - transaction_date_column
        - transaction_id_column
        - amount_column
        - name
        - card_number_column
        - merchant_column
        - foreign_amount_column
        - foreign_currency_column
        - description_column
        - post_date_column
        - is_auto_created
        - card_network
    statement_mappings_suggest_out:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmpwownwrng
        bank_name:
          type: string
          description: |
            Specifies the bank name of the statement.
          example: American Express
        is_debit_positive:
          type: boolean
          description: |
            Specifies the representation of the the amount in the statement, if true then the amount represented by 
            positive sign are debits, and if false then the amount represented by negative sign are debits.
          example: true
        transaction_date_column:
          type: string
          description: |
            Specifies the header name of the transaction date column in the statement.
          example: spent date
        merchant_column:
          type: string
          description: |
            Specifies the header name of the merchant column in the statement.
          example: merchant
        transaction_id_column:
          type: string
          description: |
            Specifies the header name of the transaction id / unique id column in the statement.
          nullable: true
          example: reference number
        amount_column:
          type: string
          description: |
            Specifies the header name of the amount column in the statement.
          example: amount
        name:
          type: string
          description: |
            Specifies the mapping name.
          example: amex_mapping
        card_number_column:
          type: string
          description: |
            Specifies the header name of the card number column in the statement.
          example: account number
        foreign_amount_column:
          type: string
          description: |
            Specifies the header name of the foreign amount column in the statement.
          nullable: true
          example: foreign amount
        foreign_currency_column:
          type: string
          description: |
            Specifies the header name of the foreign currency column in the statement.
          nullable: true
          example: foreign currency
        description_column:
          type: string
          description: |
            Specifies the header name of the description column in the statement.
          nullable: true
          example: description
        post_date_column:
          type: string
          description: |
            Specifies the header name of the post date column in the statement.
          example: post date
          nullable: true
        is_auto_created:
          type: boolean
          description: |
            Helps to identify if a statement mapping got auto created or not
          example: false
        card_network:
          type: string
          description: |
            Specifies the credit card network used by the card
          example: VISA
          nullable: true
      required:
        - id
        - bank_name
        - is_debit_positive
        - transaction_date_column
        - transaction_id_column
        - amount_column
        - name
        - card_number_column
        - merchant_column
        - foreign_amount_column
        - foreign_currency_column
        - description_column
        - post_date_column
        - is_auto_created
        - card_network
    preview_from_statement_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmtadfdsdf
        statement_mapping:
          type: object
          properties:
            description_column:
              type: string
              description: |
                Specifies the mapping of description column on the statement
              nullable: true
              example: description
            transaction_date_column:
              type: string
              description: |
                Specifies the mapping of transaction date on the statement.
              example: txn date
            transaction_id_column:
              type: string
              description: |
                Specifies the mapping of transaction id / unique id on the statement.
              example: reference number
              nullable: true
            amount_column:
              type: string
              description: |
                Specifies the mapping of amount on the statement.
              example: amount
            card_number_column:
              type: string
              description: |
                Specifies the mapping of card number on the statement.
              example: account number
            merchant_column:
              type: string
              description: |
                Specifies the mapping of merchant on the statement.
              example: Amazon
            foreign_amount_column:
              type: string
              description: |
                Specifies the mapping of foreign amount on the statement.
              example: foreign amount
              nullable: true
            foreign_currency_column:
              type: string
              description: |
                Specifies the mapping of foreign currency on the statement.
              example: foreign currency
              nullable: true
            post_date_column:
              type: string
              description: |
                Specifies the header name of the post date column in the statement.
              example: post date
              nullable: true
            bank_name:
              type: string
              description: |
                Specifies the bank name of the statement
              example: American Express
            is_debit_positive:
              type: boolean
              description: |
                Specifies the representation of the the amount in the statement, if true then the amount represented by |
                positive sign are debits, and if false then the amount represented by negative sign are debits.
              example: true
            name:
              type: string
              description: |
                Specifies the mapping name.
              example: USD
              nullable: true
            card_network:
              type: string
              description: |
                Specifies the credit card network used by the card
              example: VISA
              nullable: true
          required:
            - description_column
            - transaction_date_column
            - transaction_id_column
            - amount_column
            - card_number_column
            - merchant_column
            - foreign_amount_column
            - foreign_currency_column
            - post_date_column
            - bank_name
            - is_debit_positive
            - name
            - card_network
        ignored_line_item_ids:
          type: array
          items:
            type: string
          description: |
            This specifies list of statement line items to be ignored in the statement.
          example:
            - stlisfdfadssd
        rtf_missing_line_item_ids:
          type: array
          items:
            type: string
          description: |
            This specifies list of statement line items which are to be created as RTF missing transactions.
          example:
            - stlisfdfadssd
        statement_card_number:
          type: string
          description: |
            Card number from statement can be passed to get transactions only from specific card
          example: xxx5-4543
      required:
        - id
        - statement_mapping
        - ignored_line_item_ids
    preview_out:
      properties:
        no_of_debit:
          type: integer
          description: |
            Number of debit transactions in the statement uploaded by the user.
          example: 3
          nullable: true
        no_of_credit:
          type: integer
          description: |
            Number of credit transactions in the statement uploaded by the user.
          example: 3
          nullable: true
        no_of_transactions:
          type: integer
          description: |
            Number of transactions in the statement uploaded by the user.
          example: 6
        transactions:
          type: array
          items:
            type: object
            properties:
              description:
                type: string
                description: |
                  Specifies the description of the transaction on the statement.
                nullable: true
                example: description
              bank_name:
                type: string
                description: |
                  Specifies the bank name of the statement
                example: American Express
              merchant:
                type: string
                description: |
                  Specifies the merchant of the statement
                example: Amazon
              transaction_date:
                $ref: '#/components/schemas/timestamptz_utc'
                description: |
                  Specifies the transaction date on the statement.
              amount:
                type: string
                description: |
                  Specifies the amount on the statement.
                example: 30
              card_number:
                type: string
                description: |
                  Specifies the card number on the statement.
                example: xxxx-3343
              unique_id:
                type: string
                description: |
                  Specifies the unique code / transaction id on the statement.
                example: ed0b2aa913c54b3f903a5030208e1872
              foreign_amount:
                type: string
                description: |
                  Specifies the foreign amount on the statement.
                nullable: true
                example: 48
              foreign_currency:
                type: string
                description: |
                  Specifies the foreign currency on the statement.
                nullable: true
                example: USD
              transaction_id:
                type: string
                description: |
                  Specifies the transaction id / unique id on the statement.
                nullable: true
                example: USD
              transaction_type:
                type: string
                description: |
                  Specifies the transaction type of the transactions on the statement (credit / debit).
                example: debit
              post_date:
                $ref: '#/components/schemas/timestamptz_utc'
                description: |
                  Specifies the post date on the statement.
                nullable: true
            required:
              - description
              - bank_name
              - merchant
              - transaction_date
              - amount
              - card_number
              - unique_id
              - foreign_amount
              - foreign_currency
              - transaction_id
              - post_date
      required:
        - transactions
        - no_of_debit
        - no_of_credit
        - no_of_transactions
    card_mapping_in:
      type: array
      items:
        type: object
        properties:
          statement_card_number:
            type: string
            description: |
              Card number from statement
            example: xxx5-4543
          corporate_card_id:
            allOf:
              - $ref: '#/components/schemas/id_string'
            example: bawownwrng
    card_transaction_from_statement_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmtadfdsdf
        statement_mapping:
          type: object
          properties:
            description_column:
              type: string
              description: |
                Specifies the mapping of description column on the statement
              nullable: true
              example: description
            transaction_date_column:
              type: string
              description: |
                Specifies the mapping of transaction date on the statement.
              example: txn date
            transaction_id_column:
              type: string
              description: |
                Specifies the mapping of transaction id / unique id on the statement.
              example: reference number
              nullable: true
            amount_column:
              type: string
              description: |
                Specifies the mapping of amount on the statement.
              example: amount
            card_number_column:
              type: string
              description: |
                Specifies the mapping of card number on the statement.
              example: account number
            merchant_column:
              type: string
              description: |
                Specifies the mapping of merchant on the statement.
              example: Amazon
            foreign_amount_column:
              type: string
              description: |
                Specifies the mapping of foreign amount on the statement.
              example: foreign amount
              nullable: true
            foreign_currency_column:
              type: string
              description: |
                Specifies the mapping of foreign currency on the statement.
              example: foreign currency
              nullable: true
            post_date_column:
              type: string
              description: |
                Specifies the header name of the post date column in the statement.
              example: post date
              nullable: true
            bank_name:
              type: string
              description: |
                Specifies the bank name of the statement
              example: American Express
            is_debit_positive:
              type: boolean
              description: |
                Specifies the representation of the the amount in the statement, if true then the amount represented by |
                positive sign are debits, and if false then the amount represented by negative sign are debits.
              example: true
            name:
              type: string
              description: |
                Specifies the mapping name.
              example: USD
              nullable: true
            card_network:
              type: string
              description: |
                Specifies the credit card network used by the card
              example: VISA
              nullable: true
          required:
            - description_column
            - transaction_date_column
            - transaction_id_column
            - amount_column
            - card_number_column
            - merchant_column
            - foreign_amount_column
            - foreign_currency_column
            - post_date_column
            - bank_name
            - is_debit_positive
            - name
            - card_network
        ignored_line_item_ids:
          type: array
          items:
            type: string
          description: |
            This specifies list of statement line items to be ignored in the statement.
          example:
            - stlisfdfadssd
        rtf_missing_line_item_ids:
          type: array
          items:
            type: string
          description: |
            This specifies list of statement line items which are to be created as RTF missing transactions.
          example:
            - stlisfdfadssd
        card_mapping:
          $ref: '#/components/schemas/card_mapping_in'
      required:
        - id
        - statement_mapping
        - ignored_line_item_ids
    card_stats_out:
      properties:
        missing_transactions_count:
          type: integer
          description: |
            Number of transactions in the statement that are from cards that dont exist on Fyle/are not RTF enrolled.
          example: 76
        is_rtf_statement:
          type: boolean
          description: |
            Indicates whether the statement has atleast one card enrolled in RTF.
          example: true
        rtf_card_network:
          type: string
          description: |
            Card network of the statement if the statement has atleast one card enrolled in RTF.
          example: VISA
          nullable: true
        missing_corporate_card_details:
          type: array
          items:
            type: object
            properties:
              card_number:
                type: string
                description: |
                  Specifies the card number on the statement.
                example: xxxx-3343
              is_present:
                type: boolean
                description: |
                  Specifies if the card exists on Fyle.
                example: true
              is_visa_enrolled:
                type: boolean
                description: |
                  Specifies if the card is enrolled for Visa.
                example: false
              is_mastercard_enrolled:
                type: boolean
                description: |
                  Specifies if the card is enrolled for Mastercard.
                example: false
            required:
              - card_number
              - is_present
              - is_visa_enrolled
              - is_mastercard_enrolled
      required:
        - missing_transactions_count
        - is_rtf_statement
    matching_cards_out:
      properties:
        statement_card_number:
          type: string
          description: |
            Card number from statement
          example: xxx5-4543
        matching_cards:
          type: array
          items:
            type: object
            properties:
              id:
                allOf:
                  - $ref: '#/components/schemas/id_string'
                example: bawownwrng
              card_number:
                $ref: '#/components/schemas/card_number'
              is_visa_enrolled:
                type: boolean
                description: |
                  If the card is enrolled with real time feed from visa
                nullable: false
              is_mastercard_enrolled:
                type: boolean
                description: |
                  If the card is enrolled with realtime feed from Mastercard
                nullable: false
              nickname:
                type: string
                maxLength: 25
                nullable: true
                description: |
                  Unique nickname assigned to the card
                example: Business Card
              user:
                $ref: '#/components/schemas/user_out_embed_nullable'
    rtf_missing_transaction_from_statement_out:
      type: object
      properties:
        error:
          type: string
          description: |
            Error message if any error occurred while processing the statement.
          example: null
          nullable: true
        missing_rtf_transactions:
          type: array
          items:
            type: object
            properties:
              amount:
                type: number
                description: |
                  Specifies the amount on the statement.
                example: 30
              bank_name:
                type: string
                description: |
                  Specifies the bank name of the statement
                example: American Express
              card_number:
                type: string
                description: |
                  Specifies the card number on the statement.
                example: xxxx-3343
              currency:
                type: string
                description: |
                  Specifies the currency on the statement.
                example: USD
              description:
                type: string
                description: |
                  Specifies the description of the transaction on the statement.
                nullable: true
                example: description
              foreign_amount:
                type: string
                description: |
                  Specifies the foreign amount on the statement.
                nullable: true
                example: 48
              foreign_currency:
                type: string
                description: |
                  Specifies the foreign currency on the statement.
                nullable: true
                example: USD
              merchant:
                type: string
                description: |
                  Specifies the merchant of the statement
                example: Amazon
              post_date:
                $ref: '#/components/schemas/timestamptz_utc'
                description: |
                  Specifies the post date on the statement.
                nullable: true
              statement_line_item_id:
                type: string
                description: |
                  Specifies the statement line item id of the statement.
                example: stliLtfjqvyYGv
              transaction_date:
                $ref: '#/components/schemas/timestamptz_utc'
                description: |
                  Specifies the transaction date on the statement.
              transaction_id:
                type: string
                description: |
                  Specifies the transaction id / unique id on the statement.
                nullable: true
                example: USD
              transaction_type:
                type: string
                description: |
                  Specifies the transaction type of the transactions on the statement (credit / debit).
                example: debit
              unique_id:
                type: string
                description: |
                  Specifies the unique code / transaction id on the statement.
                example: ed0b2aa913c
        rtf_confidence:
          type: string
          description: |
            RTF Confidence percentage - `rtf_count` to the `total_count`, indicates what % of statement transactions are already existing in Fyle via RTF.
          example: 99.22
        rtf_count:
          type: integer
          description: |
            Number of transactions in the statement that are already existing in Fyle via RTF.
          example: 76
        total_count:
          type: integer
          description: |
            Total number of transactions in the statement.
          example: 77
        status:
          type: string
          description: |
            Status of the statement reconciliation.
          example: SUCCESS
          enum:
            - INITIALIZED
            - PROCESSING
            - SUCCESS
            - ERROR
    rtf_missing_transaction_from_statement_in:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: stmtadfdsdf
        statement_mapping:
          type: object
          properties:
            description_column:
              type: string
              description: |
                Specifies the mapping of description column on the statement
              nullable: true
              example: description
            transaction_date_column:
              type: string
              description: |
                Specifies the mapping of transaction date on the statement.
              example: txn date
            transaction_id_column:
              type: string
              description: |
                Specifies the mapping of transaction id / unique id on the statement.
              example: reference number
              nullable: true
            amount_column:
              type: string
              description: |
                Specifies the mapping of amount on the statement.
              example: amount
            card_number_column:
              type: string
              description: |
                Specifies the mapping of card number on the statement.
              example: account number
            merchant_column:
              type: string
              description: |
                Specifies the mapping of merchant on the statement.
              example: Amazon
            foreign_amount_column:
              type: string
              description: |
                Specifies the mapping of foreign amount on the statement.
              example: foreign amount
              nullable: true
            foreign_currency_column:
              type: string
              description: |
                Specifies the mapping of foreign currency on the statement.
              example: foreign currency
              nullable: true
            post_date_column:
              type: string
              description: |
                Specifies the header name of the post date column in the statement.
              example: post date
              nullable: true
            bank_name:
              type: string
              description: |
                Specifies the bank name of the statement
              example: American Express
            is_debit_positive:
              type: boolean
              description: |
                Specifies the representation of the the amount in the statement, if true then the amount represented by |
                positive sign are debits, and if false then the amount represented by negative sign are debits.
              example: true
            name:
              type: string
              description: |
                Specifies the mapping name.
              example: USD
              nullable: true
            card_network:
              type: string
              description: |
                Specifies the credit card network used by the card
              example: VISA
              nullable: true
          required:
            - description_column
            - transaction_date_column
            - transaction_id_column
            - amount_column
            - card_number_column
            - merchant_column
            - foreign_amount_column
            - foreign_currency_column
            - post_date_column
            - bank_name
            - is_debit_positive
            - name
            - card_network
        ignored_line_item_ids:
          type: array
          items:
            type: string
          description: |
            This specifies list of statement line items to be ignored in the statement.
          example:
            - stlisfdfadssd
        reconciliation_method:
          type: string
          description: |
            Specifies the reconciliation method to be used for the statement.
          example: TRANSACTION_DATE
          enum:
            - POST_DATE
            - TRANSACTION_DATE
        start_date:
          $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Start date of the statement period
          nullable: true
        end_date:
          $ref: '#/components/schemas/timestamptz_utc'
          description: |
            End date of the statement period
          nullable: true
        card_mapping:
          $ref: '#/components/schemas/card_mapping_in'
      required:
        - id
        - statement_mapping
        - ignored_line_item_ids
        - reconciliation_method
    rtf_stats_out:
      type: object
      properties:
        last_uploaded_at:
          $ref: '#/components/schemas/timestamptz_utc'
          description: |
            Timestamp of the last uploaded statement.
        rtf_confidence:
          type: string
          description: |
            RTF Confidence percentage indicates what % of the transactions in last uploaded statement are already existing in Fyle via RTF.
          example: 99.22
    expense_rule_if_out:
      type: object
      additionalProperties: false
      required:
        - merchant_contains
      properties:
        merchant_contains:
          type: string
          example: amaz
          description: substring to check in merchant for applying this expense rule
        department_ids:
          type: array
          nullable: true
          items:
            allOf:
              - $ref: '#/components/schemas/department_id'
              - type: string
              - nullable: false
          example:
            - deptTqSvgYSlMk
            - depthGKLxUmG5l
          description: |
            List of department ids
        departments:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/department_out_embed'
    expense_rule_data_out:
      type: object
      nullable: false
      additionalProperties: false
      minProperties: 1
      properties:
        merchant:
          type: string
          maxLength: 255
          nullable: true
          description: |
            String denoting the name of the merchant to which the Expense was made.
          example: Amazon
        is_billable:
          $ref: '#/components/schemas/is_billable'
        purpose:
          type: string
          nullable: true
          example: Team lunch
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 49058
        category:
          $ref: '#/components/schemas/category_out_embed'
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 92895
        project:
          $ref: '#/components/schemas/project_out_embed'
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          example: 1049
        cost_center:
          $ref: '#/components/schemas/cost_center_out_embed'
        custom_fields:
          type: array
          nullable: true
          description: |
            Custom fields
          items:
            $ref: '#/components/schemas/custom_field'
        dependent_fields:
          type: array
          nullable: true
          description: |
            Dependent expense fields
          items:
            $ref: '#/components/schemas/dependent_expense_fields'
    expense_rule_out:
      type: object
      additionalProperties: false
      required:
        - id
        - org_id
        - created_at
        - updated_at
        - creator_user_id
        - creator_user
        - if
        - set
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: eprFswn7SHbCa
        org_id:
          $ref: '#/components/schemas/org_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        creator_user_id:
          $ref: '#/components/schemas/user_id'
        creator_user:
          $ref: '#/components/schemas/user_out_embed'
        if:
          $ref: '#/components/schemas/expense_rule_if_out'
        set:
          $ref: '#/components/schemas/expense_rule_data_out'
    expense_rule_if_in:
      type: object
      nullable: false
      additionalProperties: false
      required:
        - merchant_contains
      properties:
        merchant_contains:
          type: string
          example: amaz
          description: substring to check in merchant for applying this expense rule
        department_ids:
          type: array
          nullable: true
          items:
            allOf:
              - $ref: '#/components/schemas/department_id'
              - type: string
              - nullable: false
          example:
            - deptTqSvgYSlMk
            - depthGKLxUmG5l
          description: |
            List of department ids
    expense_rule_in:
      type: object
      additionalProperties: false
      required:
        - if
        - set
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: eprFswn7SHbCa
        if:
          $ref: '#/components/schemas/expense_rule_if_in'
        set:
          allOf:
            - $ref: '#/components/schemas/expense_rule_data_in'
            - type: object
              nullable: false
    expense_rule_delete_in:
      type: object
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
    claim_amount:
      type: number
      description: |
        The expense amount as claimed by user.
      example: 1984.18
    spender_expense_check_mandatory_fields_in:
      type: object
      additionalProperties: false
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This represents the id of the expense.<br><br>
            _Note: This field is required when you are updating an already created expense and want to check it again for missing mandatory fields._
          example: tx0agOdICdbV
        spent_at:
          allOf:
            - $ref: '#/components/schemas/spent_at'
          description: |
            It signifies when this expense was made. This date cannot be in future.<br><br>
            _Note: This field is mandatory when you are creating an expense and want to check it again for missing mandatory fields._
        source:
          $ref: '#/components/schemas/source'
        merchant:
          $ref: '#/components/schemas/merchant'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        claim_amount:
          allOf:
            - $ref: '#/components/schemas/claim_amount'
          description: |
            The expense amount as claimed by user.<br><br>
            _Note: This field is mandatory when you are creating an expense and want to check it again for missing mandatory fields._
          example: 1984.18
        purpose:
          type: string
          example: Team lunch
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advwrlAGwjr2
        tax_amount:
          type: number
          nullable: true
          description: |
            Tax amount as setup by your organization.
            - _Note:_
              - Tax amount cannot be greater than the expense amount.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        is_billable:
          $ref: '#/components/schemas/is_billable'
        is_reimbursable:
          $ref: '#/components/schemas/is_reimbursable'
        distance:
          $ref: '#/components/schemas/distance'
        distance_unit:
          $ref: '#/components/schemas/distance_unit'
        started_at:
          $ref: '#/components/schemas/timestamptz_pst'
        ended_at:
          $ref: '#/components/schemas/timestamptz_pst'
        travel_classes:
          $ref: '#/components/schemas/travel_classes'
        locations:
          $ref: '#/components/schemas/locations'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
        num_files:
          type: integer
          description: |
            Number of files/reciepts attached to expense
          example: 4
        invoice_number:
          type: string
          nullable: true
          maxLength: 255
          description: |
            Invoice number of the expense.
          example: 123456
    expense_check_mandatory_fields_in:
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        spent_at:
          $ref: '#/components/schemas/spent_at'
        claim_amount:
          $ref: '#/components/schemas/claim_amount'
      allOf:
        - $ref: '#/components/schemas/spender_expense_check_mandatory_fields_in'
    expense_check_mandatory_fields_out:
      type: object
      additionalProperties: false
      required:
        - missing_amount
        - missing_currency
        - missing_receipt
        - missing_expense_field_ids
      properties:
        missing_amount:
          type: boolean
          description: |
            If this is set to true, then you need to send amount field with expense object.
          example: false
        missing_currency:
          type: boolean
          description: |
            If this is set to true, then you need to send currency field with expense object.
          example: false
        missing_receipt:
          type: boolean
          description: |
            If this is set to true, then you need to attach receipt to the expense.
          example: false
        missing_expense_field_ids:
          type: array
          nullable: false
          items:
            type: integer
            nullable: true
            description: |
              This id provided by Fyle to identify an expense field.
            example: 123
          example:
            - 123
            - 12423
          description: |
            List of IDs of expense fields which are mandatory but are missing.
    expense_comments_out:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
        - action
        - action_data
        - expense_id
        - creator_type
        - org_id
        - updated_at
        - created_at
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        comment:
          type: string
          description: comment on the report
          example: We don't accept laundry bills
        action:
          type: string
          description: Expense action for which comment is added.
          enum:
            - ADMIN_APPROVED
            - APPROVED
            - APPROVER_REMOVED
            - AUTO_MATCHED
            - AUTO_MERGED
            - COMMENTED
            - COMMENTED_WITH_NOTIFICATION
            - COMMENTED_WITHOUT_NOTIFICATION
            - DATA_EXTRACTED
            - EJECTED_FROM_REPORT
            - EXPENSE_RULE_APPLIED
            - FILE_ATTACHED
            - FILE_DELETED
            - INVALID_EXPENSE_FIELD_REMOVED
            - MATCHED
            - PAID
            - PARTIALLY_APPROVED
            - POLICY_RESULT_APPLIED
            - UNMATCHED
          example: COMMENTED_WITH_NOTIFICATION
        action_data:
          type: object
          description: Data related to expense action.
          nullable: true
        expense_id:
          $ref: '#/components/schemas/id_string'
        creator_type:
          type: string
          description: Describes whether the comment is system-generated or User made.
          enum:
            - SYSTEM
            - POLICY
            - USER
          example: USER
        creator_user_id:
          $ref: '#/components/schemas/user_id_nullable'
        creator_user:
          $ref: '#/components/schemas/user_out_embed_nullable'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        org_id:
          $ref: '#/components/schemas/org_id'
    expense_comments_bulk_in:
      type: array
      additionalProperties: false
      description: |
        Array of expense comments to be added in bulk.
      items:
        type: object
        required:
          - expense_id
          - comment
          - notify
        properties:
          expense_id:
            $ref: '#/components/schemas/id_string'
          comment:
            type: string
            description: comment on the expense
            example: We don't accept laundry bills
          notify:
            type: boolean
            description: Whether to notify the user about the comment
            example: true
    expense_dismiss_duplicates_in:
      type: object
      required:
        - id
        - duplicate_expense_ids
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
        duplicate_expense_ids:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - txwoirwlwwg
            - txwlgwkgw42
          description: |
            List of expense IDs that needs to be dismissed as a duplicate from the target expense
    expenses_duplicate_sets_stats_in:
      properties:
        query_params:
          nullable: false
          type: string
          description: |
            This field contains the query param string similar to the query params passed in GET call. Currently we don't 
            process this field, this is added for future use cases. Currently empty string value should be passed.
          example: ''
    expenses_duplicate_sets_stats_out:
      type: object
      properties:
        count:
          type: integer
          nullable: false
          description: |
            This field represents the total number of expense duplicate sets that match the criteria specified in the query_params within the body of the request.
          example: 45
    any_type:
      anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items:
            $ref: '#/components/schemas/any_type'
        - type: object
    feature_config_out:
      type: object
      additionalProperties: false
      properties:
        org_id:
          $ref: '#/components/schemas/org_id'
        user_id:
          $ref: '#/components/schemas/user_id'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        target_client:
          type: string
          nullable: false
          description: |
            This specifies the target client of the feature config.
          example: WEBAPP
        feature:
          type: string
          nullable: false
          description: |
            This specifies the feature name.
          example: ADMIN_EXPENSES
        sub_feature:
          type: string
          nullable: true
          description: |
            This specifies the sub feature name.
          example: ALL_EXPENSES
        key:
          type: string
          nullable: false
          description: |
            This specifies the key of the feature config.
          example: MANAGE_COLUMNS
        value:
          anyOf:
            - $ref: '#/components/schemas/any_type'
            - $ref: '#/components/schemas/null_field'
          nullable: true
          description: |
            This specifies the value of the feature config.
          example:
            columns:
              - id: Date
                is_visible: true
                order: 1
        is_shared:
          type: boolean
          nullable: false
          description: |
            This specifies whether the feature config is shared or not.
          example: true
    feature_config_in:
      type: object
      additionalProperties: false
      required:
        - target_client
        - feature
        - key
        - value
        - is_shared
      properties:
        target_client:
          type: string
          nullable: false
          description: |
            This specifies the target client of the feature config.
          example: WEBAPP
        feature:
          type: string
          nullable: false
          description: |
            This specifies the feature name.
          example: ADMIN_EXPENSES
        sub_feature:
          type: string
          nullable: true
          description: |
            This specifies the sub feature name.
          example: ALL_EXPENSES
        key:
          type: string
          nullable: false
          description: |
            This specifies the key of the feature config.
          example: MANAGE_COLUMNS
        value:
          anyOf:
            - $ref: '#/components/schemas/any_type'
            - $ref: '#/components/schemas/null_field'
          nullable: true
          description: |
            This specifies the value of the feature config.
          example:
            columns:
              - id: Date
                is_visible: true
                order: 1
        is_shared:
          type: boolean
          nullable: false
          description: |
            This specifies whether the feature config is shared or not.
          example: true
    split_expense_in:
      type: object
      properties:
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        source:
          $ref: '#/components/schemas/source'
        spent_at:
          type: string
          format: date-time
          nullable: false
          description: |
            It signifies when this expense was made.
            This date cannot be in future.
            - **Note:**
              - This field is required while creating an expense.
              - _Not required when updating an expense, but is non-nullable_. 
          example: '2020-06-01T01:18:19.292-08:00'
        is_reimbursable:
          $ref: '#/components/schemas/is_reimbursable'
        travel_classes:
          $ref: '#/components/schemas/travel_classes'
        locations:
          $ref: '#/components/schemas/locations'
        foreign_currency:
          $ref: '#/components/schemas/foreign_currency'
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        file_ids:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/id_string'
          description: |
            List of file IDs to be attached to the expense.
          example:
            - fisjfwlrglw
            - fisjfwlrglw
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        source_account_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          example: acwbl222wlg
        advance_wallet_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
          example: advwrlAGwjr2
        tax_amount:
          type: number
          nullable: true
          description: |
            Tax amount as setup by your organization.
            - _Note:_
              - Tax amount cannot be greater than the expense amount.
        tax_group_id:
          allOf:
            - $ref: '#/components/schemas/fk_string'
          nullable: true
        started_at:
          $ref: '#/components/schemas/timestamptz_pst'
        ended_at:
          $ref: '#/components/schemas/timestamptz_pst'
        merchant:
          $ref: '#/components/schemas/merchant'
        purpose:
          type: string
          example: Team lunch
        is_billable:
          $ref: '#/components/schemas/is_billable'
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
    expense_split_object:
      type: object
      properties:
        spent_at:
          type: string
          format: date-time
          nullable: false
          description: |
            It signifies when this expense was made.
            This date cannot be in future.
            - **Note:**
              - This field is required while creating an expense.
              - _Not required when updating an expense, but is non-nullable_. 
          example: '2020-06-01T01:18:19.292-08:00'
        category_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 49058
        foreign_amount:
          $ref: '#/components/schemas/foreign_amount'
        purpose:
          type: string
          example: Team lunch
        project_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 92895
        cost_center_id:
          allOf:
            - $ref: '#/components/schemas/fk_integer'
          nullable: true
          example: 1049
        custom_fields:
          $ref: '#/components/schemas/custom_fields'
    admin_expense_split_object:
      type: array
      items:
        required:
          - admin_amount
        allOf:
          - $ref: '#/components/schemas/expense_split_object'
        properties:
          admin_amount:
            type: number
            nullable: false
            description: |
              The expense amount which is added or modified by admin or approver.
            example: 1900
    admin_split_expense_in:
      type: object
      required:
        - id
        - admin_amount
      allOf:
        - $ref: '#/components/schemas/split_expense_in'
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          description: |
            This id is provided by Fyle to identify an object
            - When `id` is sent, default action is to update the expense
        admin_amount:
          type: number
          nullable: false
          description: |
            The expense amount which is added or modified by admin or approver.
          example: 1900
        splits:
          description: |
            This array contains the number of split expenses admin wants to create for the expense.
            The `admin_amount` provided for the original expense should be equal to the sum of
            `admin_amount` provided for each split. Each attribute in the splits array will take precedence
            to the original expense object. If any attribute is not provided in the split object, then
            null or default value will be taken for that attribute in the resultant split.
          allOf:
            - $ref: '#/components/schemas/admin_expense_split_object'
    expense_check_policies_individual_desired_states:
      type: object
      properties:
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        approver_policy_order:
          type: integer
          nullable: true
          description: |
            This represents the order of the approver policy related to this individual desired state record.
            If the policy does not add any approver, this field will be null.
          example: 1
        approver_source:
          type: string
          enum:
            - PRIMARY_APPROVER
            - SECONDARY_APPROVER_1
            - SECONDARY_APPROVER_2
            - PROJECT_APPROVER_1
            - PROJECT_APPROVER_2
            - DEPARTMENT_HEAD_APPROVER
            - EMAIL_APPROVER
            - null
          nullable: true
          description: |
            This represents the type of approver(source) that was added by the approver policy related to this individual
            desired state record. If the policy does not add any approver, this field will be null.
          example: PROJECT_APPROVER_1
        expense_policy_rule_id:
          type: string
          description: |
            This represents the id of the expense policy rule.
          example: tprabsdfSYqd
        expense_policy_rule:
          $ref: '#/components/schemas/expense_policy_rule_embed'
        run_status:
          nullable: false
          type: string
          enum:
            - VIOLATED_ACTION_SUCCESS
            - VIOLATED_ACTION_FAILURE
            - UNVIOLATED
          description: |
            This represents the status of policy computation for the input expense object against the policy represented by `expense_policy_rule_id`.
            If the state is `UNVIOLATED`, it means that the expense is not violating this policy. If the state is `VIOLATION_ACTION_SUCCESS`,
            it means that the expense is violating this policy and action stated in the object will be applied to the expense when it is saved.
            However, if the state is `VIOLATION_ACTION_FAILURE`, it means that this policy is violated for the expense but since some approver was
            missing or not set up properly, it will fail to take action on the expense when it is saved.
          example: SUCCESS
        run_result:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense. Note that, in
            case some approver was not setup properly for the given violation, this array will contain description of
            missing approvers. For example, Department approver, Project head, etc.
          example:
            - flag the expense
            - cap the amount
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        expenses_query_object_params:
          nullable: true
          $ref: '#/components/schemas/expense_policy_expenses_query_object'
    expense_check_policies_final_desired_state:
      type: object
      properties:
        flag:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense should be flagged.
          example: true
        amount:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/amount'
            - $ref: '#/components/schemas/null_field'
          description: |
            Amount that the policy calculation suggests for this expense.
          example: 500
        unreportable:
          type: boolean
          nullable: false
          description: |
            A true value here means, that as per policy calculation this expense should be made unreportable.
          example: true
        is_receipt_mandatory:
          type: boolean
          description: |
            A true value here means, that as per policy calculation this expense requires receipt.
          example: true
        add_approver_user_ids:
          nullable: true
          type: array
          items:
            type: string
          description: |
            List of approver ids that the policy calculation suggests adding to report that contains this expense.
          example:
            - usBdsdfscl
            - usLSsdfwqt
        remove_employee_approver1:
          type: boolean
          description: |
            A true value here means, that as per policy calculation, the employee's first approver should be removed from the report that contains this expense.
          example: true
        run_status:
          nullable: false
          type: string
          enum:
            - SUCCESS
            - FAILURE
          description: |
            This represent the run status of the policy.
          example: SUCCESS
        run_summary:
          type: array
          items:
            type: string
          description: |
            List of human-readable action summaries that the policy calculation suggests for this expense.
          example:
            - flag the expense
            - cap the amount
    expense_check_policies_out:
      type: object
      additionalProperties: false
      properties:
        individual_desired_states:
          type: array
          items:
            $ref: '#/components/schemas/expense_check_policies_individual_desired_states'
        final_desired_state:
          $ref: '#/components/schemas/expense_check_policies_final_desired_state'
    org_bank_details_out:
      type: object
      additionalProperties: false
      properties:
        org_id:
          $ref: '#/components/schemas/org_id'
        bank_account_number:
          type: string
          maxLength: 63
          nullable: true
          example: 7115634767
          description: This field specifies the bank account number of the organisation.
        bank_branch_ifsc:
          type: string
          maxLength: 11
          nullable: true
          example: ABCD0000145
          description: This field specifies the branch IFSC code of the bank.
        dwolla_customers_metadata_id:
          type: string
          maxLength: 255
          nullable: true
          example: dcmy7CrOEDh7Z
          description: This field contains the unique identifier of the dwolla account connected to the organisation.
        is_bank_account_added:
          type: boolean
          example: true
          description: This field contains a boolean value indicating if a bank account has been added to the organisation.
    merchant_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_integer'
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
        display_name:
          type: string
          description: |
            Merchant name
          example: Uber
    spender_employee_settings_out:
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          example: ous7FnPJtFRmN
          description: Unique identifier for the employee settings
        employee_id:
          $ref: '#/components/schemas/id_string'
          example: ouLdnA486RYD
          description: Unique identifier of the employee
        org_id:
          $ref: '#/components/schemas/org_id'
          example: org123
          description: Unique identifier of the organization
        created_at:
          $ref: '#/components/schemas/created_at'
          example: '2019-10-18T07:01:55.756Z'
          description: Timestamp when the settings were created
        updated_at:
          $ref: '#/components/schemas/updated_at'
          example: '2025-04-20T04:14:26.820Z'
          description: Timestamp when the settings were last updated
        category_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example: []
          description: List of category ids that the employee has access to
        cost_center_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example: []
          description: List of cost centers that the employee has access to
        project_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example: []
          description: List of projects that the employee has access to
        per_diem_rate_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example: []
          description: List of per diem rates that the employee has access to
        mileage_rate_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example: []
          description: List of mileage rate ids that the employee has access to
        insta_fyle_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for InstaFyle receipt scanning and data extraction
          properties:
            allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether InstaFyle is allowed for the employee
            enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether InstaFyle is enabled for the employee
            static_camera_overlay_enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether static camera overlay is enabled for receipt scanning
            extract_fields:
              type: array
              nullable: true
              items:
                type: string
              example:
                - AMOUNT
                - CURRENCY
                - CATEGORY
                - TXN_DT
              description: List of fields to extract from receipts
        notification_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for email and push notifications
          properties:
            email_allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether email notifications are allowed
            email_enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether email notifications are enabled
            email_unsubscribed_events:
              type: array
              nullable: true
              items:
                type: string
              example: []
              description: List of events for which email notifications are unsubscribed
            push_allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether push notifications are allowed
            push_enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether push notifications are enabled
            push_unsubscribed_events:
              type: array
              nullable: true
              items:
                type: string
              example:
                - EADVANCE_REQUESTS_CREATED
                - EADVANCE_REQUESTS_UPDATED
                - EADVANCE_REQUESTS_INQUIRY
              description: List of events for which push notifications are unsubscribed
            notify_user:
              type: boolean
              nullable: true
              example: true
              description: Whether to notify the user about events
            notify_delegatee:
              type: boolean
              nullable: true
              example: true
              description: Whether to notify the delegatee about events
        mileage_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for mileage tracking and rates
          properties:
            mileage_rate_labels:
              type: object
              nullable: true
              example: null
              description: Labels for different mileage rates
            annual_mileage_of_user_before_joining_fyle:
              type: object
              nullable: true
              example: {}
              description: Annual mileage limit for user before joining Fyle
        expense_form_autofills:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for automatic form filling in expenses
          properties:
            allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether expense form autofill is allowed
            enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether expense form autofill is enabled
        data_extractor_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for data extraction from receipts
          properties:
            allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether data extraction is allowed
            enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether data extraction is enabled
        in_app_chat_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for in-app chat functionality
          properties:
            allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether in-app chat is allowed
            enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether in-app chat is enabled
            restore_id:
              type: string
              nullable: true
              example: null
              description: ID for restoring chat session
        payment_mode_settings:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for payment modes
          properties:
            allowed:
              type: boolean
              nullable: true
              example: true
              description: Whether payment mode selection is allowed
            enabled:
              type: boolean
              nullable: true
              example: true
              description: Whether payment mode selection is enabled
            allowed_payment_modes:
              type: array
              nullable: true
              items:
                type: string
              example:
                - PERSONAL_ACCOUNT
                - COMPANY_ACCOUNT
              description: List of payment modes allowed for the employee
        locale:
          type: object
          nullable: true
          additionalProperties: false
          description: Settings for user's locale and timezone
          properties:
            timezone:
              type: string
              nullable: true
              example: Asia/Kolkata
              description: User's timezone
            abbreviation:
              type: string
              nullable: true
              example: IST
              description: Timezone abbreviation
            offset:
              type: string
              nullable: true
              example: '05:30:00'
              description: Timezone offset from UTC
        is_personal_cards_enabled:
          type: boolean
          example: true
          description: Whether personal card usage is enabled
        default_project_id:
          type: string
          nullable: true
          example: null
          description: Default project ID for expenses
        default_payment_mode:
          type: string
          nullable: true
          example: null
          description: Default payment mode for expenses
        default_vehicle_type:
          type: string
          nullable: true
          example: null
          description: Default vehicle type for mileage expenses
    attach_files_to_advance_request_in:
      type: object
      required:
        - id
        - file_ids
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/id_string'
          example: areqsjfwlrglw
        file_ids:
          type: array
          items:
            $ref: '#/components/schemas/id_string'
          example:
            - figwiwpjww
          description: List of files to be attached to the advance request
    advance_request_bulk_approve_in:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to be approved
          example: areq5F9xIaMURI
    advance_request_add_approver_in:
      type: object
      additionalProperties: false
      required:
        - id
        - approver_email
        - comment
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to add approver to
          example: areq5F9xIaMURI
        approver_email:
          $ref: '#/components/schemas/email'
          description: Email address of the approver to be added
          example: approver@example.com
        comment:
          type: string
          description: A comment explaining the reason for adding the approver
          example: Need your review on this advance
    advance_request_reject_in:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to be rejected
          example: areq5F9xIaMURI
        comment:
          type: string
          description: Reason for rejecting the advance request
          example: Budget exceeded
    advance_request_inquire_in:
      type: object
      additionalProperties: false
      required:
        - id
        - comment
      properties:
        id:
          $ref: '#/components/schemas/id_string'
          description: ID of the advance request to inquire about
          example: areq5F9xIaMURI
        comment:
          type: string
          description: Reason for sending the advance request back to the spender
          example: Please provide additional documentation
    advance_request_custom_field_out:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: ID of the custom field
          example: 123
        org_id:
          $ref: '#/components/schemas/org_id'
        name:
          type: string
          description: Name of the custom field
          example: Department
        type:
          type: string
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - MULTI_SELECT
            - BOOLEAN
            - LOCATION
            - USER_LIST
            - DATE
          description: Type of the custom field
          example: SELECT
        options:
          type: array
          items:
            type: string
          description: Options for SELECT and MULTI_SELECT field types
          example:
            - HR
            - Finance
          nullable: true
        is_mandatory:
          type: boolean
          description: Whether the field is mandatory
          example: true
        is_enabled:
          type: boolean
          description: Whether the field is enabled
          example: true
        placeholder:
          type: string
          description: Placeholder text for the field
          example: Select dept
          nullable: true
        created_at:
          $ref: '#/components/schemas/created_at'
        updated_at:
          $ref: '#/components/schemas/updated_at'
    advance_request_custom_fields_out:
      type: array
      items:
        $ref: '#/components/schemas/advance_request_custom_field_out'
      description: List of advance request custom fields
    advance_request_custom_field_in:
      type: object
      additionalProperties: false
      required:
        - name
        - type
        - is_mandatory
        - is_enabled
        - placeholder
      properties:
        id:
          type: integer
          description: ID of the custom field (optional, required for update operations)
          example: 123
        name:
          type: string
          description: Name of the custom field
          example: Department
        type:
          type: string
          enum:
            - TEXT
            - NUMBER
            - SELECT
            - MULTI_SELECT
            - BOOLEAN
            - LOCATION
            - USER_LIST
            - DATE
          description: Type of the custom field
          example: SELECT
        options:
          type: array
          items:
            type: string
          description: Options for SELECT and MULTI_SELECT field types
          example:
            - HR
            - Finance
        is_mandatory:
          type: boolean
          description: Whether the field is mandatory
          example: true
        placeholder:
          type: string
          maxLength: 50
          description: Placeholder text for the field (max 50 characters)
          example: Select dept
        is_enabled:
          type: boolean
          description: Whether the field is enabled or disabled
          example: true
  parameters:
    q:
      in: query
      name: q
      description: A search query to filter the results.
      schema:
        type: string
        example: Ritas
    limit:
      in: query
      name: limit
      description: |
        A limit on the number of objects to be returned. Allowed values are from 1 to 200.
      schema:
        type: integer
        example: 20
        default: 50
        maximum: 200
    created_at:
      in: query
      name: created_at
      description: |
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ  format along with operator in RHS dot pattern.<br> Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example: gte.2020-06-01T00:00:00.000-08:00
    updated_at:
      in: query
      name: updated_at
      description: |
        Date string in yyyy-MM-ddTHH:mm:ss.SSSZ  format along with operator in RHS dot pattern.<br> Supported operators are `gte`,`lte`,`gt`,`lt`.
      schema:
        type: string
        example: gte.2020-06-01T00:00:00.000-08:00
    order:
      in: query
      name: order
      description: |
        use comma separated column names for sorting the results. <br>
        For sorting in descending order, use `column_name.desc`
      schema:
        type: string
        example: updated_at.desc,id
    offset:
      in: query
      name: offset
      description: |
        offset is used to skip that many number of objects before counting. <br>
      schema:
        type: integer
        example: 10
    q_integer:
      in: query
      name: q
      description: A search query to filter the results.
      schema:
        type: integer
        example: 1234
    time_interval_granularity:
      in: query
      name: time_interval_granularity
      description: |
        The time duration by which to group expenses to aggregate sum of amount.
        Supported operator is `eq`.
      schema:
        type: string
        default: eq.month
        enum:
          - eq.day
          - eq.month
          - eq.quarter
          - eq.year
        example: eq.month
    time_interval_preset:
      in: query
      name: time_interval_preset
      description: |
        Preset time durations which can be used to filter expenses by spend date.
        Default value is used if it is not specified and time_interval_start and time_interval_end params are also not specified.
        Supported operator is `eq`.
      schema:
        type: string
        default: eq.this_year
        enum:
          - eq.this_week
          - eq.this_month
          - eq.this_quarter
          - eq.this_year
        example: eq.this_year
    time_interval_start:
      in: query
      name: time_interval_start
      description: |
        Start of time duration for filtering expenses by spend date.
        Need not to be specified if time_interval_preset param is passed.
        Supported operator is `eq`.
      schema:
        type: string
        description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
        example: '2020-06-01T13:14:54.804+00:00'
    time_interval_end:
      in: query
      name: time_interval_end
      description: |
        End of time duration for filtering expenses by spend date. 
        Need not to be specified if time_interval_preset param is passed.
        Supported operator is `eq`.
      schema:
        type: string
        description: Date-time in [ISO8601 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
        example: '2021-06-01T13:14:54.804+00:00'
    is_card_spend:
      in: query
      name: is_card_spend
      description: |
        For filtering out only those expenses where source account is corporate card account
        Supported operators are `eq`.<br>
      schema:
        type: string
        example: eq.true
    is_reimbursable:
      in: query
      name: is_reimbursable
      description: |
        For filtering out only those expenses which are reimbursable to the employee.
        Supported operators are `eq`.<br>
      schema:
        type: string
        example: eq.true
    merchant:
      in: query
      name: merchant
      description: |
        List of merchants for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(los-pollos-harmanos,saul-goodman)
    category_id:
      in: query
      name: category_id
      description: |
        Category IDs for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(cat123,cat345)
    project_id:
      in: query
      name: project_id
      description: |
        Project IDs for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(proj123,proj456)
    department_id:
      in: query
      name: department_id
      description: |
        Department IDs for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(dept123,dept345)
    user_id:
      in: query
      name: user_id
      description: |
        User IDs for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(us123,us456)
    corporate_card_id:
      in: query
      name: card_id
      description: |
        Corporate card IDs for filtering expenses.
        Supported operator is `in`.
      schema:
        type: string
        example: in.(bacc1234,bacc4567)
    id:
      in: query
      name: id
      description: |
        A resource ID
      schema:
        type: string
        example:
          - eq.ouwruogwnngg
    expense_id:
      in: query
      name: expense_id
      description: |
        Expense id for filtering based on expenses. Supported operator is `eq`.
      schema:
        type: string
        example: expense_id=eq.txS9GZm5hsjh
    display_name:
      in: query
      name: display_name
      description: |
        Supported operators are `eq`, `like`, `in`.<br>
        display_name=in.(value1,value2)
      schema:
        type: string
        example: like.Fast*

expense_out:
  type: object
  properties:
    id:
      $ref: './fields.yaml#/id_string'
    org_id:
      $ref: ./fields.yaml#/org_id
    created_at:
      $ref: ./fields.yaml#/created_at
    updated_at:
      $ref: ./fields.yaml#/updated_at

    amount:
      type: number
      description: >
        The amount for which the expense was/will-be fyled.

        The amount will be in the currency that the organization is setup with in
        case of GET requests. <br>

        Note that, when used as part of creating an Expense via POST, the actual
        amount in the Expense, in a subsequent GET call, may get changed either
        because of policies or admin/approvers changing the amount.
      example: 1500
    user_amount:
      type: number
      description: >
        The expense amount as claimed by user.

        The amount will be in the currency that the organization is setup with in
        case of GET requests. <br>
      example: 1984.18
    policy_amount:
      type: number
      description: >
        The expense amount which is modified by policy.

        The amount will be in the currency that the organization is setup with in
        case of GET requests. <br>
      example: 1500
    admin_amount:
      type: number
      description: >
        The expense amount which is modified by admin or approver.

        The amount will be in the currency that the organization is setup with in
        case of GET requests. <br>

        This could be null if admin or approver has not edited your expense.
      example: 0

    file_ids:
      type: array
      items:
        $ref: ./fields.yaml#/id_string

    bus_travel_class:
      description: |
        This field is applicable only for bus category.
      type: string
      example: AC

    category_id:
      $ref: ./fields.yaml#/fk_integer
      example: 2391
    category:
      $ref: ./category.yaml#/category_out_embed

    cost_center_id:
      $ref: ./fields.yaml#/fk_integer
    cost_center:
      $ref: ./cost_center.yaml#/cost_center_out_embed

    currency:
      $ref: ./fields.yaml#/currency

    foreign_currency:
      $ref: ./fields.yaml#/currency

    custom_fields:
      $ref: ./fields.yaml#/custom_fields

    employee_id:
      $ref: ./fields.yaml#/fk_string

    employee:
      $ref: ./employee.yaml#/employee_out_embed

    ended_at:
      $ref: ./fields.yaml#/timestamptz_pst
      description: >
        This field is only relevant for travel related categories. This represents
        the return date.

    exchange_rate:
      type: number
      nullable: True
      description: >
        This field determines at which rate the expenses from foriegn currency was
        converted to home currency.


    ###################################

    # tax:
    #   type: number
    #   description: Tax amount as setup by your organisation.


    # spent_at:
    #   type: string
    #   format: date-time
    #   description: >
    #     RFC 3339, section 5.6 "https://tools.ietf.org/html/rfc3339#section-5.6"
    #     compliant timestamp on which the expense [being] fyled was made. <br>

    #     This date cannot be in future.
    #   example: '2020-07-21T17:32:28Z'
    # source:
    #   type: string
    #   example: SLACK_APP
    #   description: >
    #     The name of the client app which is creating the expense.

    #     if its a thrid party app, it prefixed with TPA_.

    #     Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
    #     passed, source is saved as TPA.
    # foreign_amount:
    #   $ref: ./foreign_amount.yaml
    # creator_id:
    #   $ref: ./creator_id.yaml
    # creator:
    #   allOf:
    #     - $ref: ./employee.yaml
    #   description: |
    #     Details of employee who created this expense.
    # purpose:
    #   type: string
    #   maxLength: 1024
    #   description: Justification for the expense.
    #   example: Team lunch
    # project_id:
    #   type: string
    #   description: >
    #     The ID generated by Fyle to uniquely identify the Project, to which the
    #     Expense belongs. <br>
    #   example: '1234'
    # project:
    #   $ref: ./project.yaml#/project_out
    # state:
    #   type: string
    #   enum:
    #     - COMPLETE
    #     - DRAFT
    #     - PAID
    #     - PAYMENT_PROCESSING
    #     - APPROVER_PENDING
    #     - PAYMENT_PENDING
    #     - APPROVED
    #   description: The state of the Expense.
    #   readOnly: true
    # source_account_id:
    #   type: string
    # source_account:
    #   $ref: ./source_account.yaml
    # invoice_number:
    #   type: string
    #   readOnly: true
    #   description: |
    #     invoice number from the receipt.
    # billable:
    #   type: boolean
    #   example: true
    #   description: This fields marks whether a given expense is billable a not.
    # reimbursable:
    #   type: boolean
    #   example: true
    # expense_number:
    #   type: string
    #   readOnly: true
    #   description: |
    #     This is user visible identifier for an expense.
    #     This field can be used as reference in UI.
    #   example: E/2020/10/T/95
    # report_id:
    #   type: string
    #   description: |
    #     Unique id given by Fyle to identify an Expense Report.
    # reported_at:
    #   type: string
    #   format: date-time
    #   readOnly: true
    #   description: >
    #     RFC 3339, section 5.6 "https://tools.ietf.org/html/rfc3339#section-5.6"
    #     compliant timestamp on which the Expense was submitted via a Report to the
    #     Approvers.

    #     If the Expense is not added to a Report yet or if the Report is not yet
    #     submitted, this could be null.
    # report:
    #   $ref: ./report.yaml
    # physical_bill:
    #   type: boolean
    #   description: |
    #     This field indicated whether physical bill was received or not.
    #   example: true
    # physical_bill_at:
    #   type: string
    #   format: date-time
    #   description: >
    #     RFC 3339, section 5.6 "https://tools.ietf.org/html/rfc3339#section-5.6"
    #     compliant timestamp indicating when the Expense's physical bill was
    #     submitted.

    #     If the Expense's bill is not required to be submitted, then this could be
    #     null.
    # verified:
    #   type: boolean
    #   description: |
    #     Indicates whether the Expense is verified or not
    #   readOnly: true
    # verified_at:
    #   type: string
    #   format: date-time
    #   description: >
    #     RFC 3339, section 5.6 "https://tools.ietf.org/html/rfc3339#section-5.6"
    #     compliant timestamp on which the Expense was verified.

    #     If the Expense is not verified yet, this could be null. <br>
    #   readOnly: true
    # vendor:
    #   type: string
    #   example: Uber
    #   maxLength: 255
    #   description: |
    #     String denoting the name of the vendor to which the Expense was made
    # vendor_id:
    #   type: string
    #   example: 24242r
    #   maxLength: 255
    #   description: |
    #     String denoting the id of the vendor to which the Expense was made
    # locations:
    #   description: >
    #     This field will be present for travel related categories. To add to and
    #     from location to you travel category related expenses add two locations in
    #     schema given below.
    #   type: array
    #   items:
    #     $ref: ./location.yaml
    # started_at:
    #   description: >
    #     This field is only relevant for travel related categories. This represents
    #     the onward date.
    #   type: string
    #   example: '2019-07-17T00:00:00.000Z'
    # mileage_distance:
    #   type: number
    #   description: Actual distance travelled by employee in mileage expenses.
    # mileage_calculated_distance:
    #   type: number
    #   description: Distance compluted by Fyle in mileage expenses.
    # mileage_distance_unit:
    #   type: string
    #   enum:
    #     - KM
    #     - MILES
    # mileage_calculated_amount:
    #   type: number
    #   description: Amount compluted by Fyle in mileage expenses.
    # mileage_vehicle_type:
    #   type: string
    #   description: Type of vehicle used for travel.
    # mileage_rate:
    #   type: number
    #   description: Rate per km as provided in the Fyle system
    # mileage_is_round_trip:
    #   type: boolean
    #   description: Flag stating whether this was a round trip or not.

    # train_travel_class:
    #   description: |
    #     This field is applicable for only Train category.
    #   type: string
    #   example: string
    # flight_journey_travel_class:
    #   description: >
    #     This field is applicable only for flight category. Can be `BUSINESS`,
    #     `ECONOMY`, `FIRST_CLASS`
    #   type: string
    #   example: ECONOMY
    # flight_return_travel_class:
    #   description: >
    #     This field is applicable only for flight category. Can be `BUSINESS`,
    #     `ECONOMY`, `FIRST_CLASS`
    #   type: string
    #   example: BUSINESS
    # hotel_is_breakfast_provided:
    #   type: boolean
    # per_diem_rate_id:
    #   type: string
    # per_diem_rate:
    #   $ref: ./perdiem.yaml
    # num_days:
    #   type: integer
    #   example: 2
    # has_attachments:
    #   type: boolean
    #   description: >
    #     Returns if there are file attachments that the Expense has. Usually the
    #     image of the receipts are added as attachments to the Expenses.
    #   readOnly: true
    # custom_properties:
    #   type: array
    #   items:
    #     $ref: ./custom_property.yaml
    # is_policy_flagged:
    #   type: boolean
    #   readOnly: true
    #   description: >-
    #     This field indicates whether policy execution has flagged this expenses or
    #     not.
    #   example: false
    # is_manual_flagged:
    #   type: boolean
    #   description: >
    #     This field indicates whether this expenses was manually flagged by
    #     approver or finance or admin.
    #   example: true
    # policy_state:
    #   type: string
    #   readOnly: true
    #   enum:
    #     - FAILED
    #     - SUCCESS
    #     - RUNNING
    #   description: |
    #     This fields shows policy execution state for this expenses.
    #     If this field is null then its policy has not yet run on this expenses.
    # extracted_data:
    #   readOnly: true
    #   type: object
    # transcribed_data:
    #   type: object
    #   readOnly: true
    # is_user_review_needed:
    #   type: boolean
    #   readOnly: true
    # is_mandatory_fields_present:
    #   type: boolean
    #   readOnly: true
    # is_receipt_required:
    #   type: boolean
    #   readOnly: true
    # is_holiday_expense:
    #   type: boolean
    #   readOnly: true
    # risk_state:
    #   type: string
    #   readOnly: true
    #   enum:
    #     - HIGH_RISK
    #     - MODERATE_RISK
    #     - NO_RISK
    #   example: NO_RISK
    # external_id:
    #   type: string
    #   description: >
    #     Id given by external systems like Gmail. To identify whether that entity
    #     has been already added to Fyle or not.
    # split_group_id:
    #   type: string
    # split_group_user_amount:
    #   type: number
    # personal_card_transaction:
    #   type: object
    #   readOnly: true
    #   description: >
    #     This key contains details about personal card transaction linked to this
    #     expense.
    # expense_approvals:
    #   type: array
    #   readOnly: true
    #   items:
    #     $ref: ./approvals.yaml
    #   example:
    #     - approver_id: ougelgneget
    #       state: APPROVED
    #     - approver_id: ougo3nlwfgg
    #       state: APPROVAL_PENDING
    # last_updater_id:
    #   type: string
    #   readOnly: true
    #   description: |
    #     This represents the id of employee who updated this expense.
    #   example: ouGgsdfdq
    # last_updater:
    #   readOnly: true
    #   allOf:
    #     - $ref: ./employee.yaml
    #   description: |
    #     Details of employee who updated this expense.

expense_in:
  spent_at:
    $ref: './fields.yaml#/timestamptz_pst'
  source:
    type: string
    description: |
      The name of the client app which is creating the expense.
      if its a thrid party app, it prefixed with TPA_.
      Ex - If you pass SLACK_APP, it will be saved as TPA_SLACK_APP. If not
      passed, source is saved as TPA.
    example: SLACK_APP
  vendor:
    type: string
    maxLength: 255
    description: |
      String denoting the name of the vendor to which the Expense was made.
    example: Uber
  currency:
    $ref: './fields.yaml#/currency'
  foreign_currency:
    $ref: './fields.yaml#/foreign_currency'
  foreign_amount:
    $ref: './fields.yaml#/foreign_amount'
  purpose:
    type: string
    example: Team lunch
  cost_center_id:
    allOf:
      $ref: './fields.yaml#/fk_integer'
    example: 1049
  category_id:
    allOf:
      $ref: './fields.yaml#/fk_integer'
    example: 49058
  project_id:
    allOf:
      $ref: './fields.yaml#/fk_integer'
    example: 92895
  source_account_id:
    allOf:
      $ref: './fields.yaml#/fk_string'
  tax:
    type: number
    description: Tax amount as setup by your organisation.
  is_billable:
    type: boolean
    example: true
    description: This fields marks whether a given expense is billable a not.
  is_reimbursable:
    type: boolean
    example: true
  distance:
    type: number
    description: Actual distance travelled by employee in travel related expenses.
  distance_unit:
    type: string
    enum:
      - KM
      - MILES
  mileage_calculated_distance:
    type: number
    description: Distance compluted by Fyle in mileage expenses.
  mileage_calculated_amount:
    type: number
    description: Amount compluted by Fyle in mileage expenses.
  mileage_rate_id:
    allOf:
      $ref: './fields.yaml#/fk_integer'
    example: 9080
  mileage_is_round_trip:
    type: boolean
    description: Flag stating whether this was a round trip or not.
  per_diem_rate_id:
    allOf:
      $ref: './fields.yaml#/fk_integer'
    example: 583
  num_days:
    type: integer
    example: 2
  started_at:
    $ref: './fields.yaml#/timestamptz_pst'
  ended_at:
    $ref: './fields.yaml#/timestamptz_pst'
  flight_journey_travel_class:
    description: >
      This field is applicable only for flight category. Can be `BUSINESS`,
      `ECONOMY`, `FIRST_CLASS` or any value configured by your org.
    type: string
    example: ECONOMY
  flight_return_travel_class:
    description: >
      This field is applicable only for flight category. Can be `BUSINESS`,
      `ECONOMY`, `FIRST_CLASS` or any value configured by your org.
    type: string
    example: BUSINESS
  train_travel_class:
    type: string
    description: |
      This field is applicable for only `Train` category.
    example: 1st AC
  bus_travel_class:
    description: |
      This field is applicable only for `Bus` category.
    type: string
    example: AC
  taxi_travel_class:
    description: |
      This field is applicable only for `Taxi` category.
    type: string
    example: AC
  hotel_is_breakfast_provided:
    type: boolean
    description: |
      This field is applicable for only `Hotel` category.
  locations:
    description: |
      This field will be present for travel related categories.
      For travel between Place A to Place B, this array will contain two items, From location at array index 0 and To location at array index 1.
      For travel between Place A to Place c and stopping at Place B, this
    type: array
    minItems: 2
    maxItems: 10
    items:
      $ref: './fields.yaml#/location'
  custom_fields:
    $ref: ./fields.yaml#/custom_fields

fyler_expense_in:
  allOf:
    - ref: '#/expense_in'
    - type: object
      properties:
        user_amount:
          $ref: './fields.yaml#/amount'

admin_expense_in:
  allOf:
    - ref: '#/expense_in'
    - type: object
      properties:
        admin_amount:
          $ref: './fields.yaml#/amount'
        user_id:
          $ref: './fields.yaml#/fk_string'